{"/home/travis/build/npmtest/node-npmtest-noflo/test.js":"/* istanbul instrument in package npmtest_noflo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-noflo/lib.npmtest_noflo.js":"/* istanbul instrument in package npmtest_noflo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_noflo = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_noflo = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-noflo/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-noflo && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_noflo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_noflo\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_noflo.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_noflo.rollup.js'] =\n            local.assetsDict['/assets.npmtest_noflo.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_noflo.__dirname + '/lib.npmtest_noflo.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-noflo/node_modules/noflo/lib/NoFlo.js":"(function() {\n  var fbpGraph, ports;\n\n  fbpGraph = require('fbp-graph');\n\n  exports.graph = fbpGraph.graph;\n\n  exports.Graph = fbpGraph.Graph;\n\n  exports.journal = fbpGraph.journal;\n\n  exports.Journal = fbpGraph.Journal;\n\n  exports.Network = require('./Network').Network;\n\n  exports.isBrowser = require('./Platform').isBrowser;\n\n  exports.ComponentLoader = require('./ComponentLoader').ComponentLoader;\n\n  exports.Component = require('./Component').Component;\n\n  exports.AsyncComponent = require('./AsyncComponent').AsyncComponent;\n\n  exports.helpers = require('./Helpers');\n\n  exports.streams = require('./Streams');\n\n  ports = require('./Ports');\n\n  exports.InPorts = ports.InPorts;\n\n  exports.OutPorts = ports.OutPorts;\n\n  exports.InPort = require('./InPort');\n\n  exports.OutPort = require('./OutPort');\n\n  exports.Port = require('./Port').Port;\n\n  exports.ArrayPort = require('./ArrayPort').ArrayPort;\n\n  exports.internalSocket = require('./InternalSocket');\n\n  exports.IP = require('./IP');\n\n  exports.createNetwork = function(graph, callback, options) {\n    var network, networkReady;\n    if (typeof options !== 'object') {\n      options = {\n        delay: options\n      };\n    }\n    if (typeof callback !== 'function') {\n      callback = function(err) {\n        if (err) {\n          throw err;\n        }\n      };\n    }\n    network = new exports.Network(graph, options);\n    networkReady = function(network) {\n      return network.start(function(err) {\n        if (err) {\n          return callback(err);\n        }\n        return callback(null, network);\n      });\n    };\n    network.loader.listComponents(function(err) {\n      if (err) {\n        return callback(err);\n      }\n      if (graph.nodes.length === 0) {\n        return networkReady(network);\n      }\n      if (options.delay) {\n        callback(null, network);\n        return;\n      }\n      return network.connect(function(err) {\n        if (err) {\n          return callback(err);\n        }\n        return networkReady(network);\n      });\n    });\n    return network;\n  };\n\n  exports.loadFile = function(file, options, callback) {\n    var baseDir;\n    if (!callback) {\n      callback = options;\n      baseDir = null;\n    }\n    if (callback && typeof options !== 'object') {\n      options = {\n        baseDir: options\n      };\n    }\n    return exports.graph.loadFile(file, function(err, net) {\n      if (err) {\n        return callback(err);\n      }\n      if (options.baseDir) {\n        net.baseDir = options.baseDir;\n      }\n      return exports.createNetwork(net, callback, options);\n    });\n  };\n\n  exports.saveFile = function(graph, file, callback) {\n    return exports.graph.save(file, callback);\n  };\n\n  exports.asCallback = require('./AsCallback').asCallback;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-noflo/node_modules/noflo/lib/Network.js":"(function() {\n  var EventEmitter, IP, Network, componentLoader, graph, internalSocket, platform, utils,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  internalSocket = require(\"./InternalSocket\");\n\n  graph = require(\"fbp-graph\");\n\n  EventEmitter = require('events').EventEmitter;\n\n  platform = require('./Platform');\n\n  componentLoader = require('./ComponentLoader');\n\n  utils = require('./Utils');\n\n  IP = require('./IP');\n\n  Network = (function(superClass) {\n    extend(Network, superClass);\n\n    Network.prototype.processes = {};\n\n    Network.prototype.connections = [];\n\n    Network.prototype.initials = [];\n\n    Network.prototype.defaults = [];\n\n    Network.prototype.graph = null;\n\n    Network.prototype.startupDate = null;\n\n    function Network(graph, options) {\n      this.options = options != null ? options : {};\n      this.processes = {};\n      this.connections = [];\n      this.initials = [];\n      this.nextInitials = [];\n      this.defaults = [];\n      this.graph = graph;\n      this.started = false;\n      this.debug = true;\n      this.eventBuffer = [];\n      if (!platform.isBrowser()) {\n        this.baseDir = graph.baseDir || process.cwd();\n      } else {\n        this.baseDir = graph.baseDir || '/';\n      }\n      this.startupDate = null;\n      if (graph.componentLoader) {\n        this.loader = graph.componentLoader;\n      } else {\n        this.loader = new componentLoader.ComponentLoader(this.baseDir, this.options);\n      }\n    }\n\n    Network.prototype.uptime = function() {\n      if (!this.startupDate) {\n        return 0;\n      }\n      return new Date() - this.startupDate;\n    };\n\n    Network.prototype.getActiveProcesses = function() {\n      var active, name, process, ref;\n      active = [];\n      if (!this.started) {\n        return active;\n      }\n      ref = this.processes;\n      for (name in ref) {\n        process = ref[name];\n        if (process.component.load > 0) {\n          active.push(name);\n        }\n        if (process.component.__openConnections > 0) {\n          active.push(name);\n        }\n      }\n      return active;\n    };\n\n    Network.prototype.bufferedEmit = function(event, payload) {\n      var ev, i, len, ref;\n      if (event === 'error' || event === 'process-error' || event === 'end') {\n        this.emit(event, payload);\n        return;\n      }\n      if (!this.isStarted() && event !== 'end') {\n        this.eventBuffer.push({\n          type: event,\n          payload: payload\n        });\n        return;\n      }\n      this.emit(event, payload);\n      if (event === 'start') {\n        ref = this.eventBuffer;\n        for (i = 0, len = ref.length; i < len; i++) {\n          ev = ref[i];\n          this.emit(ev.type, ev.payload);\n        }\n        return this.eventBuffer = [];\n      }\n    };\n\n    Network.prototype.load = function(component, metadata, callback) {\n      return this.loader.load(component, callback, metadata);\n    };\n\n    Network.prototype.addNode = function(node, callback) {\n      var process;\n      if (this.processes[node.id]) {\n        callback(null, this.processes[node.id]);\n        return;\n      }\n      process = {\n        id: node.id\n      };\n      if (!node.component) {\n        this.processes[process.id] = process;\n        callback(null, process);\n        return;\n      }\n      return this.load(node.component, node.metadata, (function(_this) {\n        return function(err, instance) {\n          var inPorts, name, outPorts, port;\n          if (err) {\n            return callback(err);\n          }\n          instance.nodeId = node.id;\n          process.component = instance;\n          process.componentName = node.component;\n          inPorts = process.component.inPorts.ports || process.component.inPorts;\n          outPorts = process.component.outPorts.ports || process.component.outPorts;\n          for (name in inPorts) {\n            port = inPorts[name];\n            port.node = node.id;\n            port.nodeInstance = instance;\n            port.name = name;\n          }\n          for (name in outPorts) {\n            port = outPorts[name];\n            port.node = node.id;\n            port.nodeInstance = instance;\n            port.name = name;\n          }\n          if (instance.isSubgraph()) {\n            _this.subscribeSubgraph(process);\n          }\n          _this.subscribeNode(process);\n          _this.processes[process.id] = process;\n          return callback(null, process);\n        };\n      })(this));\n    };\n\n    Network.prototype.removeNode = function(node, callback) {\n      if (!this.processes[node.id]) {\n        return callback(new Error(\"Node \" + node.id + \" not found\"));\n      }\n      return this.processes[node.id].component.shutdown((function(_this) {\n        return function(err) {\n          if (err) {\n            return callback(err);\n          }\n          delete _this.processes[node.id];\n          return callback(null);\n        };\n      })(this));\n    };\n\n    Network.prototype.renameNode = function(oldId, newId, callback) {\n      var inPorts, name, outPorts, port, process;\n      process = this.getNode(oldId);\n      if (!process) {\n        return callback(new Error(\"Process \" + oldId + \" not found\"));\n      }\n      process.id = newId;\n      inPorts = process.component.inPorts.ports || process.component.inPorts;\n      outPorts = process.component.outPorts.ports || process.component.outPorts;\n      for (name in inPorts) {\n        port = inPorts[name];\n        if (!port) {\n          continue;\n        }\n        port.node = newId;\n      }\n      for (name in outPorts) {\n        port = outPorts[name];\n        if (!port) {\n          continue;\n        }\n        port.node = newId;\n      }\n      this.processes[newId] = process;\n      delete this.processes[oldId];\n      return callback(null);\n    };\n\n    Network.prototype.getNode = function(id) {\n      return this.processes[id];\n    };\n\n    Network.prototype.connect = function(done) {\n      var callStack, edges, initializers, nodes, serialize, setDefaults, subscribeGraph;\n      if (done == null) {\n        done = function() {};\n      }\n      callStack = 0;\n      serialize = (function(_this) {\n        return function(next, add) {\n          return function(type) {\n            return _this[\"add\" + type](add, function(err) {\n              if (err) {\n                return done(err);\n              }\n              callStack++;\n              if (callStack % 100 === 0) {\n                setTimeout(function() {\n                  return next(type);\n                }, 0);\n                return;\n              }\n              return next(type);\n            });\n          };\n        };\n      })(this);\n      subscribeGraph = (function(_this) {\n        return function() {\n          _this.subscribeGraph();\n          return done();\n        };\n      })(this);\n      setDefaults = utils.reduceRight(this.graph.nodes, serialize, subscribeGraph);\n      initializers = utils.reduceRight(this.graph.initializers, serialize, function() {\n        return setDefaults(\"Defaults\");\n      });\n      edges = utils.reduceRight(this.graph.edges, serialize, function() {\n        return initializers(\"Initial\");\n      });\n      nodes = utils.reduceRight(this.graph.nodes, serialize, function() {\n        return edges(\"Edge\");\n      });\n      return nodes(\"Node\");\n    };\n\n    Network.prototype.connectPort = function(socket, process, port, index, inbound) {\n      if (inbound) {\n        socket.to = {\n          process: process,\n          port: port,\n          index: index\n        };\n        if (!(process.component.inPorts && process.component.inPorts[port])) {\n          throw new Error(\"No inport '\" + port + \"' defined in process \" + process.id + \" (\" + (socket.getId()) + \")\");\n          return;\n        }\n        if (process.component.inPorts[port].isAddressable()) {\n          return process.component.inPorts[port].attach(socket, index);\n        }\n        return process.component.inPorts[port].attach(socket);\n      }\n      socket.from = {\n        process: process,\n        port: port,\n        index: index\n      };\n      if (!(process.component.outPorts && process.component.outPorts[port])) {\n        throw new Error(\"No outport '\" + port + \"' defined in process \" + process.id + \" (\" + (socket.getId()) + \")\");\n        return;\n      }\n      if (process.component.outPorts[port].isAddressable()) {\n        return process.component.outPorts[port].attach(socket, index);\n      }\n      return process.component.outPorts[port].attach(socket);\n    };\n\n    Network.prototype.subscribeGraph = function() {\n      var graphOps, processOps, processing, registerOp;\n      graphOps = [];\n      processing = false;\n      registerOp = function(op, details) {\n        return graphOps.push({\n          op: op,\n          details: details\n        });\n      };\n      processOps = (function(_this) {\n        return function(err) {\n          var cb, op;\n          if (err) {\n            if (_this.listeners('process-error').length === 0) {\n              throw err;\n            }\n            _this.bufferedEmit('process-error', err);\n          }\n          if (!graphOps.length) {\n            processing = false;\n            return;\n          }\n          processing = true;\n          op = graphOps.shift();\n          cb = processOps;\n          switch (op.op) {\n            case 'renameNode':\n              return _this.renameNode(op.details.from, op.details.to, cb);\n            default:\n              return _this[op.op](op.details, cb);\n          }\n        };\n      })(this);\n      this.graph.on('addNode', function(node) {\n        registerOp('addNode', node);\n        if (!processing) {\n          return processOps();\n        }\n      });\n      this.graph.on('removeNode', function(node) {\n        registerOp('removeNode', node);\n        if (!processing) {\n          return processOps();\n        }\n      });\n      this.graph.on('renameNode', function(oldId, newId) {\n        registerOp('renameNode', {\n          from: oldId,\n          to: newId\n        });\n        if (!processing) {\n          return processOps();\n        }\n      });\n      this.graph.on('addEdge', function(edge) {\n        registerOp('addEdge', edge);\n        if (!processing) {\n          return processOps();\n        }\n      });\n      this.graph.on('removeEdge', function(edge) {\n        registerOp('removeEdge', edge);\n        if (!processing) {\n          return processOps();\n        }\n      });\n      this.graph.on('addInitial', function(iip) {\n        registerOp('addInitial', iip);\n        if (!processing) {\n          return processOps();\n        }\n      });\n      return this.graph.on('removeInitial', function(iip) {\n        registerOp('removeInitial', iip);\n        if (!processing) {\n          return processOps();\n        }\n      });\n    };\n\n    Network.prototype.subscribeSubgraph = function(node) {\n      var emitSub;\n      if (!node.component.isReady()) {\n        node.component.once('ready', (function(_this) {\n          return function() {\n            return _this.subscribeSubgraph(node);\n          };\n        })(this));\n        return;\n      }\n      if (!node.component.network) {\n        return;\n      }\n      node.component.network.setDebug(this.debug);\n      emitSub = (function(_this) {\n        return function(type, data) {\n          if (type === 'process-error' && _this.listeners('process-error').length === 0) {\n            if (data.id && data.metadata && data.error) {\n              throw data.error;\n            }\n            throw data;\n          }\n          if (!data) {\n            data = {};\n          }\n          if (data.subgraph) {\n            if (!data.subgraph.unshift) {\n              data.subgraph = [data.subgraph];\n            }\n            data.subgraph = data.subgraph.unshift(node.id);\n          } else {\n            data.subgraph = [node.id];\n          }\n          return _this.bufferedEmit(type, data);\n        };\n      })(this);\n      node.component.network.on('connect', function(data) {\n        return emitSub('connect', data);\n      });\n      node.component.network.on('begingroup', function(data) {\n        return emitSub('begingroup', data);\n      });\n      node.component.network.on('data', function(data) {\n        return emitSub('data', data);\n      });\n      node.component.network.on('endgroup', function(data) {\n        return emitSub('endgroup', data);\n      });\n      node.component.network.on('disconnect', function(data) {\n        return emitSub('disconnect', data);\n      });\n      node.component.network.on('ip', function(data) {\n        return emitSub('ip', data);\n      });\n      return node.component.network.on('process-error', function(data) {\n        return emitSub('process-error', data);\n      });\n    };\n\n    Network.prototype.subscribeSocket = function(socket, source) {\n      socket.on('ip', (function(_this) {\n        return function(ip) {\n          return _this.bufferedEmit('ip', {\n            id: socket.getId(),\n            type: ip.type,\n            socket: socket,\n            data: ip.data,\n            metadata: socket.metadata\n          });\n        };\n      })(this));\n      socket.on('connect', (function(_this) {\n        return function() {\n          if (source && source.component.isLegacy()) {\n            if (!source.component.__openConnections) {\n              source.component.__openConnections = 0;\n            }\n            source.component.__openConnections++;\n          }\n          return _this.bufferedEmit('connect', {\n            id: socket.getId(),\n            socket: socket,\n            metadata: socket.metadata\n          });\n        };\n      })(this));\n      socket.on('begingroup', (function(_this) {\n        return function(group) {\n          return _this.bufferedEmit('begingroup', {\n            id: socket.getId(),\n            socket: socket,\n            group: group,\n            metadata: socket.metadata\n          });\n        };\n      })(this));\n      socket.on('data', (function(_this) {\n        return function(data) {\n          return _this.bufferedEmit('data', {\n            id: socket.getId(),\n            socket: socket,\n            data: data,\n            metadata: socket.metadata\n          });\n        };\n      })(this));\n      socket.on('endgroup', (function(_this) {\n        return function(group) {\n          return _this.bufferedEmit('endgroup', {\n            id: socket.getId(),\n            socket: socket,\n            group: group,\n            metadata: socket.metadata\n          });\n        };\n      })(this));\n      socket.on('disconnect', (function(_this) {\n        return function() {\n          _this.bufferedEmit('disconnect', {\n            id: socket.getId(),\n            socket: socket,\n            metadata: socket.metadata\n          });\n          if (source && source.component.isLegacy()) {\n            source.component.__openConnections--;\n            if (source.component.__openConnections < 0) {\n              source.component.__openConnections = 0;\n            }\n            if (source.component.__openConnections === 0) {\n              return _this.checkIfFinished();\n            }\n          }\n        };\n      })(this));\n      return socket.on('error', (function(_this) {\n        return function(event) {\n          if (_this.listeners('process-error').length === 0) {\n            if (event.id && event.metadata && event.error) {\n              throw event.error;\n            }\n            throw event;\n          }\n          return _this.bufferedEmit('process-error', event);\n        };\n      })(this));\n    };\n\n    Network.prototype.subscribeNode = function(node) {\n      node.component.on('deactivate', (function(_this) {\n        return function(load) {\n          if (load > 0) {\n            return;\n          }\n          return _this.checkIfFinished();\n        };\n      })(this));\n      if (!node.component.getIcon) {\n        return;\n      }\n      return node.component.on('icon', (function(_this) {\n        return function() {\n          return _this.bufferedEmit('icon', {\n            id: node.id,\n            icon: node.component.getIcon()\n          });\n        };\n      })(this));\n    };\n\n    Network.prototype.addEdge = function(edge, callback) {\n      var from, socket, to;\n      socket = internalSocket.createSocket(edge.metadata);\n      socket.setDebug(this.debug);\n      from = this.getNode(edge.from.node);\n      if (!from) {\n        return callback(new Error(\"No process defined for outbound node \" + edge.from.node));\n      }\n      if (!from.component) {\n        return callback(new Error(\"No component defined for outbound node \" + edge.from.node));\n      }\n      if (!from.component.isReady()) {\n        from.component.once(\"ready\", (function(_this) {\n          return function() {\n            return _this.addEdge(edge, callback);\n          };\n        })(this));\n        return;\n      }\n      to = this.getNode(edge.to.node);\n      if (!to) {\n        return callback(new Error(\"No process defined for inbound node \" + edge.to.node));\n      }\n      if (!to.component) {\n        return callback(new Error(\"No component defined for inbound node \" + edge.to.node));\n      }\n      if (!to.component.isReady()) {\n        to.component.once(\"ready\", (function(_this) {\n          return function() {\n            return _this.addEdge(edge, callback);\n          };\n        })(this));\n        return;\n      }\n      this.subscribeSocket(socket, from);\n      this.connectPort(socket, to, edge.to.port, edge.to.index, true);\n      this.connectPort(socket, from, edge.from.port, edge.from.index, false);\n      this.connections.push(socket);\n      return callback();\n    };\n\n    Network.prototype.removeEdge = function(edge, callback) {\n      var connection, i, len, ref, results;\n      ref = this.connections;\n      results = [];\n      for (i = 0, len = ref.length; i < len; i++) {\n        connection = ref[i];\n        if (!connection) {\n          continue;\n        }\n        if (!(edge.to.node === connection.to.process.id && edge.to.port === connection.to.port)) {\n          continue;\n        }\n        connection.to.process.component.inPorts[connection.to.port].detach(connection);\n        if (edge.from.node) {\n          if (connection.from && edge.from.node === connection.from.process.id && edge.from.port === connection.from.port) {\n            connection.from.process.component.outPorts[connection.from.port].detach(connection);\n          }\n        }\n        this.connections.splice(this.connections.indexOf(connection), 1);\n        results.push(callback());\n      }\n      return results;\n    };\n\n    Network.prototype.addDefaults = function(node, callback) {\n      var key, port, process, ref, socket;\n      process = this.processes[node.id];\n      if (!process.component.isReady()) {\n        if (process.component.setMaxListeners) {\n          process.component.setMaxListeners(0);\n        }\n        process.component.once(\"ready\", (function(_this) {\n          return function() {\n            return _this.addDefaults(process, callback);\n          };\n        })(this));\n        return;\n      }\n      ref = process.component.inPorts.ports;\n      for (key in ref) {\n        port = ref[key];\n        if (typeof port.hasDefault === 'function' && port.hasDefault() && !port.isAttached()) {\n          socket = internalSocket.createSocket();\n          socket.setDebug(this.debug);\n          this.subscribeSocket(socket);\n          this.connectPort(socket, process, key, void 0, true);\n          this.connections.push(socket);\n          this.defaults.push(socket);\n        }\n      }\n      return callback();\n    };\n\n    Network.prototype.addInitial = function(initializer, callback) {\n      var init, socket, to;\n      socket = internalSocket.createSocket(initializer.metadata);\n      socket.setDebug(this.debug);\n      this.subscribeSocket(socket);\n      to = this.getNode(initializer.to.node);\n      if (!to) {\n        return callback(new Error(\"No process defined for inbound node \" + initializer.to.node));\n      }\n      if (!(to.component.isReady() || to.component.inPorts[initializer.to.port])) {\n        if (to.component.setMaxListeners) {\n          to.component.setMaxListeners(0);\n        }\n        to.component.once(\"ready\", (function(_this) {\n          return function() {\n            return _this.addInitial(initializer, callback);\n          };\n        })(this));\n        return;\n      }\n      this.connectPort(socket, to, initializer.to.port, initializer.to.index, true);\n      this.connections.push(socket);\n      init = {\n        socket: socket,\n        data: initializer.from.data\n      };\n      this.initials.push(init);\n      this.nextInitials.push(init);\n      if (this.isStarted()) {\n        this.sendInitials();\n      }\n      return callback();\n    };\n\n    Network.prototype.removeInitial = function(initializer, callback) {\n      var connection, i, init, j, k, len, len1, len2, ref, ref1, ref2;\n      ref = this.connections;\n      for (i = 0, len = ref.length; i < len; i++) {\n        connection = ref[i];\n        if (!connection) {\n          continue;\n        }\n        if (!(initializer.to.node === connection.to.process.id && initializer.to.port === connection.to.port)) {\n          continue;\n        }\n        connection.to.process.component.inPorts[connection.to.port].detach(connection);\n        this.connections.splice(this.connections.indexOf(connection), 1);\n        ref1 = this.initials;\n        for (j = 0, len1 = ref1.length; j < len1; j++) {\n          init = ref1[j];\n          if (!init) {\n            continue;\n          }\n          if (init.socket !== connection) {\n            continue;\n          }\n          this.initials.splice(this.initials.indexOf(init), 1);\n        }\n        ref2 = this.nextInitials;\n        for (k = 0, len2 = ref2.length; k < len2; k++) {\n          init = ref2[k];\n          if (!init) {\n            continue;\n          }\n          if (init.socket !== connection) {\n            continue;\n          }\n          this.nextInitials.splice(this.nextInitials.indexOf(init), 1);\n        }\n      }\n      return callback();\n    };\n\n    Network.prototype.sendInitial = function(initial) {\n      return initial.socket.post(new IP('data', initial.data, {\n        initial: true\n      }));\n    };\n\n    Network.prototype.sendInitials = function(callback) {\n      var send;\n      if (!callback) {\n        callback = function() {};\n      }\n      send = (function(_this) {\n        return function() {\n          var i, initial, len, ref;\n          ref = _this.initials;\n          for (i = 0, len = ref.length; i < len; i++) {\n            initial = ref[i];\n            _this.sendInitial(initial);\n          }\n          _this.initials = [];\n          return callback();\n        };\n      })(this);\n      if (typeof process !== 'undefined' && process.execPath && process.execPath.indexOf('node') !== -1) {\n        return process.nextTick(send);\n      } else {\n        return setTimeout(send, 0);\n      }\n    };\n\n    Network.prototype.isStarted = function() {\n      return this.started;\n    };\n\n    Network.prototype.isRunning = function() {\n      if (!this.started) {\n        return false;\n      }\n      return this.getActiveProcesses().length > 0;\n    };\n\n    Network.prototype.startComponents = function(callback) {\n      var count, id, length, onProcessStart, process, ref, results;\n      if (!callback) {\n        callback = function() {};\n      }\n      count = 0;\n      length = this.processes ? Object.keys(this.processes).length : 0;\n      onProcessStart = function(err) {\n        if (err) {\n          return callback(err);\n        }\n        count++;\n        if (count === length) {\n          return callback();\n        }\n      };\n      if (!(this.processes && Object.keys(this.processes).length)) {\n        return callback();\n      }\n      ref = this.processes;\n      results = [];\n      for (id in ref) {\n        process = ref[id];\n        if (process.component.isStarted()) {\n          onProcessStart();\n          continue;\n        }\n        if (process.component.start.length === 0) {\n          platform.deprecated('component.start method without callback is deprecated');\n          process.component.start();\n          onProcessStart();\n          continue;\n        }\n        results.push(process.component.start(onProcessStart));\n      }\n      return results;\n    };\n\n    Network.prototype.sendDefaults = function(callback) {\n      var i, len, ref, socket;\n      if (!callback) {\n        callback = function() {};\n      }\n      if (!this.defaults.length) {\n        return callback();\n      }\n      ref = this.defaults;\n      for (i = 0, len = ref.length; i < len; i++) {\n        socket = ref[i];\n        if (socket.to.process.component.inPorts[socket.to.port].sockets.length !== 1) {\n          continue;\n        }\n        socket.connect();\n        socket.send();\n        socket.disconnect();\n      }\n      return callback();\n    };\n\n    Network.prototype.start = function(callback) {\n      if (!callback) {\n        platform.deprecated('Calling network.start() without callback is deprecated');\n        callback = function() {};\n      }\n      if (this.debouncedEnd) {\n        this.abortDebounce = true;\n      }\n      if (this.started) {\n        this.stop((function(_this) {\n          return function(err) {\n            if (err) {\n              return callback(err);\n            }\n            return _this.start(callback);\n          };\n        })(this));\n        return;\n      }\n      this.initials = this.nextInitials.slice(0);\n      this.eventBuffer = [];\n      return this.startComponents((function(_this) {\n        return function(err) {\n          if (err) {\n            return callback(err);\n          }\n          return _this.sendInitials(function(err) {\n            if (err) {\n              return callback(err);\n            }\n            return _this.sendDefaults(function(err) {\n              if (err) {\n                return callback(err);\n              }\n              _this.setStarted(true);\n              return callback(null);\n            });\n          });\n        };\n      })(this));\n    };\n\n    Network.prototype.stop = function(callback) {\n      var connection, count, i, id, len, length, onProcessEnd, process, ref, ref1, results;\n      if (!callback) {\n        platform.deprecated('Calling network.stop() without callback is deprecated');\n        callback = function() {};\n      }\n      if (this.debouncedEnd) {\n        this.abortDebounce = true;\n      }\n      if (!this.started) {\n        return callback(null);\n      }\n      ref = this.connections;\n      for (i = 0, len = ref.length; i < len; i++) {\n        connection = ref[i];\n        if (!connection.isConnected()) {\n          continue;\n        }\n        connection.disconnect();\n      }\n      count = 0;\n      length = this.processes ? Object.keys(this.processes).length : 0;\n      onProcessEnd = (function(_this) {\n        return function(err) {\n          if (err) {\n            return callback(err);\n          }\n          count++;\n          if (count === length) {\n            _this.setStarted(false);\n            return callback();\n          }\n        };\n      })(this);\n      if (!(this.processes && Object.keys(this.processes).length)) {\n        this.setStarted(false);\n        return callback();\n      }\n      ref1 = this.processes;\n      results = [];\n      for (id in ref1) {\n        process = ref1[id];\n        if (!process.component.isStarted()) {\n          onProcessEnd();\n          continue;\n        }\n        if (process.component.shutdown.length === 0) {\n          platform.deprecated('component.shutdown method without callback is deprecated');\n          process.component.shutdown();\n          onProcessEnd();\n          continue;\n        }\n        results.push(process.component.shutdown(onProcessEnd));\n      }\n      return results;\n    };\n\n    Network.prototype.setStarted = function(started) {\n      if (this.started === started) {\n        return;\n      }\n      if (!started) {\n        this.started = false;\n        this.bufferedEmit('end', {\n          start: this.startupDate,\n          end: new Date,\n          uptime: this.uptime()\n        });\n        return;\n      }\n      if (!this.startupDate) {\n        this.startupDate = new Date;\n      }\n      this.started = true;\n      return this.bufferedEmit('start', {\n        start: this.startupDate\n      });\n    };\n\n    Network.prototype.checkIfFinished = function() {\n      if (this.isRunning()) {\n        return;\n      }\n      delete this.abortDebounce;\n      if (!this.debouncedEnd) {\n        this.debouncedEnd = utils.debounce((function(_this) {\n          return function() {\n            if (_this.abortDebounce) {\n              return;\n            }\n            if (_this.isRunning()) {\n              return;\n            }\n            return _this.setStarted(false);\n          };\n        })(this), 50);\n      }\n      return this.debouncedEnd();\n    };\n\n    Network.prototype.getDebug = function() {\n      return this.debug;\n    };\n\n    Network.prototype.setDebug = function(active) {\n      var i, instance, len, process, processId, ref, ref1, results, socket;\n      if (active === this.debug) {\n        return;\n      }\n      this.debug = active;\n      ref = this.connections;\n      for (i = 0, len = ref.length; i < len; i++) {\n        socket = ref[i];\n        socket.setDebug(active);\n      }\n      ref1 = this.processes;\n      results = [];\n      for (processId in ref1) {\n        process = ref1[processId];\n        instance = process.component;\n        if (instance.isSubgraph()) {\n          results.push(instance.network.setDebug(active));\n        } else {\n          results.push(void 0);\n        }\n      }\n      return results;\n    };\n\n    return Network;\n\n  })(EventEmitter);\n\n  exports.Network = Network;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-noflo/node_modules/noflo/lib/InternalSocket.js":"(function() {\n  var EventEmitter, IP, InternalSocket,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  EventEmitter = require('events').EventEmitter;\n\n  IP = require('./IP');\n\n  InternalSocket = (function(superClass) {\n    extend(InternalSocket, superClass);\n\n    InternalSocket.prototype.regularEmitEvent = function(event, data) {\n      return this.emit(event, data);\n    };\n\n    InternalSocket.prototype.debugEmitEvent = function(event, data) {\n      var error, error1;\n      try {\n        return this.emit(event, data);\n      } catch (error1) {\n        error = error1;\n        if (error.id && error.metadata && error.error) {\n          if (this.listeners('error').length === 0) {\n            throw error.error;\n          }\n          this.emit('error', error);\n          return;\n        }\n        if (this.listeners('error').length === 0) {\n          throw error;\n        }\n        return this.emit('error', {\n          id: this.to.process.id,\n          error: error,\n          metadata: this.metadata\n        });\n      }\n    };\n\n    function InternalSocket(metadata) {\n      this.metadata = metadata != null ? metadata : {};\n      this.brackets = [];\n      this.connected = false;\n      this.dataDelegate = null;\n      this.debug = false;\n      this.emitEvent = this.regularEmitEvent;\n    }\n\n    InternalSocket.prototype.connect = function() {\n      if (this.connected) {\n        return;\n      }\n      this.connected = true;\n      return this.emitEvent('connect', null);\n    };\n\n    InternalSocket.prototype.disconnect = function() {\n      if (!this.connected) {\n        return;\n      }\n      this.connected = false;\n      return this.emitEvent('disconnect', null);\n    };\n\n    InternalSocket.prototype.isConnected = function() {\n      return this.connected;\n    };\n\n    InternalSocket.prototype.send = function(data) {\n      if (data === void 0 && typeof this.dataDelegate === 'function') {\n        data = this.dataDelegate();\n      }\n      return this.handleSocketEvent('data', data);\n    };\n\n    InternalSocket.prototype.post = function(ip, autoDisconnect) {\n      if (autoDisconnect == null) {\n        autoDisconnect = true;\n      }\n      if (ip === void 0 && typeof this.dataDelegate === 'function') {\n        ip = this.dataDelegate();\n      }\n      if (!this.isConnected() && this.brackets.length === 0) {\n        this.connect();\n      }\n      this.handleSocketEvent('ip', ip, false);\n      if (autoDisconnect && this.isConnected() && this.brackets.length === 0) {\n        return this.disconnect();\n      }\n    };\n\n    InternalSocket.prototype.beginGroup = function(group) {\n      return this.handleSocketEvent('begingroup', group);\n    };\n\n    InternalSocket.prototype.endGroup = function() {\n      return this.handleSocketEvent('endgroup');\n    };\n\n    InternalSocket.prototype.setDataDelegate = function(delegate) {\n      if (typeof delegate !== 'function') {\n        throw Error('A data delegate must be a function.');\n      }\n      return this.dataDelegate = delegate;\n    };\n\n    InternalSocket.prototype.setDebug = function(active) {\n      this.debug = active;\n      return this.emitEvent = this.debug ? this.debugEmitEvent : this.regularEmitEvent;\n    };\n\n    InternalSocket.prototype.getId = function() {\n      var fromStr, toStr;\n      fromStr = function(from) {\n        return from.process.id + \"() \" + (from.port.toUpperCase());\n      };\n      toStr = function(to) {\n        return (to.port.toUpperCase()) + \" \" + to.process.id + \"()\";\n      };\n      if (!(this.from || this.to)) {\n        return \"UNDEFINED\";\n      }\n      if (this.from && !this.to) {\n        return (fromStr(this.from)) + \" -> ANON\";\n      }\n      if (!this.from) {\n        return \"DATA -> \" + (toStr(this.to));\n      }\n      return (fromStr(this.from)) + \" -> \" + (toStr(this.to));\n    };\n\n    InternalSocket.prototype.legacyToIp = function(event, payload) {\n      if (IP.isIP(payload)) {\n        return payload;\n      }\n      switch (event) {\n        case 'begingroup':\n          return new IP('openBracket', payload);\n        case 'endgroup':\n          return new IP('closeBracket');\n        case 'data':\n          return new IP('data', payload);\n        default:\n          return null;\n      }\n    };\n\n    InternalSocket.prototype.ipToLegacy = function(ip) {\n      var legacy;\n      switch (ip.type) {\n        case 'openBracket':\n          return legacy = {\n            event: 'begingroup',\n            payload: ip.data\n          };\n        case 'data':\n          return legacy = {\n            event: 'data',\n            payload: ip.data\n          };\n        case 'closeBracket':\n          return legacy = {\n            event: 'endgroup',\n            payload: ip.data\n          };\n      }\n    };\n\n    InternalSocket.prototype.handleSocketEvent = function(event, payload, autoConnect) {\n      var ip, isIP, legacy;\n      if (autoConnect == null) {\n        autoConnect = true;\n      }\n      isIP = event === 'ip' && IP.isIP(payload);\n      ip = isIP ? payload : this.legacyToIp(event, payload);\n      if (!ip) {\n        return;\n      }\n      if (!this.isConnected() && autoConnect && this.brackets.length === 0) {\n        this.connect();\n      }\n      if (event === 'begingroup') {\n        this.brackets.push(payload);\n      }\n      if (isIP && ip.type === 'openBracket') {\n        this.brackets.push(ip.data);\n      }\n      if (event === 'endgroup') {\n        if (this.brackets.length === 0) {\n          return;\n        }\n        ip.data = this.brackets.pop();\n        payload = ip.data;\n      }\n      if (isIP && payload.type === 'closeBracket') {\n        if (this.brackets.length === 0) {\n          return;\n        }\n        this.brackets.pop();\n      }\n      this.emitEvent('ip', ip);\n      if (!(ip && ip.type)) {\n        return;\n      }\n      if (isIP) {\n        legacy = this.ipToLegacy(ip);\n        event = legacy.event;\n        payload = legacy.payload;\n      }\n      if (event === 'connect') {\n        this.connected = true;\n      }\n      if (event === 'disconnect') {\n        this.connected = false;\n      }\n      return this.emitEvent(event, payload);\n    };\n\n    return InternalSocket;\n\n  })(EventEmitter);\n\n  exports.InternalSocket = InternalSocket;\n\n  exports.createSocket = function() {\n    return new InternalSocket;\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-noflo/node_modules/noflo/lib/IP.js":"(function() {\n  var IP;\n\n  module.exports = IP = (function() {\n    IP.types = ['data', 'openBracket', 'closeBracket'];\n\n    IP.isIP = function(obj) {\n      return obj && typeof obj === 'object' && obj._isIP === true;\n    };\n\n    function IP(type, data, options) {\n      var key, val;\n      this.type = type != null ? type : 'data';\n      this.data = data != null ? data : null;\n      if (options == null) {\n        options = {};\n      }\n      this._isIP = true;\n      this.scope = null;\n      this.owner = null;\n      this.clonable = false;\n      this.index = null;\n      for (key in options) {\n        val = options[key];\n        this[key] = val;\n      }\n    }\n\n    IP.prototype.clone = function() {\n      var ip, key, val;\n      ip = new IP(this.type);\n      for (key in this) {\n        val = this[key];\n        if (['owner'].indexOf(key) !== -1) {\n          continue;\n        }\n        if (val === null) {\n          continue;\n        }\n        if (typeof val === 'object') {\n          ip[key] = JSON.parse(JSON.stringify(val));\n        } else {\n          ip[key] = val;\n        }\n      }\n      return ip;\n    };\n\n    IP.prototype.move = function(owner) {\n      this.owner = owner;\n    };\n\n    IP.prototype.drop = function() {\n      var key, results, val;\n      results = [];\n      for (key in this) {\n        val = this[key];\n        results.push(delete this[key]);\n      }\n      return results;\n    };\n\n    return IP;\n\n  })();\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-noflo/node_modules/noflo/lib/Platform.js":"(function() {\n  exports.isBrowser = function() {\n    if (typeof process !== 'undefined' && process.execPath && process.execPath.match(/node|iojs/)) {\n      return false;\n    }\n    return true;\n  };\n\n  exports.deprecated = function(message) {\n    if (exports.isBrowser()) {\n      if (window.NOFLO_FATAL_DEPRECATED) {\n        throw new Error(message);\n      }\n      console.warn(message);\n      return;\n    }\n    if (process.env.NOFLO_FATAL_DEPRECATED) {\n      throw new Error(message);\n    }\n    return console.warn(message);\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-noflo/node_modules/noflo/lib/ComponentLoader.js":"(function() {\n  var ComponentLoader, EventEmitter, fbpGraph, internalSocket, registerLoader,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  internalSocket = require('./InternalSocket');\n\n  fbpGraph = require('fbp-graph');\n\n  EventEmitter = require('events').EventEmitter;\n\n  registerLoader = require('./loader/register');\n\n  ComponentLoader = (function(superClass) {\n    extend(ComponentLoader, superClass);\n\n    function ComponentLoader(baseDir, options) {\n      this.baseDir = baseDir;\n      this.options = options != null ? options : {};\n      this.components = null;\n      this.libraryIcons = {};\n      this.processing = false;\n      this.ready = false;\n      if (typeof this.setMaxListeners === 'function') {\n        this.setMaxListeners(0);\n      }\n    }\n\n    ComponentLoader.prototype.getModulePrefix = function(name) {\n      if (!name) {\n        return '';\n      }\n      if (name === 'noflo') {\n        return '';\n      }\n      if (name[0] === '@') {\n        name = name.replace(/\\@[a-z\\-]+\\//, '');\n      }\n      return name.replace('noflo-', '');\n    };\n\n    ComponentLoader.prototype.listComponents = function(callback) {\n      if (this.processing) {\n        this.once('ready', (function(_this) {\n          return function() {\n            return callback(null, _this.components);\n          };\n        })(this));\n        return;\n      }\n      if (this.components) {\n        return callback(null, this.components);\n      }\n      this.ready = false;\n      this.processing = true;\n      this.components = {};\n      registerLoader.register(this, (function(_this) {\n        return function(err) {\n          if (err) {\n            if (callback) {\n              return callback(err);\n            }\n            throw err;\n          }\n          _this.processing = false;\n          _this.ready = true;\n          _this.emit('ready', true);\n          if (callback) {\n            return callback(null, _this.components);\n          }\n        };\n      })(this));\n    };\n\n    ComponentLoader.prototype.load = function(name, callback, metadata) {\n      var component, componentName;\n      if (!this.ready) {\n        this.listComponents((function(_this) {\n          return function(err) {\n            if (err) {\n              return callback(err);\n            }\n            return _this.load(name, callback, metadata);\n          };\n        })(this));\n        return;\n      }\n      component = this.components[name];\n      if (!component) {\n        for (componentName in this.components) {\n          if (componentName.split('/')[1] === name) {\n            component = this.components[componentName];\n            break;\n          }\n        }\n        if (!component) {\n          callback(new Error(\"Component \" + name + \" not available with base \" + this.baseDir));\n          return;\n        }\n      }\n      if (this.isGraph(component)) {\n        if (typeof process !== 'undefined' && process.execPath && process.execPath.indexOf('node') !== -1) {\n          process.nextTick((function(_this) {\n            return function() {\n              return _this.loadGraph(name, component, callback, metadata);\n            };\n          })(this));\n        } else {\n          setTimeout((function(_this) {\n            return function() {\n              return _this.loadGraph(name, component, callback, metadata);\n            };\n          })(this), 0);\n        }\n        return;\n      }\n      return this.createComponent(name, component, metadata, (function(_this) {\n        return function(err, instance) {\n          if (err) {\n            return callback(err);\n          }\n          if (!instance) {\n            callback(new Error(\"Component \" + name + \" could not be loaded.\"));\n            return;\n          }\n          if (name === 'Graph') {\n            instance.baseDir = _this.baseDir;\n          }\n          if (typeof name === 'string') {\n            instance.componentName = name;\n          }\n          _this.setIcon(name, instance);\n          return callback(null, instance);\n        };\n      })(this));\n    };\n\n    ComponentLoader.prototype.createComponent = function(name, component, metadata, callback) {\n      var implementation, instance;\n      implementation = component;\n      if (!implementation) {\n        return callback(new Error(\"Component \" + name + \" not available\"));\n      }\n      if (typeof implementation === 'string') {\n        if (typeof registerLoader.dynamicLoad === 'function') {\n          registerLoader.dynamicLoad(name, implementation, metadata, callback);\n          return;\n        }\n        return callback(Error(\"Dynamic loading of \" + implementation + \" for component \" + name + \" not available on this platform.\"));\n      }\n      if (typeof implementation.getComponent === 'function') {\n        instance = implementation.getComponent(metadata);\n      } else if (typeof implementation === 'function') {\n        instance = implementation(metadata);\n      } else {\n        callback(new Error(\"Invalid type \" + (typeof implementation) + \" for component \" + name + \".\"));\n        return;\n      }\n      return callback(null, instance);\n    };\n\n    ComponentLoader.prototype.isGraph = function(cPath) {\n      if (typeof cPath === 'object' && cPath instanceof fbpGraph.Graph) {\n        return true;\n      }\n      if (typeof cPath === 'object' && cPath.processes && cPath.connections) {\n        return true;\n      }\n      if (typeof cPath !== 'string') {\n        return false;\n      }\n      return cPath.indexOf('.fbp') !== -1 || cPath.indexOf('.json') !== -1;\n    };\n\n    ComponentLoader.prototype.loadGraph = function(name, component, callback, metadata) {\n      this.createComponent(name, this.components['Graph'], metadata, (function(_this) {\n        return function(err, graph) {\n          var graphSocket;\n          if (err) {\n            return callback(err);\n          }\n          graphSocket = internalSocket.createSocket();\n          graph.loader = _this;\n          graph.baseDir = _this.baseDir;\n          graph.inPorts.remove('graph');\n          graph.setGraph(component, function(err) {\n            if (err) {\n              return callback(err);\n            }\n            _this.setIcon(name, graph);\n            return callback(null, graph);\n          });\n        };\n      })(this));\n    };\n\n    ComponentLoader.prototype.setIcon = function(name, instance) {\n      var componentName, library, ref;\n      if (!instance.getIcon || instance.getIcon()) {\n        return;\n      }\n      ref = name.split('/'), library = ref[0], componentName = ref[1];\n      if (componentName && this.getLibraryIcon(library)) {\n        instance.setIcon(this.getLibraryIcon(library));\n        return;\n      }\n      if (instance.isSubgraph()) {\n        instance.setIcon('sitemap');\n        return;\n      }\n      instance.setIcon('square');\n    };\n\n    ComponentLoader.prototype.getLibraryIcon = function(prefix) {\n      if (this.libraryIcons[prefix]) {\n        return this.libraryIcons[prefix];\n      }\n      return null;\n    };\n\n    ComponentLoader.prototype.setLibraryIcon = function(prefix, icon) {\n      return this.libraryIcons[prefix] = icon;\n    };\n\n    ComponentLoader.prototype.normalizeName = function(packageId, name) {\n      var fullName, prefix;\n      prefix = this.getModulePrefix(packageId);\n      fullName = prefix + \"/\" + name;\n      if (!packageId) {\n        fullName = name;\n      }\n      return fullName;\n    };\n\n    ComponentLoader.prototype.registerComponent = function(packageId, name, cPath, callback) {\n      var fullName;\n      fullName = this.normalizeName(packageId, name);\n      this.components[fullName] = cPath;\n      if (callback) {\n        return callback();\n      }\n    };\n\n    ComponentLoader.prototype.registerGraph = function(packageId, name, gPath, callback) {\n      return this.registerComponent(packageId, name, gPath, callback);\n    };\n\n    ComponentLoader.prototype.registerLoader = function(loader, callback) {\n      return loader(this, callback);\n    };\n\n    ComponentLoader.prototype.setSource = function(packageId, name, source, language, callback) {\n      if (!registerLoader.setSource) {\n        return callback(new Error('setSource not allowed'));\n      }\n      if (!this.ready) {\n        this.listComponents((function(_this) {\n          return function(err) {\n            if (err) {\n              return callback(err);\n            }\n            return _this.setSource(packageId, name, source, language, callback);\n          };\n        })(this));\n        return;\n      }\n      return registerLoader.setSource(this, packageId, name, source, language, callback);\n    };\n\n    ComponentLoader.prototype.getSource = function(name, callback) {\n      if (!registerLoader.getSource) {\n        return callback(new Error('getSource not allowed'));\n      }\n      if (!this.ready) {\n        this.listComponents((function(_this) {\n          return function(err) {\n            if (err) {\n              return callback(err);\n            }\n            return _this.getSource(name, callback);\n          };\n        })(this));\n        return;\n      }\n      return registerLoader.getSource(this, name, callback);\n    };\n\n    ComponentLoader.prototype.clear = function() {\n      this.components = null;\n      this.ready = false;\n      return this.processing = false;\n    };\n\n    return ComponentLoader;\n\n  })(EventEmitter);\n\n  exports.ComponentLoader = ComponentLoader;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-noflo/node_modules/noflo/lib/loader/register.js":"(function() {\n  var isBrowser;\n\n  isBrowser = require('../Platform').isBrowser;\n\n  if (isBrowser()) {\n    module.exports = require('./ComponentIo');\n  } else {\n    module.exports = require('./NodeJs');\n  }\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-noflo/node_modules/noflo/lib/loader/NodeJs.js":"(function() {\n  var CoffeeScript, dynamicLoader, fbpGraph, fs, manifest, manifestLoader, path, registerModules, registerSubgraph, utils;\n\n  path = require('path');\n\n  fs = require('fs');\n\n  manifest = require('fbp-manifest');\n\n  utils = require('../Utils');\n\n  fbpGraph = require('fbp-graph');\n\n  CoffeeScript = require('coffee-script');\n\n  if (typeof CoffeeScript.register !== 'undefined') {\n    CoffeeScript.register();\n  }\n\n  registerModules = function(loader, modules, callback) {\n    var c, compatible, componentLoaders, done, i, j, len, len1, loaderPath, m, ref, ref1;\n    compatible = modules.filter(function(m) {\n      var ref;\n      return (ref = m.runtime) === 'noflo' || ref === 'noflo-nodejs';\n    });\n    componentLoaders = [];\n    for (i = 0, len = compatible.length; i < len; i++) {\n      m = compatible[i];\n      if (m.icon) {\n        loader.setLibraryIcon(m.name, m.icon);\n      }\n      if ((ref = m.noflo) != null ? ref.loader : void 0) {\n        loaderPath = path.resolve(loader.baseDir, m.base, m.noflo.loader);\n        componentLoaders.push(loaderPath);\n      }\n      ref1 = m.components;\n      for (j = 0, len1 = ref1.length; j < len1; j++) {\n        c = ref1[j];\n        loader.registerComponent(m.name, c.name, path.resolve(loader.baseDir, c.path));\n      }\n    }\n    if (!componentLoaders.length) {\n      return callback(null);\n    }\n    done = function() {\n      if (--componentLoaders.length < 1) {\n        return callback.apply(this, arguments);\n      }\n    };\n    return componentLoaders.forEach((function(_this) {\n      return function(loaderPath) {\n        var cLoader;\n        cLoader = require(loaderPath);\n        return loader.registerLoader(cLoader, function(err) {\n          if (err) {\n            return callback(err);\n          }\n          return done(null);\n        });\n      };\n    })(this));\n  };\n\n  manifestLoader = {\n    writeCache: function(loader, options, manifest, callback) {\n      var filePath;\n      filePath = path.resolve(loader.baseDir, options.manifest);\n      return fs.writeFile(filePath, JSON.stringify(manifest, null, 2), {\n        encoding: 'utf-8'\n      }, callback);\n    },\n    readCache: function(loader, options, callback) {\n      options.discover = false;\n      return manifest.load.load(loader.baseDir, options, callback);\n    },\n    prepareManifestOptions: function(loader) {\n      var options;\n      if (!loader.options) {\n        loader.options = {};\n      }\n      options = {};\n      options.runtimes = loader.options.runtimes || [];\n      if (options.runtimes.indexOf('noflo') === -1) {\n        options.runtimes.push('noflo');\n      }\n      options.recursive = typeof loader.options.recursive === 'undefined' ? true : loader.options.recursive;\n      if (!options.manifest) {\n        options.manifest = 'fbp.json';\n      }\n      return options;\n    },\n    listComponents: function(loader, manifestOptions, callback) {\n      return this.readCache(loader, manifestOptions, (function(_this) {\n        return function(err, manifest) {\n          if (err) {\n            if (!loader.options.discover) {\n              return callback(err);\n            }\n            dynamicLoader.listComponents(loader, manifestOptions, function(err, modules) {\n              if (err) {\n                return callback(err);\n              }\n              return _this.writeCache(loader, manifestOptions, {\n                version: 1,\n                modules: modules\n              }, function(err) {\n                if (err) {\n                  return callback(err);\n                }\n                return callback(null, modules);\n              });\n            });\n            return;\n          }\n          return registerModules(loader, manifest.modules, function(err) {\n            if (err) {\n              return callback(err);\n            }\n            return callback(null, manifest.modules);\n          });\n        };\n      })(this));\n    }\n  };\n\n  dynamicLoader = {\n    listComponents: function(loader, manifestOptions, callback) {\n      manifestOptions.discover = true;\n      return manifest.list.list(loader.baseDir, manifestOptions, (function(_this) {\n        return function(err, modules) {\n          if (err) {\n            return callback(err);\n          }\n          return registerModules(loader, modules, function(err) {\n            if (err) {\n              return callback(err);\n            }\n            return callback(null, modules);\n          });\n        };\n      })(this));\n    }\n  };\n\n  registerSubgraph = function(loader) {\n    var graphPath;\n    if (path.extname(__filename) === '.js') {\n      graphPath = path.resolve(__dirname, '../../src/components/Graph.coffee');\n    } else {\n      graphPath = path.resolve(__dirname, '../../components/Graph.coffee');\n    }\n    return loader.registerComponent(null, 'Graph', graphPath);\n  };\n\n  exports.register = function(loader, callback) {\n    var manifestOptions, ref;\n    manifestOptions = manifestLoader.prepareManifestOptions(loader);\n    if ((ref = loader.options) != null ? ref.cache : void 0) {\n      manifestLoader.listComponents(loader, manifestOptions, function(err, modules) {\n        if (err) {\n          return callback(err);\n        }\n        registerSubgraph(loader);\n        return callback(null, modules);\n      });\n      return;\n    }\n    return dynamicLoader.listComponents(loader, manifestOptions, function(err, modules) {\n      if (err) {\n        return callback(err);\n      }\n      registerSubgraph(loader);\n      return callback(null, modules);\n    });\n  };\n\n  exports.dynamicLoad = function(name, cPath, metadata, callback) {\n    var e, error, implementation, instance;\n    try {\n      implementation = require(cPath);\n    } catch (error) {\n      e = error;\n      callback(e);\n      return;\n    }\n    if (typeof implementation.getComponent === 'function') {\n      instance = implementation.getComponent(metadata);\n    } else if (typeof implementation === 'function') {\n      instance = implementation(metadata);\n    } else {\n      callback(new Error(\"Unable to instantiate \" + cPath));\n      return;\n    }\n    if (typeof name === 'string') {\n      instance.componentName = name;\n    }\n    return callback(null, instance);\n  };\n\n  exports.setSource = function(loader, packageId, name, source, language, callback) {\n    var Module, babel, e, error, error1, error2, implementation, moduleImpl, modulePath;\n    Module = require('module');\n    if (language === 'coffeescript') {\n      try {\n        source = CoffeeScript.compile(source, {\n          bare: true\n        });\n      } catch (error) {\n        e = error;\n        return callback(e);\n      }\n    } else if (language === 'es6' || language === 'es2015') {\n      try {\n        babel = require('babel-core');\n        source = babel.transform(source).code;\n      } catch (error1) {\n        e = error1;\n        return callback(e);\n      }\n    }\n    try {\n      modulePath = path.resolve(loader.baseDir, \"./components/\" + name + \".js\");\n      moduleImpl = new Module(modulePath, module);\n      moduleImpl.paths = Module._nodeModulePaths(path.dirname(modulePath));\n      moduleImpl.filename = modulePath;\n      moduleImpl._compile(source, modulePath);\n      implementation = moduleImpl.exports;\n    } catch (error2) {\n      e = error2;\n      return callback(e);\n    }\n    if (!(implementation || implementation.getComponent)) {\n      return callback(new Error('Provided source failed to create a runnable component'));\n    }\n    return loader.registerComponent(packageId, name, implementation, callback);\n  };\n\n  exports.getSource = function(loader, name, callback) {\n    var component, componentName, nameParts;\n    component = loader.components[name];\n    if (!component) {\n      for (componentName in loader.components) {\n        if (componentName.split('/')[1] === name) {\n          component = loader.components[componentName];\n          name = componentName;\n          break;\n        }\n      }\n      if (!component) {\n        return callback(new Error(\"Component \" + name + \" not installed\"));\n      }\n    }\n    nameParts = name.split('/');\n    if (nameParts.length === 1) {\n      nameParts[1] = nameParts[0];\n      nameParts[0] = '';\n    }\n    if (loader.isGraph(component)) {\n      if (typeof component === 'object') {\n        if (typeof component.toJSON === 'function') {\n          callback(null, {\n            name: nameParts[1],\n            library: nameParts[0],\n            code: JSON.stringify(component.toJSON()),\n            language: 'json'\n          });\n          return;\n        }\n        return callback(new Error(\"Can't provide source for \" + name + \". Not a file\"));\n      }\n      fbpGraph.graph.loadFile(component, function(err, graph) {\n        if (err) {\n          return callback(err);\n        }\n        if (!graph) {\n          return callback(new Error('Unable to load graph'));\n        }\n        return callback(null, {\n          name: nameParts[1],\n          library: nameParts[0],\n          code: JSON.stringify(graph.toJSON()),\n          language: 'json'\n        });\n      });\n      return;\n    }\n    if (typeof component !== 'string') {\n      return callback(new Error(\"Can't provide source for \" + name + \". Not a file\"));\n    }\n    return fs.readFile(component, 'utf-8', function(err, code) {\n      if (err) {\n        return callback(err);\n      }\n      return callback(null, {\n        name: nameParts[1],\n        library: nameParts[0],\n        language: utils.guessLanguageFromFilename(component),\n        code: code\n      });\n    });\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-noflo/node_modules/noflo/lib/Utils.js":"(function() {\n  var clone, contains, createReduce, debounce, getKeys, getValues, guessLanguageFromFilename, intersection, isArray, isObject, optimizeCb, reduceRight, unique;\n\n  clone = function(obj) {\n    var flags, key, newInstance;\n    if ((obj == null) || typeof obj !== 'object') {\n      return obj;\n    }\n    if (obj instanceof Date) {\n      return new Date(obj.getTime());\n    }\n    if (obj instanceof RegExp) {\n      flags = '';\n      if (obj.global != null) {\n        flags += 'g';\n      }\n      if (obj.ignoreCase != null) {\n        flags += 'i';\n      }\n      if (obj.multiline != null) {\n        flags += 'm';\n      }\n      if (obj.sticky != null) {\n        flags += 'y';\n      }\n      return new RegExp(obj.source, flags);\n    }\n    newInstance = new obj.constructor();\n    for (key in obj) {\n      newInstance[key] = clone(obj[key]);\n    }\n    return newInstance;\n  };\n\n  guessLanguageFromFilename = function(filename) {\n    if (/.*\\.coffee$/.test(filename)) {\n      return 'coffeescript';\n    }\n    return 'javascript';\n  };\n\n  isArray = function(obj) {\n    if (Array.isArray) {\n      return Array.isArray(obj);\n    }\n    return Object.prototype.toString.call(arg) === '[object Array]';\n  };\n\n  isObject = function(obj) {\n    var type;\n    type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  };\n\n  unique = function(array) {\n    var k, key, output, ref, results, value;\n    output = {};\n    for (key = k = 0, ref = array.length; 0 <= ref ? k < ref : k > ref; key = 0 <= ref ? ++k : --k) {\n      output[array[key]] = array[key];\n    }\n    results = [];\n    for (key in output) {\n      value = output[key];\n      results.push(value);\n    }\n    return results;\n  };\n\n  optimizeCb = function(func, context, argCount) {\n    if (context === void 0) {\n      return func;\n    }\n    switch ((argCount === null ? 3 : argCount)) {\n      case 1:\n        return function(value) {\n          return func.call(context, value);\n        };\n      case 2:\n        return function(value, other) {\n          return func.call(context, value, other);\n        };\n      case 3:\n        return function(value, index, collection) {\n          return func.call(context, value, index, collection);\n        };\n      case 4:\n        return function(accumulator, value, index, collection) {\n          return func.call(context, accumulator, value, index, collection);\n        };\n    }\n    return function() {\n      return func.apply(context, arguments);\n    };\n  };\n\n  createReduce = function(dir) {\n    var iterator;\n    iterator = function(obj, iteratee, memo, keys, index, length) {\n      var currentKey;\n      while (index >= 0 && index < length) {\n        currentKey = keys ? keys[index] : index;\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\n        index += dir;\n      }\n      return memo;\n    };\n    return function(obj, iteratee, memo, context) {\n      var index, keys, length;\n      iteratee = optimizeCb(iteratee, context, 4);\n      keys = Object.keys(obj);\n      length = (keys || obj).length;\n      index = dir > 0 ? 0 : length - 1;\n      if (arguments.length < 3) {\n        memo = obj[keys ? keys[index] : index];\n        index += dir;\n      }\n      return iterator(obj, iteratee, memo, keys, index, length);\n    };\n  };\n\n  reduceRight = createReduce(-1);\n\n  debounce = function(func, wait, immediate) {\n    var args, context, later, result, timeout, timestamp;\n    timeout = void 0;\n    args = void 0;\n    context = void 0;\n    timestamp = void 0;\n    result = void 0;\n    later = function() {\n      var last;\n      last = Date.now - timestamp;\n      if (last < wait && last >= 0) {\n        timeout = setTimeout(later, wait - last);\n      } else {\n        timeout = null;\n        if (!immediate) {\n          result = func.apply(context, args);\n          if (!timeout) {\n            context = args = null;\n          }\n        }\n      }\n    };\n    return function() {\n      var callNow;\n      context = this;\n      args = arguments;\n      timestamp = Date.now;\n      callNow = immediate && !timeout;\n      if (!timeout) {\n        timeout = setTimeout(later, wait);\n      }\n      if (callNow) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n      return result;\n    };\n  };\n\n  getKeys = function(obj) {\n    var key, keys;\n    if (!isObject(obj)) {\n      return [];\n    }\n    if (Object.keys) {\n      return Object.keys(obj);\n    }\n    keys = [];\n    for (key in obj) {\n      if (obj.has(key)) {\n        keys.push(key);\n      }\n    }\n    return keys;\n  };\n\n  getValues = function(obj) {\n    var i, keys, length, values;\n    keys = getKeys(obj);\n    length = keys.length;\n    values = Array(length);\n    i = 0;\n    while (i < length) {\n      values[i] = obj[keys[i]];\n      i++;\n    }\n    return values;\n  };\n\n  contains = function(obj, item, fromIndex) {\n    if (!isArray(obj)) {\n      obj = getValues(obj);\n    }\n    if (typeof fromIndex !== 'number' || guard) {\n      fromIndex = 0;\n    }\n    return obj.indexOf(item) >= 0;\n  };\n\n  intersection = function(array) {\n    var argsLength, i, item, j, k, l, ref, ref1, result;\n    result = [];\n    argsLength = arguments.length;\n    for (i = k = 0, ref = array.length; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {\n      item = array[i];\n      if (contains(result, item)) {\n        continue;\n      }\n      for (j = l = 1, ref1 = argsLength; 1 <= ref1 ? l <= ref1 : l >= ref1; j = 1 <= ref1 ? ++l : --l) {\n        if (!contains(arguments[j], item)) {\n          break;\n        }\n      }\n      if (j === argsLength) {\n        result.push(item);\n      }\n    }\n    return result;\n  };\n\n  exports.clone = clone;\n\n  exports.guessLanguageFromFilename = guessLanguageFromFilename;\n\n  exports.optimizeCb = optimizeCb;\n\n  exports.reduceRight = reduceRight;\n\n  exports.debounce = debounce;\n\n  exports.unique = unique;\n\n  exports.intersection = intersection;\n\n  exports.getValues = getValues;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-noflo/node_modules/noflo/lib/Component.js":"(function() {\n  var Component, EventEmitter, IP, ProcessContext, ProcessInput, ProcessOutput, debug, debugBrackets, debugSend, ports,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty,\n    slice = [].slice;\n\n  EventEmitter = require('events').EventEmitter;\n\n  ports = require('./Ports');\n\n  IP = require('./IP');\n\n  debug = require('debug')('noflo:component');\n\n  debugBrackets = require('debug')('noflo:component:brackets');\n\n  debugSend = require('debug')('noflo:component:send');\n\n  Component = (function(superClass) {\n    extend(Component, superClass);\n\n    Component.prototype.description = '';\n\n    Component.prototype.icon = null;\n\n    function Component(options) {\n      this.error = bind(this.error, this);\n      var ref, ref1, ref2;\n      if (!options) {\n        options = {};\n      }\n      if (!options.inPorts) {\n        options.inPorts = {};\n      }\n      if (options.inPorts instanceof ports.InPorts) {\n        this.inPorts = options.inPorts;\n      } else {\n        this.inPorts = new ports.InPorts(options.inPorts);\n      }\n      if (!options.outPorts) {\n        options.outPorts = {};\n      }\n      if (options.outPorts instanceof ports.OutPorts) {\n        this.outPorts = options.outPorts;\n      } else {\n        this.outPorts = new ports.OutPorts(options.outPorts);\n      }\n      if (options.icon) {\n        this.icon = options.icon;\n      }\n      if (options.description) {\n        this.description = options.description;\n      }\n      this.started = false;\n      this.load = 0;\n      this.ordered = (ref = options.ordered) != null ? ref : false;\n      this.autoOrdering = (ref1 = options.autoOrdering) != null ? ref1 : null;\n      this.outputQ = [];\n      this.bracketContext = {\n        \"in\": {},\n        out: {}\n      };\n      this.activateOnInput = (ref2 = options.activateOnInput) != null ? ref2 : true;\n      this.forwardBrackets = {\n        \"in\": ['out', 'error']\n      };\n      if ('forwardBrackets' in options) {\n        this.forwardBrackets = options.forwardBrackets;\n      }\n      if (typeof options.process === 'function') {\n        this.process(options.process);\n      }\n    }\n\n    Component.prototype.getDescription = function() {\n      return this.description;\n    };\n\n    Component.prototype.isReady = function() {\n      return true;\n    };\n\n    Component.prototype.isSubgraph = function() {\n      return false;\n    };\n\n    Component.prototype.setIcon = function(icon) {\n      this.icon = icon;\n      return this.emit('icon', this.icon);\n    };\n\n    Component.prototype.getIcon = function() {\n      return this.icon;\n    };\n\n    Component.prototype.error = function(e, groups, errorPort, scope) {\n      var group, i, j, len1, len2;\n      if (groups == null) {\n        groups = [];\n      }\n      if (errorPort == null) {\n        errorPort = 'error';\n      }\n      if (scope == null) {\n        scope = null;\n      }\n      if (this.outPorts[errorPort] && (this.outPorts[errorPort].isAttached() || !this.outPorts[errorPort].isRequired())) {\n        for (i = 0, len1 = groups.length; i < len1; i++) {\n          group = groups[i];\n          this.outPorts[errorPort].openBracket(group, {\n            scope: scope\n          });\n        }\n        this.outPorts[errorPort].data(e, {\n          scope: scope\n        });\n        for (j = 0, len2 = groups.length; j < len2; j++) {\n          group = groups[j];\n          this.outPorts[errorPort].closeBracket(group, {\n            scope: scope\n          });\n        }\n        return;\n      }\n      throw e;\n    };\n\n    Component.prototype.setUp = function(callback) {\n      return callback();\n    };\n\n    Component.prototype.tearDown = function(callback) {\n      return callback();\n    };\n\n    Component.prototype.start = function(callback) {\n      if (this.isStarted()) {\n        return callback();\n      }\n      return this.setUp((function(_this) {\n        return function(err) {\n          if (err) {\n            return callback(err);\n          }\n          _this.started = true;\n          _this.emit('start');\n          return callback(null);\n        };\n      })(this));\n    };\n\n    Component.prototype.shutdown = function(callback) {\n      var finalize;\n      finalize = (function(_this) {\n        return function() {\n          var inPort, inPorts, portName;\n          inPorts = _this.inPorts.ports || _this.inPorts;\n          for (portName in inPorts) {\n            inPort = inPorts[portName];\n            if (typeof inPort.clear !== 'function') {\n              continue;\n            }\n            inPort.clear();\n          }\n          _this.bracketContext = {\n            \"in\": {},\n            out: {}\n          };\n          if (!_this.isStarted()) {\n            return callback();\n          }\n          _this.started = false;\n          _this.emit('end');\n          return callback();\n        };\n      })(this);\n      return this.tearDown((function(_this) {\n        return function(err) {\n          var checkLoad;\n          if (err) {\n            return callback(err);\n          }\n          if (_this.load > 0) {\n            checkLoad = function(load) {\n              if (load > 0) {\n                return;\n              }\n              this.removeListener('deactivate', checkLoad);\n              return finalize();\n            };\n            _this.on('deactivate', checkLoad);\n            return;\n          }\n          return finalize();\n        };\n      })(this));\n    };\n\n    Component.prototype.isStarted = function() {\n      return this.started;\n    };\n\n    Component.prototype.prepareForwarding = function() {\n      var i, inPort, len1, outPort, outPorts, ref, results, tmp;\n      ref = this.forwardBrackets;\n      results = [];\n      for (inPort in ref) {\n        outPorts = ref[inPort];\n        if (!(inPort in this.inPorts.ports)) {\n          delete this.forwardBrackets[inPort];\n          continue;\n        }\n        tmp = [];\n        for (i = 0, len1 = outPorts.length; i < len1; i++) {\n          outPort = outPorts[i];\n          if (outPort in this.outPorts.ports) {\n            tmp.push(outPort);\n          }\n        }\n        if (tmp.length === 0) {\n          results.push(delete this.forwardBrackets[inPort]);\n        } else {\n          results.push(this.forwardBrackets[inPort] = tmp);\n        }\n      }\n      return results;\n    };\n\n    Component.prototype.isLegacy = function() {\n      if (this.handle) {\n        return false;\n      }\n      if (this._wpData) {\n        return false;\n      }\n      return true;\n    };\n\n    Component.prototype.process = function(handle) {\n      var fn, name, port, ref;\n      if (typeof handle !== 'function') {\n        throw new Error(\"Process handler must be a function\");\n      }\n      if (!this.inPorts) {\n        throw new Error(\"Component ports must be defined before process function\");\n      }\n      this.prepareForwarding();\n      this.handle = handle;\n      ref = this.inPorts.ports;\n      fn = (function(_this) {\n        return function(name, port) {\n          if (!port.name) {\n            port.name = name;\n          }\n          return port.on('ip', function(ip) {\n            return _this.handleIP(ip, port);\n          });\n        };\n      })(this);\n      for (name in ref) {\n        port = ref[name];\n        fn(name, port);\n      }\n      return this;\n    };\n\n    Component.prototype.isForwardingInport = function(port) {\n      var portName;\n      if (typeof port === 'string') {\n        portName = port;\n      } else {\n        portName = port.name;\n      }\n      if (portName in this.forwardBrackets) {\n        return true;\n      }\n      return false;\n    };\n\n    Component.prototype.isForwardingOutport = function(inport, outport) {\n      var inportName, outportName;\n      if (typeof inport === 'string') {\n        inportName = inport;\n      } else {\n        inportName = inport.name;\n      }\n      if (typeof outport === 'string') {\n        outportName = outport;\n      } else {\n        outportName = outport.name;\n      }\n      if (!this.forwardBrackets[inportName]) {\n        return false;\n      }\n      if (this.forwardBrackets[inportName].indexOf(outportName) !== -1) {\n        return true;\n      }\n      return false;\n    };\n\n    Component.prototype.isOrdered = function() {\n      if (this.ordered) {\n        return true;\n      }\n      if (this.autoOrdering) {\n        return true;\n      }\n      return false;\n    };\n\n    Component.prototype.handleIP = function(ip, port) {\n      var buf, context, dataPackets, e, error1, input, output, result;\n      if (!port.options.triggering) {\n        return;\n      }\n      if (ip.type === 'openBracket' && this.autoOrdering === null && !this.ordered) {\n        debug(this.nodeId + \" port '\" + port.name + \"' entered auto-ordering mode\");\n        this.autoOrdering = true;\n      }\n      result = {};\n      if (this.isForwardingInport(port)) {\n        if (ip.type === 'openBracket') {\n          return;\n        }\n        if (ip.type === 'closeBracket') {\n          buf = port.getBuffer(ip.scope, ip.index);\n          dataPackets = buf.filter(function(ip) {\n            return ip.type === 'data';\n          });\n          if (this.outputQ.length >= this.load && dataPackets.length === 0) {\n            if (buf[0] !== ip) {\n              return;\n            }\n            port.get(ip.scope, ip.index);\n            context = this.getBracketContext('in', port.name, ip.scope, ip.index).pop();\n            context.closeIp = ip;\n            debugBrackets(this.nodeId + \" closeBracket-C from '\" + context.source + \"' to \" + context.ports + \": '\" + ip.data + \"'\");\n            result = {\n              __resolved: true,\n              __bracketClosingAfter: [context]\n            };\n            this.outputQ.push(result);\n            this.processOutputQueue();\n          }\n          if (!dataPackets.length) {\n            return;\n          }\n        }\n      }\n      context = new ProcessContext(ip, this, port, result);\n      input = new ProcessInput(this.inPorts, context);\n      output = new ProcessOutput(this.outPorts, context);\n      try {\n        this.handle(input, output, context);\n      } catch (error1) {\n        e = error1;\n        this.deactivate(context);\n        output.sendDone(e);\n      }\n      if (context.activated) {\n        return;\n      }\n      if (port.isAddressable()) {\n        debug(this.nodeId + \" packet on '\" + port.name + \"[\" + ip.index + \"]' didn't match preconditions: \" + ip.type);\n        return;\n      }\n      debug(this.nodeId + \" packet on '\" + port.name + \"' didn't match preconditions: \" + ip.type);\n    };\n\n    Component.prototype.getBracketContext = function(type, port, scope, idx) {\n      var index, name, portsList, ref;\n      ref = ports.normalizePortName(port), name = ref.name, index = ref.index;\n      if (idx != null) {\n        index = idx;\n      }\n      portsList = type === 'in' ? this.inPorts : this.outPorts;\n      if (portsList[name].isAddressable()) {\n        port = name + \"[\" + index + \"]\";\n      }\n      if (!this.bracketContext[type][port]) {\n        this.bracketContext[type][port] = {};\n      }\n      if (!this.bracketContext[type][port][scope]) {\n        this.bracketContext[type][port][scope] = [];\n      }\n      return this.bracketContext[type][port][scope];\n    };\n\n    Component.prototype.addToResult = function(result, port, ip, before) {\n      var idx, index, method, name, ref;\n      if (before == null) {\n        before = false;\n      }\n      ref = ports.normalizePortName(port), name = ref.name, index = ref.index;\n      method = before ? 'unshift' : 'push';\n      if (this.outPorts[name].isAddressable()) {\n        idx = index ? parseInt(index) : ip.index;\n        if (!result[name]) {\n          result[name] = {};\n        }\n        if (!result[name][idx]) {\n          result[name][idx] = [];\n        }\n        ip.index = idx;\n        result[name][idx][method](ip);\n        return;\n      }\n      if (!result[name]) {\n        result[name] = [];\n      }\n      return result[name][method](ip);\n    };\n\n    Component.prototype.getForwardableContexts = function(inport, outport, contexts) {\n      var forwardable, index, name, ref;\n      ref = ports.normalizePortName(outport), name = ref.name, index = ref.index;\n      forwardable = [];\n      contexts.forEach((function(_this) {\n        return function(ctx, idx) {\n          var outContext;\n          if (!_this.isForwardingOutport(inport, name)) {\n            return;\n          }\n          if (ctx.ports.indexOf(outport) !== -1) {\n            return;\n          }\n          outContext = _this.getBracketContext('out', name, ctx.ip.scope, index)[idx];\n          if (outContext) {\n            if (outContext.ip.data === ctx.ip.data && outContext.ports.indexOf(outport) !== -1) {\n              return;\n            }\n          }\n          return forwardable.push(ctx);\n        };\n      })(this));\n      return forwardable;\n    };\n\n    Component.prototype.addBracketForwards = function(result) {\n      var context, i, ipClone, j, k, l, len1, len2, len3, len4, port, ref, ref1, ref2, ref3, ref4, ref5;\n      if ((ref = result.__bracketClosingBefore) != null ? ref.length : void 0) {\n        ref1 = result.__bracketClosingBefore;\n        for (i = 0, len1 = ref1.length; i < len1; i++) {\n          context = ref1[i];\n          debugBrackets(this.nodeId + \" closeBracket-A from '\" + context.source + \"' to \" + context.ports + \": '\" + context.closeIp.data + \"'\");\n          if (!context.ports.length) {\n            continue;\n          }\n          ref2 = context.ports;\n          for (j = 0, len2 = ref2.length; j < len2; j++) {\n            port = ref2[j];\n            ipClone = context.closeIp.clone();\n            this.addToResult(result, port, ipClone, true);\n            this.getBracketContext('out', port, ipClone.scope).pop();\n          }\n        }\n      }\n      if (result.__bracketContext) {\n        Object.keys(result.__bracketContext).reverse().forEach((function(_this) {\n          return function(inport) {\n            var ctx, datas, forwardedOpens, idx, idxIps, ip, ips, k, l, len3, len4, len5, m, outport, portIdentifier, results, unforwarded;\n            context = result.__bracketContext[inport];\n            if (!context.length) {\n              return;\n            }\n            results = [];\n            for (outport in result) {\n              ips = result[outport];\n              if (outport.indexOf('__') === 0) {\n                continue;\n              }\n              if (_this.outPorts[outport].isAddressable()) {\n                for (idx in ips) {\n                  idxIps = ips[idx];\n                  datas = idxIps.filter(function(ip) {\n                    return ip.type === 'data';\n                  });\n                  if (!datas.length) {\n                    continue;\n                  }\n                  portIdentifier = outport + \"[\" + idx + \"]\";\n                  unforwarded = _this.getForwardableContexts(inport, portIdentifier, context);\n                  if (!unforwarded.length) {\n                    continue;\n                  }\n                  forwardedOpens = [];\n                  for (k = 0, len3 = unforwarded.length; k < len3; k++) {\n                    ctx = unforwarded[k];\n                    debugBrackets(_this.nodeId + \" openBracket from '\" + inport + \"' to '\" + portIdentifier + \"': '\" + ctx.ip.data + \"'\");\n                    ipClone = ctx.ip.clone();\n                    ipClone.index = parseInt(idx);\n                    forwardedOpens.push(ipClone);\n                    ctx.ports.push(portIdentifier);\n                    _this.getBracketContext('out', outport, ctx.ip.scope, idx).push(ctx);\n                  }\n                  forwardedOpens.reverse();\n                  for (l = 0, len4 = forwardedOpens.length; l < len4; l++) {\n                    ip = forwardedOpens[l];\n                    _this.addToResult(result, outport, ip, true);\n                  }\n                }\n                continue;\n              }\n              datas = ips.filter(function(ip) {\n                return ip.type === 'data';\n              });\n              if (!datas.length) {\n                continue;\n              }\n              unforwarded = _this.getForwardableContexts(inport, outport, context);\n              if (!unforwarded.length) {\n                continue;\n              }\n              forwardedOpens = [];\n              for (m = 0, len5 = unforwarded.length; m < len5; m++) {\n                ctx = unforwarded[m];\n                debugBrackets(_this.nodeId + \" openBracket from '\" + inport + \"' to '\" + outport + \"': '\" + ctx.ip.data + \"'\");\n                forwardedOpens.push(ctx.ip.clone());\n                ctx.ports.push(outport);\n                _this.getBracketContext('out', outport, ctx.ip.scope).push(ctx);\n              }\n              forwardedOpens.reverse();\n              results.push((function() {\n                var len6, n, results1;\n                results1 = [];\n                for (n = 0, len6 = forwardedOpens.length; n < len6; n++) {\n                  ip = forwardedOpens[n];\n                  results1.push(this.addToResult(result, outport, ip, true));\n                }\n                return results1;\n              }).call(_this));\n            }\n            return results;\n          };\n        })(this));\n      }\n      if ((ref3 = result.__bracketClosingAfter) != null ? ref3.length : void 0) {\n        ref4 = result.__bracketClosingAfter;\n        for (k = 0, len3 = ref4.length; k < len3; k++) {\n          context = ref4[k];\n          debugBrackets(this.nodeId + \" closeBracket-B from '\" + context.source + \"' to \" + context.ports + \": '\" + context.closeIp.data + \"'\");\n          if (!context.ports.length) {\n            continue;\n          }\n          ref5 = context.ports;\n          for (l = 0, len4 = ref5.length; l < len4; l++) {\n            port = ref5[l];\n            ipClone = context.closeIp.clone();\n            this.addToResult(result, port, ipClone, false);\n            this.getBracketContext('out', port, ipClone.scope).pop();\n          }\n        }\n      }\n      delete result.__bracketClosingBefore;\n      delete result.__bracketContext;\n      return delete result.__bracketClosingAfter;\n    };\n\n    Component.prototype.processOutputQueue = function() {\n      var i, idx, idxIps, ip, ips, j, len1, len2, port, portIdentifier, result, results;\n      results = [];\n      while (this.outputQ.length > 0) {\n        result = this.outputQ[0];\n        if (!result.__resolved) {\n          break;\n        }\n        this.addBracketForwards(result);\n        for (port in result) {\n          ips = result[port];\n          if (port.indexOf('__') === 0) {\n            continue;\n          }\n          if (this.outPorts.ports[port].isAddressable()) {\n            for (idx in ips) {\n              idxIps = ips[idx];\n              idx = parseInt(idx);\n              if (!this.outPorts.ports[port].isAttached(idx)) {\n                continue;\n              }\n              for (i = 0, len1 = idxIps.length; i < len1; i++) {\n                ip = idxIps[i];\n                portIdentifier = port + \"[\" + ip.index + \"]\";\n                if (ip.type === 'openBracket') {\n                  debugSend(this.nodeId + \" sending \" + portIdentifier + \" < '\" + ip.data + \"'\");\n                } else if (ip.type === 'closeBracket') {\n                  debugSend(this.nodeId + \" sending \" + portIdentifier + \" > '\" + ip.data + \"'\");\n                } else {\n                  debugSend(this.nodeId + \" sending \" + portIdentifier + \" DATA\");\n                }\n                this.outPorts[port].sendIP(ip);\n              }\n            }\n            continue;\n          }\n          if (!this.outPorts.ports[port].isAttached()) {\n            continue;\n          }\n          for (j = 0, len2 = ips.length; j < len2; j++) {\n            ip = ips[j];\n            portIdentifier = port;\n            if (ip.type === 'openBracket') {\n              debugSend(this.nodeId + \" sending \" + portIdentifier + \" < '\" + ip.data + \"'\");\n            } else if (ip.type === 'closeBracket') {\n              debugSend(this.nodeId + \" sending \" + portIdentifier + \" > '\" + ip.data + \"'\");\n            } else {\n              debugSend(this.nodeId + \" sending \" + portIdentifier + \" DATA\");\n            }\n            this.outPorts[port].sendIP(ip);\n          }\n        }\n        results.push(this.outputQ.shift());\n      }\n      return results;\n    };\n\n    Component.prototype.activate = function(context) {\n      if (context.activated) {\n        return;\n      }\n      context.activated = true;\n      context.deactivated = false;\n      this.load++;\n      this.emit('activate', this.load);\n      if (this.ordered || this.autoOrdering) {\n        return this.outputQ.push(context.result);\n      }\n    };\n\n    Component.prototype.deactivate = function(context) {\n      if (context.deactivated) {\n        return;\n      }\n      context.deactivated = true;\n      context.activated = false;\n      if (this.isOrdered()) {\n        this.processOutputQueue();\n      }\n      this.load--;\n      return this.emit('deactivate', this.load);\n    };\n\n    return Component;\n\n  })(EventEmitter);\n\n  exports.Component = Component;\n\n  ProcessContext = (function() {\n    function ProcessContext(ip1, nodeInstance, port1, result1) {\n      this.ip = ip1;\n      this.nodeInstance = nodeInstance;\n      this.port = port1;\n      this.result = result1;\n      this.scope = this.ip.scope;\n      this.activated = false;\n      this.deactivated = false;\n    }\n\n    ProcessContext.prototype.activate = function() {\n      if (this.result.__resolved || this.nodeInstance.outputQ.indexOf(this.result) === -1) {\n        this.result = {};\n      }\n      return this.nodeInstance.activate(this);\n    };\n\n    ProcessContext.prototype.deactivate = function() {\n      if (!this.result.__resolved) {\n        this.result.__resolved = true;\n      }\n      return this.nodeInstance.deactivate(this);\n    };\n\n    return ProcessContext;\n\n  })();\n\n  ProcessInput = (function() {\n    function ProcessInput(ports1, context1) {\n      this.ports = ports1;\n      this.context = context1;\n      this.nodeInstance = this.context.nodeInstance;\n      this.ip = this.context.ip;\n      this.port = this.context.port;\n      this.result = this.context.result;\n      this.scope = this.context.scope;\n    }\n\n    ProcessInput.prototype.activate = function() {\n      if (this.context.activated) {\n        return;\n      }\n      if (this.nodeInstance.isOrdered()) {\n        this.result.__resolved = false;\n      }\n      this.nodeInstance.activate(this.context);\n      if (this.port.isAddressable()) {\n        return debug(this.nodeInstance.nodeId + \" packet on '\" + this.port.name + \"[\" + this.ip.index + \"]' caused activation \" + this.nodeInstance.load + \": \" + this.ip.type);\n      } else {\n        return debug(this.nodeInstance.nodeId + \" packet on '\" + this.port.name + \"' caused activation \" + this.nodeInstance.load + \": \" + this.ip.type);\n      }\n    };\n\n    ProcessInput.prototype.attached = function() {\n      var args, i, len1, port, res;\n      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      if (!args.length) {\n        args = ['in'];\n      }\n      res = [];\n      for (i = 0, len1 = args.length; i < len1; i++) {\n        port = args[i];\n        res.push(this.ports[port].listAttached());\n      }\n      if (args.length === 1) {\n        return res.pop();\n      }\n      return res;\n    };\n\n    ProcessInput.prototype.has = function() {\n      var args, i, len1, port, validate;\n      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      if (!args.length) {\n        args = ['in'];\n      }\n      if (typeof args[args.length - 1] === 'function') {\n        validate = args.pop();\n      } else {\n        validate = function() {\n          return true;\n        };\n      }\n      for (i = 0, len1 = args.length; i < len1; i++) {\n        port = args[i];\n        if (Array.isArray(port)) {\n          if (!this.ports[port[0]].isAddressable()) {\n            throw new Error(\"Non-addressable ports, access must be with string \" + port[0]);\n          }\n          if (!this.ports[port[0]].has(this.scope, port[1], validate)) {\n            return false;\n          }\n          continue;\n        }\n        if (this.ports[port].isAddressable()) {\n          throw new Error(\"For addressable ports, access must be with array [\" + port + \", idx]\");\n        }\n        if (!this.ports[port].has(this.scope, validate)) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    ProcessInput.prototype.hasData = function() {\n      var args;\n      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      if (!args.length) {\n        args = ['in'];\n      }\n      args.push(function(ip) {\n        return ip.type === 'data';\n      });\n      return this.has.apply(this, args);\n    };\n\n    ProcessInput.prototype.hasStream = function() {\n      var args, dataBrackets, hasData, i, len1, port, portBrackets, validate, validateStream;\n      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      if (!args.length) {\n        args = ['in'];\n      }\n      if (typeof args[args.length - 1] === 'function') {\n        validateStream = args.pop();\n      } else {\n        validateStream = function() {\n          return true;\n        };\n      }\n      for (i = 0, len1 = args.length; i < len1; i++) {\n        port = args[i];\n        portBrackets = [];\n        dataBrackets = [];\n        hasData = false;\n        validate = function(ip) {\n          if (ip.type === 'openBracket') {\n            portBrackets.push(ip.data);\n            return false;\n          }\n          if (ip.type === 'data') {\n            hasData = validateStream(ip, portBrackets);\n            if (!portBrackets.length) {\n              return hasData;\n            }\n            return false;\n          }\n          if (ip.type === 'closeBracket') {\n            portBrackets.pop();\n            if (portBrackets.length) {\n              return false;\n            }\n            if (!hasData) {\n              return false;\n            }\n            return true;\n          }\n        };\n        if (!this.has(port, validate)) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    ProcessInput.prototype.get = function() {\n      var args, i, idx, ip, len1, port, portname, res;\n      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      this.activate();\n      if (!args.length) {\n        args = ['in'];\n      }\n      res = [];\n      for (i = 0, len1 = args.length; i < len1; i++) {\n        port = args[i];\n        if (Array.isArray(port)) {\n          portname = port[0], idx = port[1];\n          if (!this.ports[portname].isAddressable()) {\n            throw new Error('Non-addressable ports, access must be with string portname');\n          }\n        } else {\n          portname = port;\n          if (this.ports[portname].isAddressable()) {\n            throw new Error('For addressable ports, access must be with array [portname, idx]');\n          }\n        }\n        if (this.nodeInstance.isForwardingInport(portname)) {\n          ip = this.__getForForwarding(portname, idx);\n          res.push(ip);\n          continue;\n        }\n        ip = this.ports[portname].get(this.scope, idx);\n        res.push(ip);\n      }\n      if (args.length === 1) {\n        return res[0];\n      } else {\n        return res;\n      }\n    };\n\n    ProcessInput.prototype.__getForForwarding = function(port, idx) {\n      var context, dataIp, i, ip, len1, prefix;\n      prefix = [];\n      dataIp = null;\n      while (true) {\n        ip = this.ports[port].get(this.scope, idx);\n        if (!ip) {\n          break;\n        }\n        if (ip.type === 'data') {\n          dataIp = ip;\n          break;\n        }\n        prefix.push(ip);\n      }\n      for (i = 0, len1 = prefix.length; i < len1; i++) {\n        ip = prefix[i];\n        if (ip.type === 'closeBracket') {\n          if (!this.result.__bracketClosingBefore) {\n            this.result.__bracketClosingBefore = [];\n          }\n          context = this.nodeInstance.getBracketContext('in', port, this.scope, idx).pop();\n          context.closeIp = ip;\n          this.result.__bracketClosingBefore.push(context);\n          continue;\n        }\n        if (ip.type === 'openBracket') {\n          this.nodeInstance.getBracketContext('in', port, this.scope, idx).push({\n            ip: ip,\n            ports: [],\n            source: port\n          });\n          continue;\n        }\n      }\n      if (!this.result.__bracketContext) {\n        this.result.__bracketContext = {};\n      }\n      this.result.__bracketContext[port] = this.nodeInstance.getBracketContext('in', port, this.scope, idx).slice(0);\n      return dataIp;\n    };\n\n    ProcessInput.prototype.getData = function() {\n      var args, datas, i, len1, packet, port;\n      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      if (!args.length) {\n        args = ['in'];\n      }\n      datas = [];\n      for (i = 0, len1 = args.length; i < len1; i++) {\n        port = args[i];\n        packet = this.get(port);\n        if (packet == null) {\n          datas.push(packet);\n          continue;\n        }\n        while (packet.type !== 'data') {\n          packet = this.get(port);\n          if (!packet) {\n            break;\n          }\n        }\n        datas.push(packet.data);\n      }\n      if (args.length === 1) {\n        return datas.pop();\n      }\n      return datas;\n    };\n\n    ProcessInput.prototype.getStream = function() {\n      var args, datas, hasData, i, ip, len1, port, portBrackets, portPackets;\n      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      if (!args.length) {\n        args = ['in'];\n      }\n      datas = [];\n      for (i = 0, len1 = args.length; i < len1; i++) {\n        port = args[i];\n        portBrackets = [];\n        portPackets = [];\n        hasData = false;\n        ip = this.get(port);\n        if (!ip) {\n          datas.push(void 0);\n        }\n        while (ip) {\n          if (ip.type === 'openBracket') {\n            if (!portBrackets.length) {\n              portPackets = [];\n              hasData = false;\n            }\n            portBrackets.push(ip.data);\n            portPackets.push(ip);\n          }\n          if (ip.type === 'data') {\n            portPackets.push(ip);\n            hasData = true;\n            if (!portBrackets.length) {\n              break;\n            }\n          }\n          if (ip.type === 'closeBracket') {\n            portPackets.push(ip);\n            portBrackets.pop();\n            if (hasData && !portBrackets.length) {\n              break;\n            }\n          }\n          ip = this.get(port);\n        }\n        datas.push(portPackets);\n      }\n      if (args.length === 1) {\n        return datas.pop();\n      }\n      return datas;\n    };\n\n    return ProcessInput;\n\n  })();\n\n  ProcessOutput = (function() {\n    function ProcessOutput(ports1, context1) {\n      this.ports = ports1;\n      this.context = context1;\n      this.nodeInstance = this.context.nodeInstance;\n      this.ip = this.context.ip;\n      this.result = this.context.result;\n      this.scope = this.context.scope;\n    }\n\n    ProcessOutput.prototype.isError = function(err) {\n      return err instanceof Error || Array.isArray(err) && err.length > 0 && err[0] instanceof Error;\n    };\n\n    ProcessOutput.prototype.error = function(err) {\n      var e, i, j, len1, len2, multiple, results;\n      multiple = Array.isArray(err);\n      if (!multiple) {\n        err = [err];\n      }\n      if ('error' in this.ports && (this.ports.error.isAttached() || !this.ports.error.isRequired())) {\n        if (multiple) {\n          this.sendIP('error', new IP('openBracket'));\n        }\n        for (i = 0, len1 = err.length; i < len1; i++) {\n          e = err[i];\n          this.sendIP('error', e);\n        }\n        if (multiple) {\n          return this.sendIP('error', new IP('closeBracket'));\n        }\n      } else {\n        results = [];\n        for (j = 0, len2 = err.length; j < len2; j++) {\n          e = err[j];\n          throw e;\n        }\n        return results;\n      }\n    };\n\n    ProcessOutput.prototype.sendIP = function(port, packet) {\n      var ip;\n      if (!IP.isIP(packet)) {\n        ip = new IP('data', packet);\n      } else {\n        ip = packet;\n      }\n      if (this.scope !== null && ip.scope === null) {\n        ip.scope = this.scope;\n      }\n      if (this.nodeInstance.outPorts[port].isAddressable() && ip.index === null) {\n        throw new Error('Sending packets to addressable ports requires specifying index');\n      }\n      if (this.nodeInstance.isOrdered()) {\n        this.nodeInstance.addToResult(this.result, port, ip);\n        return;\n      }\n      return this.nodeInstance.outPorts[port].sendIP(ip);\n    };\n\n    ProcessOutput.prototype.send = function(outputMap) {\n      var componentPorts, i, len1, mapIsInPorts, packet, port, ref, results;\n      if (this.isError(outputMap)) {\n        return this.error(outputMap);\n      }\n      componentPorts = [];\n      mapIsInPorts = false;\n      ref = Object.keys(this.ports.ports);\n      for (i = 0, len1 = ref.length; i < len1; i++) {\n        port = ref[i];\n        if (port !== 'error' && port !== 'ports' && port !== '_callbacks') {\n          componentPorts.push(port);\n        }\n        if (!mapIsInPorts && (outputMap != null) && typeof outputMap === 'object' && Object.keys(outputMap).indexOf(port) !== -1) {\n          mapIsInPorts = true;\n        }\n      }\n      if (componentPorts.length === 1 && !mapIsInPorts) {\n        this.sendIP(componentPorts[0], outputMap);\n        return;\n      }\n      if (componentPorts.length > 1 && !mapIsInPorts) {\n        throw new Error('Port must be specified for sending output');\n      }\n      results = [];\n      for (port in outputMap) {\n        packet = outputMap[port];\n        results.push(this.sendIP(port, packet));\n      }\n      return results;\n    };\n\n    ProcessOutput.prototype.sendDone = function(outputMap) {\n      this.send(outputMap);\n      return this.done();\n    };\n\n    ProcessOutput.prototype.pass = function(data, options) {\n      var key, val;\n      if (options == null) {\n        options = {};\n      }\n      if (!('out' in this.ports)) {\n        throw new Error('output.pass() requires port \"out\" to be present');\n      }\n      for (key in options) {\n        val = options[key];\n        this.ip[key] = val;\n      }\n      this.ip.data = data;\n      this.sendIP('out', this.ip);\n      return this.done();\n    };\n\n    ProcessOutput.prototype.done = function(error) {\n      var buf, context, contexts, ctx, ip, isLast, nodeContext, port, ref;\n      this.result.__resolved = true;\n      this.nodeInstance.activate(this.context);\n      if (error) {\n        this.error(error);\n      }\n      isLast = (function(_this) {\n        return function() {\n          var len, load, pos, resultsOnly;\n          resultsOnly = _this.nodeInstance.outputQ.filter(function(q) {\n            if (!q.__resolved) {\n              return true;\n            }\n            if (Object.keys(q).length === 2 && q.__bracketClosingAfter) {\n              return false;\n            }\n            return true;\n          });\n          pos = resultsOnly.indexOf(_this.result);\n          len = resultsOnly.length;\n          load = _this.nodeInstance.load;\n          if (pos === len - 1) {\n            return true;\n          }\n          if (pos === -1 && load === len + 1) {\n            return true;\n          }\n          if (len <= 1 && load === 1) {\n            return true;\n          }\n          return false;\n        };\n      })(this);\n      if (this.nodeInstance.isOrdered() && isLast()) {\n        ref = this.nodeInstance.bracketContext[\"in\"];\n        for (port in ref) {\n          contexts = ref[port];\n          if (!contexts[this.scope]) {\n            continue;\n          }\n          nodeContext = contexts[this.scope];\n          if (!nodeContext.length) {\n            continue;\n          }\n          context = nodeContext[nodeContext.length - 1];\n          buf = this.nodeInstance.inPorts[context.source].getBuffer(context.ip.scope, context.ip.index);\n          while (true) {\n            if (!buf.length) {\n              break;\n            }\n            if (buf[0].type !== 'closeBracket') {\n              break;\n            }\n            ip = this.nodeInstance.inPorts[context.source].get(context.ip.scope, context.ip.index);\n            ctx = nodeContext.pop();\n            ctx.closeIp = ip;\n            if (!this.result.__bracketClosingAfter) {\n              this.result.__bracketClosingAfter = [];\n            }\n            this.result.__bracketClosingAfter.push(ctx);\n          }\n        }\n      }\n      debug(this.nodeInstance.nodeId + \" finished processing \" + this.nodeInstance.load);\n      return this.nodeInstance.deactivate(this.context);\n    };\n\n    return ProcessOutput;\n\n  })();\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-noflo/node_modules/noflo/lib/Ports.js":"(function() {\n  var EventEmitter, InPort, InPorts, OutPort, OutPorts, Ports,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  EventEmitter = require('events').EventEmitter;\n\n  InPort = require('./InPort');\n\n  OutPort = require('./OutPort');\n\n  Ports = (function(superClass) {\n    extend(Ports, superClass);\n\n    Ports.prototype.model = InPort;\n\n    function Ports(ports) {\n      var name, options;\n      this.ports = {};\n      if (!ports) {\n        return;\n      }\n      for (name in ports) {\n        options = ports[name];\n        this.add(name, options);\n      }\n    }\n\n    Ports.prototype.add = function(name, options, process) {\n      if (name === 'add' || name === 'remove') {\n        throw new Error('Add and remove are restricted port names');\n      }\n      if (!name.match(/^[a-z0-9_\\.\\/]+$/)) {\n        throw new Error(\"Port names can only contain lowercase alphanumeric characters and underscores. '\" + name + \"' not allowed\");\n      }\n      if (this.ports[name]) {\n        this.remove(name);\n      }\n      if (typeof options === 'object' && options.canAttach) {\n        this.ports[name] = options;\n      } else {\n        this.ports[name] = new this.model(options, process);\n      }\n      this[name] = this.ports[name];\n      this.emit('add', name);\n      return this;\n    };\n\n    Ports.prototype.remove = function(name) {\n      if (!this.ports[name]) {\n        throw new Error(\"Port \" + name + \" not defined\");\n      }\n      delete this.ports[name];\n      delete this[name];\n      this.emit('remove', name);\n      return this;\n    };\n\n    return Ports;\n\n  })(EventEmitter);\n\n  exports.InPorts = InPorts = (function(superClass) {\n    extend(InPorts, superClass);\n\n    function InPorts() {\n      return InPorts.__super__.constructor.apply(this, arguments);\n    }\n\n    InPorts.prototype.on = function(name, event, callback) {\n      if (!this.ports[name]) {\n        throw new Error(\"Port \" + name + \" not available\");\n      }\n      return this.ports[name].on(event, callback);\n    };\n\n    InPorts.prototype.once = function(name, event, callback) {\n      if (!this.ports[name]) {\n        throw new Error(\"Port \" + name + \" not available\");\n      }\n      return this.ports[name].once(event, callback);\n    };\n\n    return InPorts;\n\n  })(Ports);\n\n  exports.OutPorts = OutPorts = (function(superClass) {\n    extend(OutPorts, superClass);\n\n    function OutPorts() {\n      return OutPorts.__super__.constructor.apply(this, arguments);\n    }\n\n    OutPorts.prototype.model = OutPort;\n\n    OutPorts.prototype.connect = function(name, socketId) {\n      if (!this.ports[name]) {\n        throw new Error(\"Port \" + name + \" not available\");\n      }\n      return this.ports[name].connect(socketId);\n    };\n\n    OutPorts.prototype.beginGroup = function(name, group, socketId) {\n      if (!this.ports[name]) {\n        throw new Error(\"Port \" + name + \" not available\");\n      }\n      return this.ports[name].beginGroup(group, socketId);\n    };\n\n    OutPorts.prototype.send = function(name, data, socketId) {\n      if (!this.ports[name]) {\n        throw new Error(\"Port \" + name + \" not available\");\n      }\n      return this.ports[name].send(data, socketId);\n    };\n\n    OutPorts.prototype.endGroup = function(name, socketId) {\n      if (!this.ports[name]) {\n        throw new Error(\"Port \" + name + \" not available\");\n      }\n      return this.ports[name].endGroup(socketId);\n    };\n\n    OutPorts.prototype.disconnect = function(name, socketId) {\n      if (!this.ports[name]) {\n        throw new Error(\"Port \" + name + \" not available\");\n      }\n      return this.ports[name].disconnect(socketId);\n    };\n\n    return OutPorts;\n\n  })(Ports);\n\n  exports.normalizePortName = function(name) {\n    var matched, port;\n    port = {\n      name: name\n    };\n    if (name.indexOf('[') === -1) {\n      return port;\n    }\n    matched = name.match(/(.*)\\[([0-9]+)\\]/);\n    if (!(matched != null ? matched.length : void 0)) {\n      return name;\n    }\n    port.name = matched[1];\n    port.index = matched[2];\n    return port;\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-noflo/node_modules/noflo/lib/InPort.js":"(function() {\n  var BasePort, IP, InPort, platform,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  BasePort = require('./BasePort');\n\n  IP = require('./IP');\n\n  platform = require('./Platform');\n\n  InPort = (function(superClass) {\n    extend(InPort, superClass);\n\n    function InPort(options, process) {\n      this.process = null;\n      if (!process && typeof options === 'function') {\n        process = options;\n        options = {};\n      }\n      if (options == null) {\n        options = {};\n      }\n      if (options.buffered == null) {\n        options.buffered = false;\n      }\n      if (options.control == null) {\n        options.control = false;\n      }\n      if (options.triggering == null) {\n        options.triggering = true;\n      }\n      if (!process && options && options.process) {\n        process = options.process;\n        delete options.process;\n      }\n      if (process) {\n        platform.deprecated('InPort process callback is deprecated. Please use Process API or the InPort handle option');\n        if (typeof process !== 'function') {\n          throw new Error('process must be a function');\n        }\n        this.process = process;\n      }\n      if (options.handle) {\n        platform.deprecated('InPort handle callback is deprecated. Please use Process API');\n        if (typeof options.handle !== 'function') {\n          throw new Error('handle must be a function');\n        }\n        this.handle = options.handle;\n        delete options.handle;\n      }\n      InPort.__super__.constructor.call(this, options);\n      this.prepareBuffer();\n    }\n\n    InPort.prototype.attachSocket = function(socket, localId) {\n      if (localId == null) {\n        localId = null;\n      }\n      if (this.hasDefault()) {\n        if (this.handle) {\n          socket.setDataDelegate((function(_this) {\n            return function() {\n              return new IP('data', _this.options[\"default\"]);\n            };\n          })(this));\n        } else {\n          socket.setDataDelegate((function(_this) {\n            return function() {\n              return _this.options[\"default\"];\n            };\n          })(this));\n        }\n      }\n      socket.on('connect', (function(_this) {\n        return function() {\n          return _this.handleSocketEvent('connect', socket, localId);\n        };\n      })(this));\n      socket.on('begingroup', (function(_this) {\n        return function(group) {\n          return _this.handleSocketEvent('begingroup', group, localId);\n        };\n      })(this));\n      socket.on('data', (function(_this) {\n        return function(data) {\n          _this.validateData(data);\n          return _this.handleSocketEvent('data', data, localId);\n        };\n      })(this));\n      socket.on('endgroup', (function(_this) {\n        return function(group) {\n          return _this.handleSocketEvent('endgroup', group, localId);\n        };\n      })(this));\n      socket.on('disconnect', (function(_this) {\n        return function() {\n          return _this.handleSocketEvent('disconnect', socket, localId);\n        };\n      })(this));\n      return socket.on('ip', (function(_this) {\n        return function(ip) {\n          return _this.handleIP(ip, localId);\n        };\n      })(this));\n    };\n\n    InPort.prototype.handleIP = function(ip, id) {\n      var buf;\n      if (this.process) {\n        return;\n      }\n      if (this.options.control && ip.type !== 'data') {\n        return;\n      }\n      ip.owner = this.nodeInstance;\n      if (this.isAddressable()) {\n        ip.index = id;\n      }\n      buf = this.prepareBufferForIP(ip);\n      buf.push(ip);\n      if (this.options.control && buf.length > 1) {\n        buf.shift();\n      }\n      if (this.handle) {\n        this.handle(ip, this.nodeInstance);\n      }\n      return this.emit('ip', ip, id);\n    };\n\n    InPort.prototype.handleSocketEvent = function(event, payload, id) {\n      if (this.isBuffered()) {\n        this.buffer.push({\n          event: event,\n          payload: payload,\n          id: id\n        });\n        if (this.isAddressable()) {\n          if (this.process) {\n            this.process(event, id, this.nodeInstance);\n          }\n          this.emit(event, id);\n        } else {\n          if (this.process) {\n            this.process(event, this.nodeInstance);\n          }\n          this.emit(event);\n        }\n        return;\n      }\n      if (this.process) {\n        if (this.isAddressable()) {\n          this.process(event, payload, id, this.nodeInstance);\n        } else {\n          this.process(event, payload, this.nodeInstance);\n        }\n      }\n      if (this.isAddressable()) {\n        return this.emit(event, payload, id);\n      }\n      return this.emit(event, payload);\n    };\n\n    InPort.prototype.hasDefault = function() {\n      return this.options[\"default\"] !== void 0;\n    };\n\n    InPort.prototype.prepareBuffer = function() {\n      this.buffer = [];\n      if (this.isAddressable()) {\n        this.indexedBuffer = {};\n      }\n      this.scopedBuffer = {};\n      return this.iipBuffer = this.isAddressable() ? {} : [];\n    };\n\n    InPort.prototype.prepareBufferForIP = function(ip) {\n      if (this.isAddressable()) {\n        if (ip.scope != null) {\n          if (!(ip.scope in this.scopedBuffer)) {\n            this.scopedBuffer[ip.scope] = [];\n          }\n          if (!(ip.index in this.scopedBuffer[ip.scope])) {\n            this.scopedBuffer[ip.scope][ip.index] = [];\n          }\n          return this.scopedBuffer[ip.scope][ip.index];\n        }\n        if (ip.initial) {\n          if (!(ip.index in this.iipBuffer)) {\n            this.iipBuffer[ip.index] = [];\n          }\n          return this.iipBuffer[ip.index];\n        }\n        if (!(ip.index in this.indexedBuffer)) {\n          this.indexedBuffer[ip.index] = [];\n        }\n        return this.indexedBuffer[ip.index];\n      }\n      if (ip.scope != null) {\n        if (!(ip.scope in this.scopedBuffer)) {\n          this.scopedBuffer[ip.scope] = [];\n        }\n        return this.scopedBuffer[ip.scope];\n      }\n      if (ip.initial) {\n        return this.iipBuffer;\n      }\n      return this.buffer;\n    };\n\n    InPort.prototype.validateData = function(data) {\n      if (!this.options.values) {\n        return;\n      }\n      if (this.options.values.indexOf(data) === -1) {\n        throw new Error(\"Invalid data='\" + data + \"' received, not in [\" + this.options.values + \"]\");\n      }\n    };\n\n    InPort.prototype.receive = function() {\n      platform.deprecated('InPort.receive is deprecated. Use InPort.get instead');\n      if (!this.isBuffered()) {\n        throw new Error('Receive is only possible on buffered ports');\n      }\n      return this.buffer.shift();\n    };\n\n    InPort.prototype.contains = function() {\n      platform.deprecated('InPort.contains is deprecated. Use InPort.has instead');\n      if (!this.isBuffered()) {\n        throw new Error('Contains query is only possible on buffered ports');\n      }\n      return this.buffer.filter(function(packet) {\n        if (packet.event === 'data') {\n          return true;\n        }\n      }).length;\n    };\n\n    InPort.prototype.getBuffer = function(scope, idx, initial) {\n      if (initial == null) {\n        initial = false;\n      }\n      if (this.isAddressable()) {\n        if (scope != null) {\n          if (!(scope in this.scopedBuffer)) {\n            return void 0;\n          }\n          if (!(idx in this.scopedBuffer[scope])) {\n            return void 0;\n          }\n          return this.scopedBuffer[scope][idx];\n        }\n        if (initial) {\n          if (!(idx in this.iipBuffer)) {\n            return void 0;\n          }\n          return this.iipBuffer[idx];\n        }\n        if (!(idx in this.indexedBuffer)) {\n          return void 0;\n        }\n        return this.indexedBuffer[idx];\n      }\n      if (scope != null) {\n        if (!(scope in this.scopedBuffer)) {\n          return void 0;\n        }\n        return this.scopedBuffer[scope];\n      }\n      if (initial) {\n        return this.iipBuffer;\n      }\n      return this.buffer;\n    };\n\n    InPort.prototype.getFromBuffer = function(scope, idx, initial) {\n      var buf;\n      if (initial == null) {\n        initial = false;\n      }\n      buf = this.getBuffer(scope, idx, initial);\n      if (!(buf != null ? buf.length : void 0)) {\n        return void 0;\n      }\n      if (this.options.control) {\n        return buf[buf.length - 1];\n      } else {\n        return buf.shift();\n      }\n    };\n\n    InPort.prototype.get = function(scope, idx) {\n      var res;\n      res = this.getFromBuffer(scope, idx);\n      if (res !== void 0) {\n        return res;\n      }\n      return this.getFromBuffer(null, idx, true);\n    };\n\n    InPort.prototype.hasIPinBuffer = function(scope, idx, validate, initial) {\n      var buf, i, len, packet;\n      if (initial == null) {\n        initial = false;\n      }\n      buf = this.getBuffer(scope, idx, initial);\n      if (!(buf != null ? buf.length : void 0)) {\n        return false;\n      }\n      for (i = 0, len = buf.length; i < len; i++) {\n        packet = buf[i];\n        if (validate(packet)) {\n          return true;\n        }\n      }\n      return false;\n    };\n\n    InPort.prototype.hasIIP = function(idx, validate) {\n      return this.hasIPinBuffer(null, idx, validate, true);\n    };\n\n    InPort.prototype.has = function(scope, idx, validate) {\n      if (!this.isAddressable()) {\n        validate = idx;\n        idx = null;\n      }\n      if (this.hasIPinBuffer(scope, idx, validate)) {\n        return true;\n      }\n      if (this.hasIIP(idx, validate)) {\n        return true;\n      }\n      return false;\n    };\n\n    InPort.prototype.length = function(scope, idx) {\n      var buf;\n      buf = this.getBuffer(scope, idx);\n      if (!buf) {\n        return 0;\n      }\n      return buf.length;\n    };\n\n    InPort.prototype.ready = function(scope, idx) {\n      return this.length(scope) > 0;\n    };\n\n    InPort.prototype.clear = function() {\n      return this.prepareBuffer();\n    };\n\n    return InPort;\n\n  })(BasePort);\n\n  module.exports = InPort;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-noflo/node_modules/noflo/lib/BasePort.js":"(function() {\n  var BasePort, EventEmitter, validTypes,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  EventEmitter = require('events').EventEmitter;\n\n  validTypes = ['all', 'string', 'number', 'int', 'object', 'array', 'boolean', 'color', 'date', 'bang', 'function', 'buffer', 'stream'];\n\n  BasePort = (function(superClass) {\n    extend(BasePort, superClass);\n\n    function BasePort(options) {\n      this.handleOptions(options);\n      this.sockets = [];\n      this.node = null;\n      this.name = null;\n    }\n\n    BasePort.prototype.handleOptions = function(options) {\n      if (!options) {\n        options = {};\n      }\n      if (!options.datatype) {\n        options.datatype = 'all';\n      }\n      if (options.required === void 0) {\n        options.required = false;\n      }\n      if (options.datatype === 'integer') {\n        options.datatype = 'int';\n      }\n      if (validTypes.indexOf(options.datatype) === -1) {\n        throw new Error(\"Invalid port datatype '\" + options.datatype + \"' specified, valid are \" + (validTypes.join(', ')));\n      }\n      if (options.type && options.type.indexOf('/') === -1) {\n        throw new Error(\"Invalid port type '\" + options.type + \"' specified. Should be URL or MIME type\");\n      }\n      return this.options = options;\n    };\n\n    BasePort.prototype.getId = function() {\n      if (!(this.node && this.name)) {\n        return 'Port';\n      }\n      return this.node + \" \" + (this.name.toUpperCase());\n    };\n\n    BasePort.prototype.getDataType = function() {\n      return this.options.datatype;\n    };\n\n    BasePort.prototype.getDescription = function() {\n      return this.options.description;\n    };\n\n    BasePort.prototype.attach = function(socket, index) {\n      if (index == null) {\n        index = null;\n      }\n      if (!this.isAddressable() || index === null) {\n        index = this.sockets.length;\n      }\n      this.sockets[index] = socket;\n      this.attachSocket(socket, index);\n      if (this.isAddressable()) {\n        this.emit('attach', socket, index);\n        return;\n      }\n      return this.emit('attach', socket);\n    };\n\n    BasePort.prototype.attachSocket = function() {};\n\n    BasePort.prototype.detach = function(socket) {\n      var index;\n      index = this.sockets.indexOf(socket);\n      if (index === -1) {\n        return;\n      }\n      this.sockets[index] = void 0;\n      if (this.isAddressable()) {\n        this.emit('detach', socket, index);\n        return;\n      }\n      return this.emit('detach', socket);\n    };\n\n    BasePort.prototype.isAddressable = function() {\n      if (this.options.addressable) {\n        return true;\n      }\n      return false;\n    };\n\n    BasePort.prototype.isBuffered = function() {\n      if (this.options.buffered) {\n        return true;\n      }\n      return false;\n    };\n\n    BasePort.prototype.isRequired = function() {\n      if (this.options.required) {\n        return true;\n      }\n      return false;\n    };\n\n    BasePort.prototype.isAttached = function(socketId) {\n      if (socketId == null) {\n        socketId = null;\n      }\n      if (this.isAddressable() && socketId !== null) {\n        if (this.sockets[socketId]) {\n          return true;\n        }\n        return false;\n      }\n      if (this.sockets.length) {\n        return true;\n      }\n      return false;\n    };\n\n    BasePort.prototype.listAttached = function() {\n      var attached, i, idx, len, ref, socket;\n      attached = [];\n      ref = this.sockets;\n      for (idx = i = 0, len = ref.length; i < len; idx = ++i) {\n        socket = ref[idx];\n        if (!socket) {\n          continue;\n        }\n        attached.push(idx);\n      }\n      return attached;\n    };\n\n    BasePort.prototype.isConnected = function(socketId) {\n      var connected;\n      if (socketId == null) {\n        socketId = null;\n      }\n      if (this.isAddressable()) {\n        if (socketId === null) {\n          throw new Error((this.getId()) + \": Socket ID required\");\n        }\n        if (!this.sockets[socketId]) {\n          throw new Error((this.getId()) + \": Socket \" + socketId + \" not available\");\n        }\n        return this.sockets[socketId].isConnected();\n      }\n      connected = false;\n      this.sockets.forEach(function(socket) {\n        if (!socket) {\n          return;\n        }\n        if (socket.isConnected()) {\n          return connected = true;\n        }\n      });\n      return connected;\n    };\n\n    BasePort.prototype.canAttach = function() {\n      return true;\n    };\n\n    return BasePort;\n\n  })(EventEmitter);\n\n  module.exports = BasePort;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-noflo/node_modules/noflo/lib/OutPort.js":"(function() {\n  var BasePort, IP, OutPort,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  BasePort = require('./BasePort');\n\n  IP = require('./IP');\n\n  OutPort = (function(superClass) {\n    extend(OutPort, superClass);\n\n    function OutPort(options) {\n      this.cache = {};\n      OutPort.__super__.constructor.call(this, options);\n    }\n\n    OutPort.prototype.attach = function(socket, index) {\n      if (index == null) {\n        index = null;\n      }\n      OutPort.__super__.attach.call(this, socket, index);\n      if (this.isCaching() && (this.cache[index] != null)) {\n        return this.send(this.cache[index], index);\n      }\n    };\n\n    OutPort.prototype.connect = function(socketId) {\n      var i, len, results, socket, sockets;\n      if (socketId == null) {\n        socketId = null;\n      }\n      sockets = this.getSockets(socketId);\n      this.checkRequired(sockets);\n      results = [];\n      for (i = 0, len = sockets.length; i < len; i++) {\n        socket = sockets[i];\n        if (!socket) {\n          continue;\n        }\n        results.push(socket.connect());\n      }\n      return results;\n    };\n\n    OutPort.prototype.beginGroup = function(group, socketId) {\n      var sockets;\n      if (socketId == null) {\n        socketId = null;\n      }\n      sockets = this.getSockets(socketId);\n      this.checkRequired(sockets);\n      return sockets.forEach(function(socket) {\n        if (!socket) {\n          return;\n        }\n        return socket.beginGroup(group);\n      });\n    };\n\n    OutPort.prototype.send = function(data, socketId) {\n      var sockets;\n      if (socketId == null) {\n        socketId = null;\n      }\n      sockets = this.getSockets(socketId);\n      this.checkRequired(sockets);\n      if (this.isCaching() && data !== this.cache[socketId]) {\n        this.cache[socketId] = data;\n      }\n      return sockets.forEach(function(socket) {\n        if (!socket) {\n          return;\n        }\n        return socket.send(data);\n      });\n    };\n\n    OutPort.prototype.endGroup = function(socketId) {\n      var i, len, results, socket, sockets;\n      if (socketId == null) {\n        socketId = null;\n      }\n      sockets = this.getSockets(socketId);\n      this.checkRequired(sockets);\n      results = [];\n      for (i = 0, len = sockets.length; i < len; i++) {\n        socket = sockets[i];\n        if (!socket) {\n          continue;\n        }\n        results.push(socket.endGroup());\n      }\n      return results;\n    };\n\n    OutPort.prototype.disconnect = function(socketId) {\n      var i, len, results, socket, sockets;\n      if (socketId == null) {\n        socketId = null;\n      }\n      sockets = this.getSockets(socketId);\n      this.checkRequired(sockets);\n      results = [];\n      for (i = 0, len = sockets.length; i < len; i++) {\n        socket = sockets[i];\n        if (!socket) {\n          continue;\n        }\n        results.push(socket.disconnect());\n      }\n      return results;\n    };\n\n    OutPort.prototype.sendIP = function(type, data, options, socketId, autoConnect) {\n      var i, ip, len, pristine, ref, socket, sockets;\n      if (autoConnect == null) {\n        autoConnect = true;\n      }\n      if (IP.isIP(type)) {\n        ip = type;\n        socketId = ip.index;\n      } else {\n        ip = new IP(type, data, options);\n      }\n      sockets = this.getSockets(socketId);\n      this.checkRequired(sockets);\n      if (this.isCaching() && data !== ((ref = this.cache[socketId]) != null ? ref.data : void 0)) {\n        this.cache[socketId] = ip;\n      }\n      pristine = true;\n      for (i = 0, len = sockets.length; i < len; i++) {\n        socket = sockets[i];\n        if (!socket) {\n          continue;\n        }\n        if (pristine) {\n          socket.post(ip, autoConnect);\n          pristine = false;\n        } else {\n          if (ip.clonable) {\n            ip = ip.clone();\n          }\n          socket.post(ip, autoConnect);\n        }\n      }\n      return this;\n    };\n\n    OutPort.prototype.openBracket = function(data, options, socketId) {\n      if (data == null) {\n        data = null;\n      }\n      if (options == null) {\n        options = {};\n      }\n      if (socketId == null) {\n        socketId = null;\n      }\n      return this.sendIP('openBracket', data, options, socketId);\n    };\n\n    OutPort.prototype.data = function(data, options, socketId) {\n      if (options == null) {\n        options = {};\n      }\n      if (socketId == null) {\n        socketId = null;\n      }\n      return this.sendIP('data', data, options, socketId);\n    };\n\n    OutPort.prototype.closeBracket = function(data, options, socketId) {\n      if (data == null) {\n        data = null;\n      }\n      if (options == null) {\n        options = {};\n      }\n      if (socketId == null) {\n        socketId = null;\n      }\n      return this.sendIP('closeBracket', data, options, socketId);\n    };\n\n    OutPort.prototype.checkRequired = function(sockets) {\n      if (sockets.length === 0 && this.isRequired()) {\n        throw new Error((this.getId()) + \": No connections available\");\n      }\n    };\n\n    OutPort.prototype.getSockets = function(socketId) {\n      if (this.isAddressable()) {\n        if (socketId === null) {\n          throw new Error((this.getId()) + \" Socket ID required\");\n        }\n        if (!this.sockets[socketId]) {\n          return [];\n        }\n        return [this.sockets[socketId]];\n      }\n      return this.sockets;\n    };\n\n    OutPort.prototype.isCaching = function() {\n      if (this.options.caching) {\n        return true;\n      }\n      return false;\n    };\n\n    return OutPort;\n\n  })(BasePort);\n\n  module.exports = OutPort;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-noflo/node_modules/noflo/lib/AsyncComponent.js":"(function() {\n  var AsyncComponent, component, platform, port,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  port = require(\"./Port\");\n\n  component = require(\"./Component\");\n\n  platform = require('./Platform');\n\n  AsyncComponent = (function(superClass) {\n    extend(AsyncComponent, superClass);\n\n    function AsyncComponent(inPortName, outPortName, errPortName) {\n      this.inPortName = inPortName != null ? inPortName : \"in\";\n      this.outPortName = outPortName != null ? outPortName : \"out\";\n      this.errPortName = errPortName != null ? errPortName : \"error\";\n      this.error = bind(this.error, this);\n      platform.deprecated('noflo.AsyncComponent is deprecated. Please port to Process API');\n      if (!this.inPorts[this.inPortName]) {\n        throw new Error(\"no inPort named '\" + this.inPortName + \"'\");\n      }\n      if (!this.outPorts[this.outPortName]) {\n        throw new Error(\"no outPort named '\" + this.outPortName + \"'\");\n      }\n      this.load = 0;\n      this.q = [];\n      this.errorGroups = [];\n      this.outPorts.load = new port.Port();\n      this.inPorts[this.inPortName].on(\"begingroup\", (function(_this) {\n        return function(group) {\n          if (_this.load > 0) {\n            return _this.q.push({\n              name: \"begingroup\",\n              data: group\n            });\n          }\n          _this.errorGroups.push(group);\n          return _this.outPorts[_this.outPortName].beginGroup(group);\n        };\n      })(this));\n      this.inPorts[this.inPortName].on(\"endgroup\", (function(_this) {\n        return function() {\n          if (_this.load > 0) {\n            return _this.q.push({\n              name: \"endgroup\"\n            });\n          }\n          _this.errorGroups.pop();\n          return _this.outPorts[_this.outPortName].endGroup();\n        };\n      })(this));\n      this.inPorts[this.inPortName].on(\"disconnect\", (function(_this) {\n        return function() {\n          if (_this.load > 0) {\n            return _this.q.push({\n              name: \"disconnect\"\n            });\n          }\n          _this.outPorts[_this.outPortName].disconnect();\n          _this.errorGroups = [];\n          if (_this.outPorts.load.isAttached()) {\n            return _this.outPorts.load.disconnect();\n          }\n        };\n      })(this));\n      this.inPorts[this.inPortName].on(\"data\", (function(_this) {\n        return function(data) {\n          if (_this.q.length > 0) {\n            return _this.q.push({\n              name: \"data\",\n              data: data\n            });\n          }\n          return _this.processData(data);\n        };\n      })(this));\n    }\n\n    AsyncComponent.prototype.processData = function(data) {\n      this.incrementLoad();\n      return this.doAsync(data, (function(_this) {\n        return function(err) {\n          if (err) {\n            _this.error(err, _this.errorGroups, _this.errPortName);\n          }\n          return _this.decrementLoad();\n        };\n      })(this));\n    };\n\n    AsyncComponent.prototype.incrementLoad = function() {\n      this.load++;\n      if (this.outPorts.load.isAttached()) {\n        this.outPorts.load.send(this.load);\n      }\n      if (this.outPorts.load.isAttached()) {\n        return this.outPorts.load.disconnect();\n      }\n    };\n\n    AsyncComponent.prototype.doAsync = function(data, callback) {\n      return callback(new Error(\"AsyncComponents must implement doAsync\"));\n    };\n\n    AsyncComponent.prototype.decrementLoad = function() {\n      if (this.load === 0) {\n        throw new Error(\"load cannot be negative\");\n      }\n      this.load--;\n      if (this.outPorts.load.isAttached()) {\n        this.outPorts.load.send(this.load);\n      }\n      if (this.outPorts.load.isAttached()) {\n        this.outPorts.load.disconnect();\n      }\n      if (typeof process !== 'undefined' && process.execPath && process.execPath.indexOf('node') !== -1) {\n        return process.nextTick((function(_this) {\n          return function() {\n            return _this.processQueue();\n          };\n        })(this));\n      } else {\n        return setTimeout((function(_this) {\n          return function() {\n            return _this.processQueue();\n          };\n        })(this), 0);\n      }\n    };\n\n    AsyncComponent.prototype.processQueue = function() {\n      var event, processedData;\n      if (this.load > 0) {\n        return;\n      }\n      processedData = false;\n      while (this.q.length > 0) {\n        event = this.q[0];\n        switch (event.name) {\n          case \"begingroup\":\n            if (processedData) {\n              return;\n            }\n            this.outPorts[this.outPortName].beginGroup(event.data);\n            this.errorGroups.push(event.data);\n            this.q.shift();\n            break;\n          case \"endgroup\":\n            if (processedData) {\n              return;\n            }\n            this.outPorts[this.outPortName].endGroup();\n            this.errorGroups.pop();\n            this.q.shift();\n            break;\n          case \"disconnect\":\n            if (processedData) {\n              return;\n            }\n            this.outPorts[this.outPortName].disconnect();\n            if (this.outPorts.load.isAttached()) {\n              this.outPorts.load.disconnect();\n            }\n            this.errorGroups = [];\n            this.q.shift();\n            break;\n          case \"data\":\n            this.processData(event.data);\n            this.q.shift();\n            processedData = true;\n        }\n      }\n    };\n\n    AsyncComponent.prototype.tearDown = function(callback) {\n      this.q = [];\n      this.errorGroups = [];\n      return callback();\n    };\n\n    AsyncComponent.prototype.error = function(e, groups, errorPort) {\n      var group, i, j, len, len1;\n      if (groups == null) {\n        groups = [];\n      }\n      if (errorPort == null) {\n        errorPort = 'error';\n      }\n      if (this.outPorts[errorPort] && (this.outPorts[errorPort].isAttached() || !this.outPorts[errorPort].isRequired())) {\n        for (i = 0, len = groups.length; i < len; i++) {\n          group = groups[i];\n          this.outPorts[errorPort].beginGroup(group);\n        }\n        this.outPorts[errorPort].send(e);\n        for (j = 0, len1 = groups.length; j < len1; j++) {\n          group = groups[j];\n          this.outPorts[errorPort].endGroup();\n        }\n        this.outPorts[errorPort].disconnect();\n        return;\n      }\n      throw e;\n    };\n\n    return AsyncComponent;\n\n  })(component.Component);\n\n  exports.AsyncComponent = AsyncComponent;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-noflo/node_modules/noflo/lib/Port.js":"(function() {\n  var EventEmitter, Port, platform,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  EventEmitter = require('events').EventEmitter;\n\n  platform = require('./Platform');\n\n  Port = (function(superClass) {\n    extend(Port, superClass);\n\n    Port.prototype.description = '';\n\n    Port.prototype.required = true;\n\n    function Port(type) {\n      this.type = type;\n      platform.deprecated('noflo.Port is deprecated. Please port to noflo.InPort/noflo.OutPort');\n      if (!this.type) {\n        this.type = 'all';\n      }\n      if (this.type === 'integer') {\n        this.type = 'int';\n      }\n      this.sockets = [];\n      this.from = null;\n      this.node = null;\n      this.name = null;\n    }\n\n    Port.prototype.getId = function() {\n      if (!(this.node && this.name)) {\n        return 'Port';\n      }\n      return this.node + \" \" + (this.name.toUpperCase());\n    };\n\n    Port.prototype.getDataType = function() {\n      return this.type;\n    };\n\n    Port.prototype.getDescription = function() {\n      return this.description;\n    };\n\n    Port.prototype.attach = function(socket) {\n      this.sockets.push(socket);\n      return this.attachSocket(socket);\n    };\n\n    Port.prototype.attachSocket = function(socket, localId) {\n      if (localId == null) {\n        localId = null;\n      }\n      this.emit(\"attach\", socket, localId);\n      this.from = socket.from;\n      if (socket.setMaxListeners) {\n        socket.setMaxListeners(0);\n      }\n      socket.on(\"connect\", (function(_this) {\n        return function() {\n          return _this.emit(\"connect\", socket, localId);\n        };\n      })(this));\n      socket.on(\"begingroup\", (function(_this) {\n        return function(group) {\n          return _this.emit(\"begingroup\", group, localId);\n        };\n      })(this));\n      socket.on(\"data\", (function(_this) {\n        return function(data) {\n          return _this.emit(\"data\", data, localId);\n        };\n      })(this));\n      socket.on(\"endgroup\", (function(_this) {\n        return function(group) {\n          return _this.emit(\"endgroup\", group, localId);\n        };\n      })(this));\n      return socket.on(\"disconnect\", (function(_this) {\n        return function() {\n          return _this.emit(\"disconnect\", socket, localId);\n        };\n      })(this));\n    };\n\n    Port.prototype.connect = function() {\n      var i, len, ref, results, socket;\n      if (this.sockets.length === 0) {\n        throw new Error((this.getId()) + \": No connections available\");\n      }\n      ref = this.sockets;\n      results = [];\n      for (i = 0, len = ref.length; i < len; i++) {\n        socket = ref[i];\n        results.push(socket.connect());\n      }\n      return results;\n    };\n\n    Port.prototype.beginGroup = function(group) {\n      if (this.sockets.length === 0) {\n        throw new Error((this.getId()) + \": No connections available\");\n      }\n      return this.sockets.forEach(function(socket) {\n        if (socket.isConnected()) {\n          return socket.beginGroup(group);\n        }\n        socket.once('connect', function() {\n          return socket.beginGroup(group);\n        });\n        return socket.connect();\n      });\n    };\n\n    Port.prototype.send = function(data) {\n      if (this.sockets.length === 0) {\n        throw new Error((this.getId()) + \": No connections available\");\n      }\n      return this.sockets.forEach(function(socket) {\n        if (socket.isConnected()) {\n          return socket.send(data);\n        }\n        socket.once('connect', function() {\n          return socket.send(data);\n        });\n        return socket.connect();\n      });\n    };\n\n    Port.prototype.endGroup = function() {\n      var i, len, ref, results, socket;\n      if (this.sockets.length === 0) {\n        throw new Error((this.getId()) + \": No connections available\");\n      }\n      ref = this.sockets;\n      results = [];\n      for (i = 0, len = ref.length; i < len; i++) {\n        socket = ref[i];\n        results.push(socket.endGroup());\n      }\n      return results;\n    };\n\n    Port.prototype.disconnect = function() {\n      var i, len, ref, results, socket;\n      if (this.sockets.length === 0) {\n        throw new Error((this.getId()) + \": No connections available\");\n      }\n      ref = this.sockets;\n      results = [];\n      for (i = 0, len = ref.length; i < len; i++) {\n        socket = ref[i];\n        results.push(socket.disconnect());\n      }\n      return results;\n    };\n\n    Port.prototype.detach = function(socket) {\n      var index;\n      if (this.sockets.length === 0) {\n        return;\n      }\n      if (!socket) {\n        socket = this.sockets[0];\n      }\n      index = this.sockets.indexOf(socket);\n      if (index === -1) {\n        return;\n      }\n      if (this.isAddressable()) {\n        this.sockets[index] = void 0;\n        this.emit('detach', socket, index);\n        return;\n      }\n      this.sockets.splice(index, 1);\n      return this.emit(\"detach\", socket);\n    };\n\n    Port.prototype.isConnected = function() {\n      var connected;\n      connected = false;\n      this.sockets.forEach(function(socket) {\n        if (socket.isConnected()) {\n          return connected = true;\n        }\n      });\n      return connected;\n    };\n\n    Port.prototype.isAddressable = function() {\n      return false;\n    };\n\n    Port.prototype.isRequired = function() {\n      return this.required;\n    };\n\n    Port.prototype.isAttached = function() {\n      if (this.sockets.length > 0) {\n        return true;\n      }\n      return false;\n    };\n\n    Port.prototype.listAttached = function() {\n      var attached, i, idx, len, ref, socket;\n      attached = [];\n      ref = this.sockets;\n      for (idx = i = 0, len = ref.length; i < len; idx = ++i) {\n        socket = ref[idx];\n        if (!socket) {\n          continue;\n        }\n        attached.push(idx);\n      }\n      return attached;\n    };\n\n    Port.prototype.canAttach = function() {\n      return true;\n    };\n\n    Port.prototype.clear = function() {};\n\n    return Port;\n\n  })(EventEmitter);\n\n  exports.Port = Port;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-noflo/node_modules/noflo/lib/Helpers.js":"(function() {\n  var IP, InternalSocket, OutPortWrapper, StreamReceiver, StreamSender, checkDeprecation, checkWirePatternPreconditions, checkWirePatternPreconditionsInput, checkWirePatternPreconditionsParams, debug, getGroupContext, getInputData, getOutputProxy, handleInputCollation, isArray, legacyWirePattern, platform, populateParams, processApiWirePattern, reorderBuffer, setupBracketForwarding, setupControlPorts, setupErrorHandler, setupSendDefaults, utils,\n    slice = [].slice,\n    hasProp = {}.hasOwnProperty;\n\n  StreamSender = require('./Streams').StreamSender;\n\n  StreamReceiver = require('./Streams').StreamReceiver;\n\n  InternalSocket = require('./InternalSocket');\n\n  IP = require('./IP');\n\n  platform = require('./Platform');\n\n  utils = require('./Utils');\n\n  debug = require('debug')('noflo:helpers');\n\n  isArray = function(obj) {\n    if (Array.isArray) {\n      return Array.isArray(obj);\n    }\n    return Object.prototype.toString.call(arg) === '[object Array]';\n  };\n\n  exports.MapComponent = function(component, func, config) {\n    platform.deprecated('noflo.helpers.MapComponent is deprecated. Please port to Process API');\n    if (!config) {\n      config = {};\n    }\n    if (!config.inPort) {\n      config.inPort = 'in';\n    }\n    if (!config.outPort) {\n      config.outPort = 'out';\n    }\n    if (!component.forwardBrackets) {\n      component.forwardBrackets = {};\n    }\n    component.forwardBrackets[config.inPort] = [config.outPort];\n    return component.process(function(input, output) {\n      var data, groups, outProxy;\n      if (!input.hasData(config.inPort)) {\n        return;\n      }\n      data = input.getData(config.inPort);\n      groups = getGroupContext(component, config.inPort, input);\n      outProxy = getOutputProxy([config.outPort], output);\n      func(data, groups, outProxy);\n      return output.done();\n    });\n  };\n\n  exports.WirePattern = function(component, config, proc) {\n    var inPorts, outPorts, ref, setup;\n    inPorts = 'in' in config ? config[\"in\"] : 'in';\n    if (!isArray(inPorts)) {\n      inPorts = [inPorts];\n    }\n    outPorts = 'out' in config ? config.out : 'out';\n    if (!isArray(outPorts)) {\n      outPorts = [outPorts];\n    }\n    if (!('error' in config)) {\n      config.error = 'error';\n    }\n    if (!('async' in config)) {\n      config.async = false;\n    }\n    if (!('ordered' in config)) {\n      config.ordered = true;\n    }\n    if (!('group' in config)) {\n      config.group = false;\n    }\n    if (!('field' in config)) {\n      config.field = null;\n    }\n    if (!('forwardGroups' in config)) {\n      config.forwardGroups = false;\n    }\n    if (config.forwardGroups) {\n      if (typeof config.forwardGroups === 'string') {\n        config.forwardGroups = [config.forwardGroups];\n      }\n      if (typeof config.forwardGroups === 'boolean') {\n        config.forwardGroups = inPorts;\n      }\n    }\n    if (!('receiveStreams' in config)) {\n      config.receiveStreams = false;\n    }\n    if (config.receiveStreams) {\n      throw new Error('WirePattern receiveStreams is deprecated');\n    }\n    if (!('sendStreams' in config)) {\n      config.sendStreams = false;\n    }\n    if (config.sendStreams) {\n      throw new Error('WirePattern sendStreams is deprecated');\n    }\n    if (config.async) {\n      config.sendStreams = outPorts;\n    }\n    if (!('params' in config)) {\n      config.params = [];\n    }\n    if (typeof config.params === 'string') {\n      config.params = [config.params];\n    }\n    if (!('name' in config)) {\n      config.name = '';\n    }\n    if (!('dropInput' in config)) {\n      config.dropInput = false;\n    }\n    if (!('arrayPolicy' in config)) {\n      config.arrayPolicy = {\n        \"in\": 'any',\n        params: 'all'\n      };\n    }\n    config.inPorts = inPorts;\n    config.outPorts = outPorts;\n    checkDeprecation(config, proc);\n    if (config.legacy || (typeof process !== \"undefined\" && process !== null ? (ref = process.env) != null ? ref.NOFLO_WIREPATTERN_LEGACY : void 0 : void 0)) {\n      platform.deprecated('noflo.helpers.WirePattern legacy mode is deprecated');\n      setup = legacyWirePattern;\n    } else {\n      setup = processApiWirePattern;\n    }\n    return setup(component, config, proc);\n  };\n\n  processApiWirePattern = function(component, config, func) {\n    setupControlPorts(component, config);\n    setupSendDefaults(component);\n    setupBracketForwarding(component, config);\n    component.ordered = config.ordered;\n    return component.process(function(input, output, context) {\n      var data, errorHandler, groups, outProxy, postpone, resume;\n      if (!checkWirePatternPreconditions(config, input, output)) {\n        return;\n      }\n      component.params = populateParams(config, input);\n      data = getInputData(config, input);\n      groups = getGroupContext(component, config.inPorts[0], input);\n      outProxy = getOutputProxy(config.outPorts, output);\n      debug(\"WirePattern Process API call with\", data, groups, component.params, context.scope);\n      postpone = function() {\n        throw new Error('noflo.helpers.WirePattern postpone is deprecated');\n      };\n      resume = function() {\n        throw new Error('noflo.helpers.WirePattern resume is deprecated');\n      };\n      if (!config.async) {\n        errorHandler = setupErrorHandler(component, config, output);\n        func.call(component, data, groups, outProxy, postpone, resume, input.scope);\n        if (output.result.__resolved) {\n          return;\n        }\n        errorHandler();\n        output.done();\n        return;\n      }\n      errorHandler = setupErrorHandler(component, config, output);\n      return func.call(component, data, groups, outProxy, function(err) {\n        errorHandler();\n        return output.done(err);\n      }, postpone, resume, input.scope);\n    });\n  };\n\n  checkDeprecation = function(config, func) {\n    if (config.group) {\n      platform.deprecated('noflo.helpers.WirePattern group option is deprecated. Please port to Process API');\n    }\n    if (config.field) {\n      platform.deprecated('noflo.helpers.WirePattern field option is deprecated. Please port to Process API');\n    }\n    if (func.length > 4) {\n      platform.deprecated('noflo.helpers.WirePattern postpone and resume are deprecated. Please port to Process API');\n    }\n    if (!config.async) {\n      platform.deprecated('noflo.helpers.WirePattern synchronous is deprecated. Please port to Process API');\n    }\n    if (config.error !== 'error') {\n      platform.deprecated('noflo.helpers.WirePattern custom error port name is deprecated. Please switch to \"error\" or port to WirePattern');\n    }\n  };\n\n  setupControlPorts = function(component, config) {\n    var j, len, param, ref, results;\n    ref = config.params;\n    results = [];\n    for (j = 0, len = ref.length; j < len; j++) {\n      param = ref[j];\n      results.push(component.inPorts[param].options.control = true);\n    }\n    return results;\n  };\n\n  setupBracketForwarding = function(component, config) {\n    var inPort, inPorts, j, k, len, len1, outPort, ref;\n    component.forwardBrackets = {};\n    if (!config.forwardGroups) {\n      return;\n    }\n    inPorts = config.inPorts;\n    if (isArray(config.forwardGroups)) {\n      inPorts = config.forwardGroups;\n    }\n    for (j = 0, len = inPorts.length; j < len; j++) {\n      inPort = inPorts[j];\n      component.forwardBrackets[inPort] = [];\n      ref = config.outPorts;\n      for (k = 0, len1 = ref.length; k < len1; k++) {\n        outPort = ref[k];\n        component.forwardBrackets[inPort].push(outPort);\n      }\n      if (component.outPorts.error) {\n        component.forwardBrackets[inPort].push('error');\n      }\n    }\n  };\n\n  setupErrorHandler = function(component, config, output) {\n    var errorHandler, errors, failHandler, sendErrors;\n    errors = [];\n    errorHandler = function(e, groups) {\n      if (groups == null) {\n        groups = [];\n      }\n      platform.deprecated('noflo.helpers.WirePattern error method is deprecated. Please send error to callback instead');\n      errors.push({\n        err: e,\n        groups: groups\n      });\n      return component.hasErrors = true;\n    };\n    failHandler = function(e, groups) {\n      if (e == null) {\n        e = null;\n      }\n      if (groups == null) {\n        groups = [];\n      }\n      platform.deprecated('noflo.helpers.WirePattern fail method is deprecated. Please send error to callback instead');\n      if (e) {\n        errorHandler(e, groups);\n      }\n      sendErrors();\n      return output.done();\n    };\n    sendErrors = function() {\n      if (!errors.length) {\n        return;\n      }\n      if (config.name) {\n        output.sendIP('error', new IP('openBracket', config.name));\n      }\n      errors.forEach(function(e) {\n        var grp, j, k, len, len1, ref, ref1, results;\n        ref = e.groups;\n        for (j = 0, len = ref.length; j < len; j++) {\n          grp = ref[j];\n          output.sendIP('error', new IP('openBracket', grp));\n        }\n        output.sendIP('error', new IP('data', e.err));\n        ref1 = e.groups;\n        results = [];\n        for (k = 0, len1 = ref1.length; k < len1; k++) {\n          grp = ref1[k];\n          results.push(output.sendIP('error', new IP('closeBracket', grp)));\n        }\n        return results;\n      });\n      if (config.name) {\n        output.sendIP('error', new IP('closeBracket', config.name));\n      }\n      component.hasErrors = false;\n      return errors = [];\n    };\n    component.hasErrors = false;\n    component.error = errorHandler;\n    component.fail = failHandler;\n    return sendErrors;\n  };\n\n  setupSendDefaults = function(component) {\n    var portsWithDefaults;\n    portsWithDefaults = Object.keys(component.inPorts.ports).filter(function(p) {\n      if (!component.inPorts[p].options.control) {\n        return false;\n      }\n      if (!component.inPorts[p].hasDefault()) {\n        return false;\n      }\n      return true;\n    });\n    return component.sendDefaults = function() {\n      platform.deprecated('noflo.helpers.WirePattern sendDefaults method is deprecated. Please start with a Network');\n      return portsWithDefaults.forEach(function(port) {\n        var tempSocket;\n        tempSocket = InternalSocket.createSocket();\n        component.inPorts[port].attach(tempSocket);\n        tempSocket.send();\n        tempSocket.disconnect();\n        return component.inPorts[port].detach(tempSocket);\n      });\n    };\n  };\n\n  populateParams = function(config, input) {\n    var idx, j, k, len, len1, paramPort, params, ref, ref1;\n    if (!config.params.length) {\n      return {};\n    }\n    params = {};\n    ref = config.params;\n    for (j = 0, len = ref.length; j < len; j++) {\n      paramPort = ref[j];\n      if (input.ports[paramPort].isAddressable()) {\n        params[paramPort] = {};\n        ref1 = input.attached(paramPort);\n        for (k = 0, len1 = ref1.length; k < len1; k++) {\n          idx = ref1[k];\n          if (!input.hasData([paramPort, idx])) {\n            continue;\n          }\n          params[paramPort][idx] = input.getData([paramPort, idx]);\n        }\n        continue;\n      }\n      params[paramPort] = input.getData(paramPort);\n    }\n    return params;\n  };\n\n  reorderBuffer = function(buffer, matcher) {\n    var brackets, idx, ip, j, k, len, len1, results, substream, substreamBrackets, substreamIdx;\n    substream = null;\n    brackets = [];\n    substreamBrackets = [];\n    for (idx = j = 0, len = buffer.length; j < len; idx = ++j) {\n      ip = buffer[idx];\n      if (ip.type === 'openBracket') {\n        brackets.push(ip.data);\n        substreamBrackets.push(ip);\n        continue;\n      }\n      if (ip.type === 'closeBracket') {\n        brackets.pop();\n        if (substream) {\n          substream.push(ip);\n        }\n        if (substreamBrackets.length) {\n          substreamBrackets.pop();\n        }\n        if (substream && !substreamBrackets.length) {\n          break;\n        }\n        continue;\n      }\n      if (!matcher(ip, brackets)) {\n        substreamBrackets = [];\n        continue;\n      }\n      substream = substreamBrackets.slice(0);\n      substream.push(ip);\n    }\n    substreamIdx = buffer.indexOf(substream[0]);\n    if (substreamIdx === 0) {\n      return;\n    }\n    buffer.splice(substreamIdx, substream.length);\n    substream.reverse();\n    results = [];\n    for (k = 0, len1 = substream.length; k < len1; k++) {\n      ip = substream[k];\n      results.push(buffer.unshift(ip));\n    }\n    return results;\n  };\n\n  handleInputCollation = function(data, config, input, port, idx) {\n    var buf;\n    if (!config.group && !config.field) {\n      return;\n    }\n    if (config.group) {\n      buf = input.ports[port].getBuffer(input.scope, idx);\n      reorderBuffer(buf, function(ip, brackets) {\n        var grp, j, len, ref;\n        ref = input.collatedBy.brackets;\n        for (idx = j = 0, len = ref.length; j < len; idx = ++j) {\n          grp = ref[idx];\n          if (brackets[idx] !== grp) {\n            return false;\n          }\n        }\n        return true;\n      });\n    }\n    if (config.field) {\n      data[config.field] = input.collatedBy.field;\n      buf = input.ports[port].getBuffer(input.scope, idx);\n      return reorderBuffer(buf, function(ip) {\n        return ip.data[config.field] === data[config.field];\n      });\n    }\n  };\n\n  getInputData = function(config, input) {\n    var data, idx, j, k, len, len1, port, ref, ref1;\n    data = {};\n    ref = config.inPorts;\n    for (j = 0, len = ref.length; j < len; j++) {\n      port = ref[j];\n      if (input.ports[port].isAddressable()) {\n        data[port] = {};\n        ref1 = input.attached(port);\n        for (k = 0, len1 = ref1.length; k < len1; k++) {\n          idx = ref1[k];\n          if (!input.hasData([port, idx])) {\n            continue;\n          }\n          handleInputCollation(data, config, input, port, idx);\n          data[port][idx] = input.getData([port, idx]);\n        }\n        continue;\n      }\n      if (!input.hasData(port)) {\n        continue;\n      }\n      handleInputCollation(data, config, input, port);\n      data[port] = input.getData(port);\n    }\n    if (config.inPorts.length === 1) {\n      return data[config.inPorts[0]];\n    }\n    return data;\n  };\n\n  getGroupContext = function(component, port, input) {\n    var ref, ref1;\n    if (((ref = input.result.__bracketContext) != null ? ref[port] : void 0) == null) {\n      return [];\n    }\n    if ((ref1 = input.collatedBy) != null ? ref1.brackets : void 0) {\n      return input.collatedBy.brackets;\n    }\n    return input.result.__bracketContext[port].filter(function(c) {\n      return c.source === port;\n    }).map(function(c) {\n      return c.ip.data;\n    });\n  };\n\n  getOutputProxy = function(ports, output) {\n    var outProxy;\n    outProxy = {};\n    ports.forEach(function(port) {\n      return outProxy[port] = {\n        connect: function() {},\n        beginGroup: function(group, idx) {\n          var ip;\n          ip = new IP('openBracket', group);\n          ip.index = idx;\n          return output.sendIP(port, ip);\n        },\n        send: function(data, idx) {\n          var ip;\n          ip = new IP('data', data);\n          ip.index = idx;\n          return output.sendIP(port, ip);\n        },\n        endGroup: function(group, idx) {\n          var ip;\n          ip = new IP('closeBracket', group);\n          ip.index = idx;\n          return output.sendIP(port, ip);\n        },\n        disconnect: function() {}\n      };\n    });\n    if (ports.length === 1) {\n      return outProxy[ports[0]];\n    }\n    return outProxy;\n  };\n\n  checkWirePatternPreconditions = function(config, input, output) {\n    var attached, idx, inputsOk, j, k, len, len1, packetsDropped, paramsOk, port, ref;\n    paramsOk = checkWirePatternPreconditionsParams(config, input);\n    inputsOk = checkWirePatternPreconditionsInput(config, input);\n    if (config.dropInput && !paramsOk) {\n      packetsDropped = false;\n      ref = config.inPorts;\n      for (j = 0, len = ref.length; j < len; j++) {\n        port = ref[j];\n        if (input.ports[port].isAddressable()) {\n          attached = input.attached(port);\n          if (!attached.length) {\n            continue;\n          }\n          for (k = 0, len1 = attached.length; k < len1; k++) {\n            idx = attached[k];\n            while (input.has([port, idx])) {\n              packetsDropped = true;\n              input.get([port, idx]).drop();\n            }\n          }\n          continue;\n        }\n        while (input.has(port)) {\n          packetsDropped = true;\n          input.get(port).drop();\n        }\n      }\n      if (packetsDropped) {\n        output.done();\n      }\n    }\n    return inputsOk && paramsOk;\n  };\n\n  checkWirePatternPreconditionsParams = function(config, input) {\n    var attached, j, len, param, ref, withData;\n    ref = config.params;\n    for (j = 0, len = ref.length; j < len; j++) {\n      param = ref[j];\n      if (!input.ports[param].isRequired()) {\n        continue;\n      }\n      if (input.ports[param].isAddressable()) {\n        attached = input.attached(param);\n        if (!attached.length) {\n          return false;\n        }\n        withData = attached.filter(function(idx) {\n          return input.hasData([param, idx]);\n        });\n        if (config.arrayPolicy.params === 'all') {\n          if (withData.length !== attached.length) {\n            return false;\n          }\n          continue;\n        }\n        if (!withData.length) {\n          return false;\n        }\n        continue;\n      }\n      if (!input.hasData(param)) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  checkWirePatternPreconditionsInput = function(config, input) {\n    var attached, bracketsAtPorts, checkBrackets, checkPacket, checkPort, j, len, port, ref, withData;\n    if (config.group) {\n      bracketsAtPorts = {};\n      input.collatedBy = {\n        brackets: [],\n        ready: false\n      };\n      checkBrackets = function(left, right) {\n        var bracket, idx, j, len;\n        for (idx = j = 0, len = left.length; j < len; idx = ++j) {\n          bracket = left[idx];\n          if (right[idx] !== bracket) {\n            return false;\n          }\n        }\n        return true;\n      };\n      checkPacket = function(ip, brackets) {\n        var bracketId, bracketsToCheck;\n        bracketsToCheck = brackets.slice(0);\n        if (config.group instanceof RegExp) {\n          bracketsToCheck = bracketsToCheck.slice(0, 1);\n          if (!bracketsToCheck.length) {\n            return false;\n          }\n          if (!config.group.test(bracketsToCheck[0])) {\n            return false;\n          }\n        }\n        if (input.collatedBy.ready) {\n          return checkBrackets(input.collatedBy.brackets, bracketsToCheck);\n        }\n        bracketId = bracketsToCheck.join(':');\n        if (!bracketsAtPorts[bracketId]) {\n          bracketsAtPorts[bracketId] = [];\n        }\n        if (bracketsAtPorts[bracketId].indexOf(port) === -1) {\n          bracketsAtPorts[bracketId].push(port);\n        }\n        if (config.inPorts.indexOf(port) !== config.inPorts.length - 1) {\n          return true;\n        }\n        if (bracketsAtPorts[bracketId].length !== config.inPorts.length) {\n          return false;\n        }\n        if (input.collatedBy.ready) {\n          return false;\n        }\n        input.collatedBy.ready = true;\n        input.collatedBy.brackets = bracketsToCheck;\n        return true;\n      };\n    }\n    if (config.field) {\n      input.collatedBy = {\n        field: void 0,\n        ready: false\n      };\n    }\n    checkPort = function(port) {\n      var buf, dataBrackets, hasData, hasMatching, ip, j, len, portBrackets;\n      if (!config.group && !config.field) {\n        return input.hasData(port);\n      }\n      if (config.group) {\n        portBrackets = [];\n        dataBrackets = [];\n        hasMatching = false;\n        buf = input.ports[port].getBuffer(input.scope);\n        for (j = 0, len = buf.length; j < len; j++) {\n          ip = buf[j];\n          if (ip.type === 'openBracket') {\n            portBrackets.push(ip.data);\n            continue;\n          }\n          if (ip.type === 'closeBracket') {\n            portBrackets.pop();\n            if (portBrackets.length) {\n              continue;\n            }\n            if (!hasData) {\n              continue;\n            }\n            hasMatching = true;\n            continue;\n          }\n          hasData = checkPacket(ip, portBrackets);\n          continue;\n        }\n        return hasMatching;\n      }\n      if (config.field) {\n        return input.hasStream(port, function(ip) {\n          if (!input.collatedBy.ready) {\n            input.collatedBy.field = ip.data[config.field];\n            input.collatedBy.ready = true;\n            return true;\n          }\n          return ip.data[config.field] === input.collatedBy.field;\n        });\n      }\n    };\n    ref = config.inPorts;\n    for (j = 0, len = ref.length; j < len; j++) {\n      port = ref[j];\n      if (input.ports[port].isAddressable()) {\n        attached = input.attached(port);\n        if (!attached.length) {\n          return false;\n        }\n        withData = attached.filter(function(idx) {\n          return checkPort([port, idx]);\n        });\n        if (config.arrayPolicy['in'] === 'all') {\n          if (withData.length !== attached.length) {\n            return false;\n          }\n          continue;\n        }\n        if (!withData.length) {\n          return false;\n        }\n        continue;\n      }\n      if (!checkPort(port)) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  OutPortWrapper = (function() {\n    function OutPortWrapper(port1, scope1) {\n      this.port = port1;\n      this.scope = scope1;\n    }\n\n    OutPortWrapper.prototype.connect = function(socketId) {\n      if (socketId == null) {\n        socketId = null;\n      }\n      return this.port.openBracket(null, {\n        scope: this.scope\n      }, socketId);\n    };\n\n    OutPortWrapper.prototype.beginGroup = function(group, socketId) {\n      if (socketId == null) {\n        socketId = null;\n      }\n      return this.port.openBracket(group, {\n        scope: this.scope\n      }, socketId);\n    };\n\n    OutPortWrapper.prototype.send = function(data, socketId) {\n      if (socketId == null) {\n        socketId = null;\n      }\n      return this.port.sendIP('data', data, {\n        scope: this.scope\n      }, socketId, false);\n    };\n\n    OutPortWrapper.prototype.endGroup = function(group, socketId) {\n      if (socketId == null) {\n        socketId = null;\n      }\n      return this.port.closeBracket(group, {\n        scope: this.scope\n      }, socketId);\n    };\n\n    OutPortWrapper.prototype.disconnect = function(socketId) {\n      if (socketId == null) {\n        socketId = null;\n      }\n      return this.endGroup(socketId);\n    };\n\n    OutPortWrapper.prototype.isConnected = function() {\n      return this.port.isConnected();\n    };\n\n    OutPortWrapper.prototype.isAttached = function() {\n      return this.port.isAttached();\n    };\n\n    return OutPortWrapper;\n\n  })();\n\n  legacyWirePattern = function(component, config, proc) {\n    var _wp, baseTearDown, closeGroupOnOuts, collectGroups, disconnectOuts, fn, fn1, gc, j, k, l, len, len1, len2, len3, len4, m, n, name, port, processQueue, ref, ref1, ref2, ref3, ref4, resumeTaskQ, sendGroupToOuts, setParamsScope;\n    if (!('gcFrequency' in config)) {\n      config.gcFrequency = 100;\n    }\n    if (!('gcTimeout' in config)) {\n      config.gcTimeout = 300;\n    }\n    collectGroups = config.forwardGroups;\n    if (collectGroups !== false && config.group) {\n      collectGroups = true;\n    }\n    ref = config.inPorts;\n    for (j = 0, len = ref.length; j < len; j++) {\n      name = ref[j];\n      if (!component.inPorts[name]) {\n        throw new Error(\"no inPort named '\" + name + \"'\");\n      }\n    }\n    ref1 = config.outPorts;\n    for (k = 0, len1 = ref1.length; k < len1; k++) {\n      name = ref1[k];\n      if (!component.outPorts[name]) {\n        throw new Error(\"no outPort named '\" + name + \"'\");\n      }\n    }\n    disconnectOuts = function() {\n      var l, len2, p, ref2, results;\n      ref2 = config.outPorts;\n      results = [];\n      for (l = 0, len2 = ref2.length; l < len2; l++) {\n        p = ref2[l];\n        if (component.outPorts[p].isConnected()) {\n          results.push(component.outPorts[p].disconnect());\n        } else {\n          results.push(void 0);\n        }\n      }\n      return results;\n    };\n    sendGroupToOuts = function(grp) {\n      var l, len2, p, ref2, results;\n      ref2 = config.outPorts;\n      results = [];\n      for (l = 0, len2 = ref2.length; l < len2; l++) {\n        p = ref2[l];\n        results.push(component.outPorts[p].beginGroup(grp));\n      }\n      return results;\n    };\n    closeGroupOnOuts = function(grp) {\n      var l, len2, p, ref2, results;\n      ref2 = config.outPorts;\n      results = [];\n      for (l = 0, len2 = ref2.length; l < len2; l++) {\n        p = ref2[l];\n        results.push(component.outPorts[p].endGroup(grp));\n      }\n      return results;\n    };\n    component.requiredParams = [];\n    component.defaultedParams = [];\n    component.gcCounter = 0;\n    component._wpData = {};\n    _wp = function(scope) {\n      if (!(scope in component._wpData)) {\n        component._wpData[scope] = {};\n        component._wpData[scope].groupedData = {};\n        component._wpData[scope].groupedGroups = {};\n        component._wpData[scope].groupedDisconnects = {};\n        component._wpData[scope].outputQ = [];\n        component._wpData[scope].taskQ = [];\n        component._wpData[scope].params = {};\n        component._wpData[scope].completeParams = [];\n        component._wpData[scope].receivedParams = [];\n        component._wpData[scope].defaultsSent = false;\n        component._wpData[scope].disconnectData = {};\n        component._wpData[scope].disconnectQ = [];\n        component._wpData[scope].groupBuffers = {};\n        component._wpData[scope].keyBuffers = {};\n        component._wpData[scope].gcTimestamps = {};\n      }\n      return component._wpData[scope];\n    };\n    component.params = {};\n    setParamsScope = function(scope) {\n      return component.params = _wp(scope).params;\n    };\n    processQueue = function(scope) {\n      var flushed, key, stream, streams, tmp;\n      while (_wp(scope).outputQ.length > 0) {\n        streams = _wp(scope).outputQ[0];\n        flushed = false;\n        if (streams === null) {\n          disconnectOuts();\n          flushed = true;\n        } else {\n          if (config.outPorts.length === 1) {\n            tmp = {};\n            tmp[config.outPorts[0]] = streams;\n            streams = tmp;\n          }\n          for (key in streams) {\n            stream = streams[key];\n            if (stream.resolved) {\n              stream.flush();\n              flushed = true;\n            }\n          }\n        }\n        if (flushed) {\n          _wp(scope).outputQ.shift();\n        }\n        if (!flushed) {\n          return;\n        }\n      }\n    };\n    if (config.async) {\n      if ('load' in component.outPorts) {\n        component.load = 0;\n      }\n      component.beforeProcess = function(scope, outs) {\n        if (config.ordered) {\n          _wp(scope).outputQ.push(outs);\n        }\n        component.load++;\n        component.emit('activate', component.load);\n        if ('load' in component.outPorts && component.outPorts.load.isAttached()) {\n          component.outPorts.load.send(component.load);\n          return component.outPorts.load.disconnect();\n        }\n      };\n      component.afterProcess = function(scope, err, outs) {\n        processQueue(scope);\n        component.load--;\n        if ('load' in component.outPorts && component.outPorts.load.isAttached()) {\n          component.outPorts.load.send(component.load);\n          component.outPorts.load.disconnect();\n        }\n        return component.emit('deactivate', component.load);\n      };\n    }\n    component.sendDefaults = function(scope) {\n      var l, len2, param, ref2, tempSocket;\n      if (component.defaultedParams.length > 0) {\n        ref2 = component.defaultedParams;\n        for (l = 0, len2 = ref2.length; l < len2; l++) {\n          param = ref2[l];\n          if (_wp(scope).receivedParams.indexOf(param) === -1) {\n            tempSocket = InternalSocket.createSocket();\n            component.inPorts[param].attach(tempSocket);\n            tempSocket.send();\n            tempSocket.disconnect();\n            component.inPorts[param].detach(tempSocket);\n          }\n        }\n      }\n      return _wp(scope).defaultsSent = true;\n    };\n    resumeTaskQ = function(scope) {\n      var results, task, temp;\n      if (_wp(scope).completeParams.length === component.requiredParams.length && _wp(scope).taskQ.length > 0) {\n        temp = _wp(scope).taskQ.slice(0);\n        _wp(scope).taskQ = [];\n        results = [];\n        while (temp.length > 0) {\n          task = temp.shift();\n          results.push(task());\n        }\n        return results;\n      }\n    };\n    ref2 = config.params;\n    for (l = 0, len2 = ref2.length; l < len2; l++) {\n      port = ref2[l];\n      if (!component.inPorts[port]) {\n        throw new Error(\"no inPort named '\" + port + \"'\");\n      }\n      if (component.inPorts[port].isRequired()) {\n        component.requiredParams.push(port);\n      }\n      if (component.inPorts[port].hasDefault()) {\n        component.defaultedParams.push(port);\n      }\n    }\n    ref3 = config.params;\n    fn = function(port) {\n      var inPort;\n      inPort = component.inPorts[port];\n      return inPort.handle = function(ip) {\n        var event, index, payload, scope;\n        event = ip.type;\n        payload = ip.data;\n        scope = ip.scope;\n        index = ip.index;\n        if (event !== 'data') {\n          return;\n        }\n        if (inPort.isAddressable()) {\n          if (!(port in _wp(scope).params)) {\n            _wp(scope).params[port] = {};\n          }\n          _wp(scope).params[port][index] = payload;\n          if (config.arrayPolicy.params === 'all' && Object.keys(_wp(scope).params[port]).length < inPort.listAttached().length) {\n            return;\n          }\n        } else {\n          _wp(scope).params[port] = payload;\n        }\n        if (_wp(scope).completeParams.indexOf(port) === -1 && component.requiredParams.indexOf(port) > -1) {\n          _wp(scope).completeParams.push(port);\n        }\n        _wp(scope).receivedParams.push(port);\n        return resumeTaskQ(scope);\n      };\n    };\n    for (m = 0, len3 = ref3.length; m < len3; m++) {\n      port = ref3[m];\n      fn(port);\n    }\n    component.dropRequest = function(scope, key) {\n      if (key in _wp(scope).disconnectData) {\n        delete _wp(scope).disconnectData[key];\n      }\n      if (key in _wp(scope).groupedData) {\n        delete _wp(scope).groupedData[key];\n      }\n      if (key in _wp(scope).groupedGroups) {\n        return delete _wp(scope).groupedGroups[key];\n      }\n    };\n    gc = function() {\n      var current, key, len4, n, ref4, results, scope, val;\n      component.gcCounter++;\n      if (component.gcCounter % config.gcFrequency === 0) {\n        ref4 = Object.keys(component._wpData);\n        results = [];\n        for (n = 0, len4 = ref4.length; n < len4; n++) {\n          scope = ref4[n];\n          current = new Date().getTime();\n          results.push((function() {\n            var ref5, results1;\n            ref5 = _wp(scope).gcTimestamps;\n            results1 = [];\n            for (key in ref5) {\n              val = ref5[key];\n              if ((current - val) > (config.gcTimeout * 1000)) {\n                component.dropRequest(scope, key);\n                results1.push(delete _wp(scope).gcTimestamps[key]);\n              } else {\n                results1.push(void 0);\n              }\n            }\n            return results1;\n          })());\n        }\n        return results;\n      }\n    };\n    ref4 = config.inPorts;\n    fn1 = function(port) {\n      var inPort, needPortGroups;\n      inPort = component.inPorts[port];\n      needPortGroups = collectGroups instanceof Array && collectGroups.indexOf(port) !== -1;\n      return inPort.handle = function(ip) {\n        var data, foundGroup, g, groupLength, groups, grp, i, index, key, len5, len6, len7, len8, o, obj, out, outs, payload, postpone, postponedToQ, q, r, ref5, ref6, ref7, ref8, reqId, requiredLength, resume, s, scope, t, task, tmp, u, whenDone, whenDoneGroups, wrp;\n        index = ip.index;\n        payload = ip.data;\n        scope = ip.scope;\n        if (!(port in _wp(scope).groupBuffers)) {\n          _wp(scope).groupBuffers[port] = [];\n        }\n        if (!(port in _wp(scope).keyBuffers)) {\n          _wp(scope).keyBuffers[port] = null;\n        }\n        switch (ip.type) {\n          case 'openBracket':\n            if (payload === null) {\n              return;\n            }\n            _wp(scope).groupBuffers[port].push(payload);\n            if (config.forwardGroups && (collectGroups === true || needPortGroups) && !config.async) {\n              return sendGroupToOuts(payload);\n            }\n            break;\n          case 'closeBracket':\n            _wp(scope).groupBuffers[port] = _wp(scope).groupBuffers[port].slice(0, _wp(scope).groupBuffers[port].length - 1);\n            if (config.forwardGroups && (collectGroups === true || needPortGroups) && !config.async) {\n              closeGroupOnOuts(payload);\n            }\n            if (_wp(scope).groupBuffers[port].length === 0) {\n              if (config.inPorts.length === 1) {\n                if (config.async || config.StreamSender) {\n                  if (config.ordered) {\n                    _wp(scope).outputQ.push(null);\n                    return processQueue(scope);\n                  } else {\n                    return _wp(scope).disconnectQ.push(true);\n                  }\n                } else {\n                  return disconnectOuts();\n                }\n              } else {\n                foundGroup = false;\n                key = _wp(scope).keyBuffers[port];\n                if (!(key in _wp(scope).disconnectData)) {\n                  _wp(scope).disconnectData[key] = [];\n                }\n                for (i = o = 0, ref5 = _wp(scope).disconnectData[key].length; 0 <= ref5 ? o < ref5 : o > ref5; i = 0 <= ref5 ? ++o : --o) {\n                  if (!(port in _wp(scope).disconnectData[key][i])) {\n                    foundGroup = true;\n                    _wp(scope).disconnectData[key][i][port] = true;\n                    if (Object.keys(_wp(scope).disconnectData[key][i]).length === config.inPorts.length) {\n                      _wp(scope).disconnectData[key].shift();\n                      if (config.async || config.StreamSender) {\n                        if (config.ordered) {\n                          _wp(scope).outputQ.push(null);\n                          processQueue(scope);\n                        } else {\n                          _wp(scope).disconnectQ.push(true);\n                        }\n                      } else {\n                        disconnectOuts();\n                      }\n                      if (_wp(scope).disconnectData[key].length === 0) {\n                        delete _wp(scope).disconnectData[key];\n                      }\n                    }\n                    break;\n                  }\n                }\n                if (!foundGroup) {\n                  obj = {};\n                  obj[port] = true;\n                  return _wp(scope).disconnectData[key].push(obj);\n                }\n              }\n            }\n            break;\n          case 'data':\n            if (config.inPorts.length === 1 && !inPort.isAddressable()) {\n              data = payload;\n              groups = _wp(scope).groupBuffers[port];\n            } else {\n              key = '';\n              if (config.group && _wp(scope).groupBuffers[port].length > 0) {\n                key = _wp(scope).groupBuffers[port].toString();\n                if (config.group instanceof RegExp) {\n                  reqId = null;\n                  ref6 = _wp(scope).groupBuffers[port];\n                  for (q = 0, len5 = ref6.length; q < len5; q++) {\n                    grp = ref6[q];\n                    if (config.group.test(grp)) {\n                      reqId = grp;\n                      break;\n                    }\n                  }\n                  key = reqId ? reqId : '';\n                }\n              } else if (config.field && typeof payload === 'object' && config.field in payload) {\n                key = payload[config.field];\n              }\n              _wp(scope).keyBuffers[port] = key;\n              if (!(key in _wp(scope).groupedData)) {\n                _wp(scope).groupedData[key] = [];\n              }\n              if (!(key in _wp(scope).groupedGroups)) {\n                _wp(scope).groupedGroups[key] = [];\n              }\n              foundGroup = false;\n              requiredLength = config.inPorts.length;\n              if (config.field) {\n                ++requiredLength;\n              }\n              for (i = r = 0, ref7 = _wp(scope).groupedData[key].length; 0 <= ref7 ? r < ref7 : r > ref7; i = 0 <= ref7 ? ++r : --r) {\n                if (!(port in _wp(scope).groupedData[key][i]) || (component.inPorts[port].isAddressable() && config.arrayPolicy[\"in\"] === 'all' && !(index in _wp(scope).groupedData[key][i][port]))) {\n                  foundGroup = true;\n                  if (component.inPorts[port].isAddressable()) {\n                    if (!(port in _wp(scope).groupedData[key][i])) {\n                      _wp(scope).groupedData[key][i][port] = {};\n                    }\n                    _wp(scope).groupedData[key][i][port][index] = payload;\n                  } else {\n                    _wp(scope).groupedData[key][i][port] = payload;\n                  }\n                  if (needPortGroups) {\n                    _wp(scope).groupedGroups[key][i] = utils.unique(slice.call(_wp(scope).groupedGroups[key][i]).concat(slice.call(_wp(scope).groupBuffers[port])));\n                  } else if (collectGroups === true) {\n                    _wp(scope).groupedGroups[key][i][port] = _wp(scope).groupBuffers[port];\n                  }\n                  if (component.inPorts[port].isAddressable() && config.arrayPolicy[\"in\"] === 'all' && Object.keys(_wp(scope).groupedData[key][i][port]).length < component.inPorts[port].listAttached().length) {\n                    return;\n                  }\n                  groupLength = Object.keys(_wp(scope).groupedData[key][i]).length;\n                  if (groupLength === requiredLength) {\n                    data = (_wp(scope).groupedData[key].splice(i, 1))[0];\n                    if (config.inPorts.length === 1 && inPort.isAddressable()) {\n                      data = data[port];\n                    }\n                    groups = (_wp(scope).groupedGroups[key].splice(i, 1))[0];\n                    if (collectGroups === true) {\n                      groups = utils.intersection.apply(null, utils.getValues(groups));\n                    }\n                    if (_wp(scope).groupedData[key].length === 0) {\n                      delete _wp(scope).groupedData[key];\n                    }\n                    if (_wp(scope).groupedGroups[key].length === 0) {\n                      delete _wp(scope).groupedGroups[key];\n                    }\n                    if (config.group && key) {\n                      delete _wp(scope).gcTimestamps[key];\n                    }\n                    break;\n                  } else {\n                    return;\n                  }\n                }\n              }\n              if (!foundGroup) {\n                obj = {};\n                if (config.field) {\n                  obj[config.field] = key;\n                }\n                if (component.inPorts[port].isAddressable()) {\n                  obj[port] = {};\n                  obj[port][index] = payload;\n                } else {\n                  obj[port] = payload;\n                }\n                if (config.inPorts.length === 1 && component.inPorts[port].isAddressable() && (config.arrayPolicy[\"in\"] === 'any' || component.inPorts[port].listAttached().length === 1)) {\n                  data = obj[port];\n                  groups = _wp(scope).groupBuffers[port];\n                } else {\n                  _wp(scope).groupedData[key].push(obj);\n                  if (needPortGroups) {\n                    _wp(scope).groupedGroups[key].push(_wp(scope).groupBuffers[port]);\n                  } else if (collectGroups === true) {\n                    tmp = {};\n                    tmp[port] = _wp(scope).groupBuffers[port];\n                    _wp(scope).groupedGroups[key].push(tmp);\n                  } else {\n                    _wp(scope).groupedGroups[key].push([]);\n                  }\n                  if (config.group && key) {\n                    _wp(scope).gcTimestamps[key] = new Date().getTime();\n                  }\n                  return;\n                }\n              }\n            }\n            if (config.dropInput && _wp(scope).completeParams.length !== component.requiredParams.length) {\n              return;\n            }\n            outs = {};\n            ref8 = config.outPorts;\n            for (s = 0, len6 = ref8.length; s < len6; s++) {\n              name = ref8[s];\n              wrp = new OutPortWrapper(component.outPorts[name], scope);\n              if (config.async || config.sendStreams && config.sendStreams.indexOf(name) !== -1) {\n                wrp;\n                outs[name] = new StreamSender(wrp, config.ordered);\n              } else {\n                outs[name] = wrp;\n              }\n            }\n            if (config.outPorts.length === 1) {\n              outs = outs[config.outPorts[0]];\n            }\n            if (!groups) {\n              groups = [];\n            }\n            groups = (function() {\n              var len7, results, t;\n              results = [];\n              for (t = 0, len7 = groups.length; t < len7; t++) {\n                g = groups[t];\n                if (g !== null) {\n                  results.push(g);\n                }\n              }\n              return results;\n            })();\n            whenDoneGroups = groups.slice(0);\n            whenDone = function(err) {\n              var disconnect, len7, out, outputs, t;\n              if (err) {\n                component.error(err, whenDoneGroups, 'error', scope);\n              }\n              if (typeof component.fail === 'function' && component.hasErrors) {\n                component.fail(null, [], scope);\n              }\n              outputs = outs;\n              if (config.outPorts.length === 1) {\n                outputs = {};\n                outputs[port] = outs;\n              }\n              disconnect = false;\n              if (_wp(scope).disconnectQ.length > 0) {\n                _wp(scope).disconnectQ.shift();\n                disconnect = true;\n              }\n              for (name in outputs) {\n                out = outputs[name];\n                if (config.forwardGroups && config.async) {\n                  for (t = 0, len7 = whenDoneGroups.length; t < len7; t++) {\n                    i = whenDoneGroups[t];\n                    out.endGroup();\n                  }\n                }\n                if (disconnect) {\n                  out.disconnect();\n                }\n                if (config.async || config.StreamSender) {\n                  out.done();\n                }\n              }\n              if (typeof component.afterProcess === 'function') {\n                return component.afterProcess(scope, err || component.hasErrors, outs);\n              }\n            };\n            if (typeof component.beforeProcess === 'function') {\n              component.beforeProcess(scope, outs);\n            }\n            if (config.forwardGroups && config.async) {\n              if (config.outPorts.length === 1) {\n                for (t = 0, len7 = groups.length; t < len7; t++) {\n                  g = groups[t];\n                  outs.beginGroup(g);\n                }\n              } else {\n                for (name in outs) {\n                  out = outs[name];\n                  for (u = 0, len8 = groups.length; u < len8; u++) {\n                    g = groups[u];\n                    out.beginGroup(g);\n                  }\n                }\n              }\n            }\n            exports.MultiError(component, config.name, config.error, groups, scope);\n            debug(\"WirePattern Legacy API call with\", data, groups, component.params, scope);\n            if (config.async) {\n              postpone = function() {};\n              resume = function() {};\n              postponedToQ = false;\n              task = function() {\n                setParamsScope(scope);\n                return proc.call(component, data, groups, outs, whenDone, postpone, resume, scope);\n              };\n              postpone = function(backToQueue) {\n                if (backToQueue == null) {\n                  backToQueue = true;\n                }\n                postponedToQ = backToQueue;\n                if (backToQueue) {\n                  return _wp(scope).taskQ.push(task);\n                }\n              };\n              resume = function() {\n                if (postponedToQ) {\n                  return resumeTaskQ();\n                } else {\n                  return task();\n                }\n              };\n            } else {\n              task = function() {\n                setParamsScope(scope);\n                proc.call(component, data, groups, outs, null, null, null, scope);\n                return whenDone();\n              };\n            }\n            _wp(scope).taskQ.push(task);\n            resumeTaskQ(scope);\n            return gc();\n        }\n      };\n    };\n    for (n = 0, len4 = ref4.length; n < len4; n++) {\n      port = ref4[n];\n      fn1(port);\n    }\n    baseTearDown = component.tearDown;\n    component.tearDown = function(callback) {\n      component.requiredParams = [];\n      component.defaultedParams = [];\n      component.gcCounter = 0;\n      component._wpData = {};\n      component.params = {};\n      return baseTearDown.call(component, callback);\n    };\n    return component;\n  };\n\n  exports.GroupedInput = exports.WirePattern;\n\n  exports.CustomError = function(message, options) {\n    var err;\n    err = new Error(message);\n    return exports.CustomizeError(err, options);\n  };\n\n  exports.CustomizeError = function(err, options) {\n    var key, val;\n    for (key in options) {\n      if (!hasProp.call(options, key)) continue;\n      val = options[key];\n      err[key] = val;\n    }\n    return err;\n  };\n\n  exports.MultiError = function(component, group, errorPort, forwardedGroups, scope) {\n    var baseTearDown;\n    if (group == null) {\n      group = '';\n    }\n    if (errorPort == null) {\n      errorPort = 'error';\n    }\n    if (forwardedGroups == null) {\n      forwardedGroups = [];\n    }\n    if (scope == null) {\n      scope = null;\n    }\n    platform.deprecated('noflo.helpers.MultiError is deprecated. Send errors to error port instead');\n    component.hasErrors = false;\n    component.errors = [];\n    if (component.name && !group) {\n      group = component.name;\n    }\n    if (!group) {\n      group = 'Component';\n    }\n    component.error = function(e, groups) {\n      if (groups == null) {\n        groups = [];\n      }\n      component.errors.push({\n        err: e,\n        groups: forwardedGroups.concat(groups)\n      });\n      return component.hasErrors = true;\n    };\n    component.fail = function(e, groups) {\n      var error, grp, j, k, l, len, len1, len2, ref, ref1, ref2;\n      if (e == null) {\n        e = null;\n      }\n      if (groups == null) {\n        groups = [];\n      }\n      if (e) {\n        component.error(e, groups);\n      }\n      if (!component.hasErrors) {\n        return;\n      }\n      if (!(errorPort in component.outPorts)) {\n        return;\n      }\n      if (!component.outPorts[errorPort].isAttached()) {\n        return;\n      }\n      if (group) {\n        component.outPorts[errorPort].openBracket(group, {\n          scope: scope\n        });\n      }\n      ref = component.errors;\n      for (j = 0, len = ref.length; j < len; j++) {\n        error = ref[j];\n        ref1 = error.groups;\n        for (k = 0, len1 = ref1.length; k < len1; k++) {\n          grp = ref1[k];\n          component.outPorts[errorPort].openBracket(grp, {\n            scope: scope\n          });\n        }\n        component.outPorts[errorPort].data(error.err, {\n          scope: scope\n        });\n        ref2 = error.groups;\n        for (l = 0, len2 = ref2.length; l < len2; l++) {\n          grp = ref2[l];\n          component.outPorts[errorPort].closeBracket(grp, {\n            scope: scope\n          });\n        }\n      }\n      if (group) {\n        component.outPorts[errorPort].closeBracket(group, {\n          scope: scope\n        });\n      }\n      component.hasErrors = false;\n      return component.errors = [];\n    };\n    baseTearDown = component.tearDown;\n    component.tearDown = function(callback) {\n      component.hasErrors = false;\n      component.errors = [];\n      return baseTearDown.call(component, callback);\n    };\n    return component;\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-noflo/node_modules/noflo/lib/Streams.js":"(function() {\n  var IP, StreamReceiver, StreamSender, Substream;\n\n  IP = (function() {\n    function IP(data1) {\n      this.data = data1;\n    }\n\n    IP.prototype.sendTo = function(port) {\n      return port.send(this.data);\n    };\n\n    IP.prototype.getValue = function() {\n      return this.data;\n    };\n\n    IP.prototype.toObject = function() {\n      return this.data;\n    };\n\n    return IP;\n\n  })();\n\n  exports.IP = IP;\n\n  Substream = (function() {\n    function Substream(key) {\n      this.key = key;\n      this.value = [];\n    }\n\n    Substream.prototype.push = function(value) {\n      return this.value.push(value);\n    };\n\n    Substream.prototype.sendTo = function(port) {\n      var i, ip, len, ref;\n      port.beginGroup(this.key);\n      ref = this.value;\n      for (i = 0, len = ref.length; i < len; i++) {\n        ip = ref[i];\n        if (ip instanceof Substream || ip instanceof IP) {\n          ip.sendTo(port);\n        } else {\n          port.send(ip);\n        }\n      }\n      return port.endGroup(this.key);\n    };\n\n    Substream.prototype.getKey = function() {\n      return this.key;\n    };\n\n    Substream.prototype.getValue = function() {\n      var hasKeys, i, ip, len, obj, ref, res, val;\n      switch (this.value.length) {\n        case 0:\n          return null;\n        case 1:\n          if (typeof this.value[0].getValue === 'function') {\n            if (this.value[0] instanceof Substream) {\n              obj = {};\n              obj[this.value[0].key] = this.value[0].getValue();\n              return obj;\n            } else {\n              return this.value[0].getValue();\n            }\n          } else {\n            return this.value[0];\n          }\n          break;\n        default:\n          res = [];\n          hasKeys = false;\n          ref = this.value;\n          for (i = 0, len = ref.length; i < len; i++) {\n            ip = ref[i];\n            val = typeof ip.getValue === 'function' ? ip.getValue() : ip;\n            if (ip instanceof Substream) {\n              obj = {};\n              obj[ip.key] = ip.getValue();\n              res.push(obj);\n            } else {\n              res.push(val);\n            }\n          }\n          return res;\n      }\n    };\n\n    Substream.prototype.toObject = function() {\n      var obj;\n      obj = {};\n      obj[this.key] = this.getValue();\n      return obj;\n    };\n\n    return Substream;\n\n  })();\n\n  exports.Substream = Substream;\n\n  StreamSender = (function() {\n    function StreamSender(port1, ordered) {\n      this.port = port1;\n      this.ordered = ordered != null ? ordered : false;\n      this.q = [];\n      this.resetCurrent();\n      this.resolved = false;\n    }\n\n    StreamSender.prototype.resetCurrent = function() {\n      this.level = 0;\n      this.current = null;\n      return this.stack = [];\n    };\n\n    StreamSender.prototype.beginGroup = function(group) {\n      var stream;\n      this.level++;\n      stream = new Substream(group);\n      this.stack.push(stream);\n      this.current = stream;\n      return this;\n    };\n\n    StreamSender.prototype.endGroup = function() {\n      var parent, value;\n      if (this.level > 0) {\n        this.level--;\n      }\n      value = this.stack.pop();\n      if (this.level === 0) {\n        this.q.push(value);\n        this.resetCurrent();\n      } else {\n        parent = this.stack[this.stack.length - 1];\n        parent.push(value);\n        this.current = parent;\n      }\n      return this;\n    };\n\n    StreamSender.prototype.send = function(data) {\n      if (this.level === 0) {\n        this.q.push(new IP(data));\n      } else {\n        this.current.push(new IP(data));\n      }\n      return this;\n    };\n\n    StreamSender.prototype.done = function() {\n      if (this.ordered) {\n        this.resolved = true;\n      } else {\n        this.flush();\n      }\n      return this;\n    };\n\n    StreamSender.prototype.disconnect = function() {\n      this.q.push(null);\n      return this;\n    };\n\n    StreamSender.prototype.flush = function() {\n      var i, ip, len, ref, res;\n      res = false;\n      if (this.q.length > 0) {\n        ref = this.q;\n        for (i = 0, len = ref.length; i < len; i++) {\n          ip = ref[i];\n          if (ip === null) {\n            if (this.port.isConnected()) {\n              this.port.disconnect();\n            }\n          } else {\n            ip.sendTo(this.port);\n          }\n        }\n        res = true;\n      }\n      this.q = [];\n      return res;\n    };\n\n    StreamSender.prototype.isAttached = function() {\n      return this.port.isAttached();\n    };\n\n    return StreamSender;\n\n  })();\n\n  exports.StreamSender = StreamSender;\n\n  StreamReceiver = (function() {\n    function StreamReceiver(port1, buffered, process) {\n      this.port = port1;\n      this.buffered = buffered != null ? buffered : false;\n      this.process = process != null ? process : null;\n      this.q = [];\n      this.resetCurrent();\n      this.port.process = (function(_this) {\n        return function(event, payload, index) {\n          var stream;\n          switch (event) {\n            case 'connect':\n              if (typeof _this.process === 'function') {\n                return _this.process('connect', index);\n              }\n              break;\n            case 'begingroup':\n              _this.level++;\n              stream = new Substream(payload);\n              if (_this.level === 1) {\n                _this.root = stream;\n                _this.parent = null;\n              } else {\n                _this.parent = _this.current;\n              }\n              return _this.current = stream;\n            case 'endgroup':\n              if (_this.level > 0) {\n                _this.level--;\n              }\n              if (_this.level === 0) {\n                if (_this.buffered) {\n                  _this.q.push(_this.root);\n                  _this.process('readable', index);\n                } else {\n                  if (typeof _this.process === 'function') {\n                    _this.process('data', _this.root, index);\n                  }\n                }\n                return _this.resetCurrent();\n              } else {\n                _this.parent.push(_this.current);\n                return _this.current = _this.parent;\n              }\n              break;\n            case 'data':\n              if (_this.level === 0) {\n                return _this.q.push(new IP(payload));\n              } else {\n                return _this.current.push(new IP(payload));\n              }\n              break;\n            case 'disconnect':\n              if (typeof _this.process === 'function') {\n                return _this.process('disconnect', index);\n              }\n          }\n        };\n      })(this);\n    }\n\n    StreamReceiver.prototype.resetCurrent = function() {\n      this.level = 0;\n      this.root = null;\n      this.current = null;\n      return this.parent = null;\n    };\n\n    StreamReceiver.prototype.read = function() {\n      if (this.q.length === 0) {\n        return void 0;\n      }\n      return this.q.shift();\n    };\n\n    return StreamReceiver;\n\n  })();\n\n  exports.StreamReceiver = StreamReceiver;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-noflo/node_modules/noflo/lib/ArrayPort.js":"(function() {\n  var ArrayPort, platform, port,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  port = require(\"./Port\");\n\n  platform = require('./Platform');\n\n  ArrayPort = (function(superClass) {\n    extend(ArrayPort, superClass);\n\n    function ArrayPort(type) {\n      this.type = type;\n      platform.deprecated('noflo.ArrayPort is deprecated. Please port to noflo.InPort/noflo.OutPort and use addressable: true');\n      ArrayPort.__super__.constructor.call(this, this.type);\n    }\n\n    ArrayPort.prototype.attach = function(socket, socketId) {\n      if (socketId == null) {\n        socketId = null;\n      }\n      if (socketId === null) {\n        socketId = this.sockets.length;\n      }\n      this.sockets[socketId] = socket;\n      return this.attachSocket(socket, socketId);\n    };\n\n    ArrayPort.prototype.connect = function(socketId) {\n      if (socketId == null) {\n        socketId = null;\n      }\n      if (socketId === null) {\n        if (!this.sockets.length) {\n          throw new Error((this.getId()) + \": No connections available\");\n        }\n        this.sockets.forEach(function(socket) {\n          if (!socket) {\n            return;\n          }\n          return socket.connect();\n        });\n        return;\n      }\n      if (!this.sockets[socketId]) {\n        throw new Error((this.getId()) + \": No connection '\" + socketId + \"' available\");\n      }\n      return this.sockets[socketId].connect();\n    };\n\n    ArrayPort.prototype.beginGroup = function(group, socketId) {\n      if (socketId == null) {\n        socketId = null;\n      }\n      if (socketId === null) {\n        if (!this.sockets.length) {\n          throw new Error((this.getId()) + \": No connections available\");\n        }\n        this.sockets.forEach((function(_this) {\n          return function(socket, index) {\n            if (!socket) {\n              return;\n            }\n            return _this.beginGroup(group, index);\n          };\n        })(this));\n        return;\n      }\n      if (!this.sockets[socketId]) {\n        throw new Error((this.getId()) + \": No connection '\" + socketId + \"' available\");\n      }\n      if (this.isConnected(socketId)) {\n        return this.sockets[socketId].beginGroup(group);\n      }\n      this.sockets[socketId].once(\"connect\", (function(_this) {\n        return function() {\n          return _this.sockets[socketId].beginGroup(group);\n        };\n      })(this));\n      return this.sockets[socketId].connect();\n    };\n\n    ArrayPort.prototype.send = function(data, socketId) {\n      if (socketId == null) {\n        socketId = null;\n      }\n      if (socketId === null) {\n        if (!this.sockets.length) {\n          throw new Error((this.getId()) + \": No connections available\");\n        }\n        this.sockets.forEach((function(_this) {\n          return function(socket, index) {\n            if (!socket) {\n              return;\n            }\n            return _this.send(data, index);\n          };\n        })(this));\n        return;\n      }\n      if (!this.sockets[socketId]) {\n        throw new Error((this.getId()) + \": No connection '\" + socketId + \"' available\");\n      }\n      if (this.isConnected(socketId)) {\n        return this.sockets[socketId].send(data);\n      }\n      this.sockets[socketId].once(\"connect\", (function(_this) {\n        return function() {\n          return _this.sockets[socketId].send(data);\n        };\n      })(this));\n      return this.sockets[socketId].connect();\n    };\n\n    ArrayPort.prototype.endGroup = function(socketId) {\n      if (socketId == null) {\n        socketId = null;\n      }\n      if (socketId === null) {\n        if (!this.sockets.length) {\n          throw new Error((this.getId()) + \": No connections available\");\n        }\n        this.sockets.forEach((function(_this) {\n          return function(socket, index) {\n            if (!socket) {\n              return;\n            }\n            return _this.endGroup(index);\n          };\n        })(this));\n        return;\n      }\n      if (!this.sockets[socketId]) {\n        throw new Error((this.getId()) + \": No connection '\" + socketId + \"' available\");\n      }\n      return this.sockets[socketId].endGroup();\n    };\n\n    ArrayPort.prototype.disconnect = function(socketId) {\n      var i, len, ref, socket;\n      if (socketId == null) {\n        socketId = null;\n      }\n      if (socketId === null) {\n        if (!this.sockets.length) {\n          throw new Error((this.getId()) + \": No connections available\");\n        }\n        ref = this.sockets;\n        for (i = 0, len = ref.length; i < len; i++) {\n          socket = ref[i];\n          if (!socket) {\n            return;\n          }\n          socket.disconnect();\n        }\n        return;\n      }\n      if (!this.sockets[socketId]) {\n        return;\n      }\n      return this.sockets[socketId].disconnect();\n    };\n\n    ArrayPort.prototype.isConnected = function(socketId) {\n      var connected;\n      if (socketId == null) {\n        socketId = null;\n      }\n      if (socketId === null) {\n        connected = false;\n        this.sockets.forEach(function(socket) {\n          if (!socket) {\n            return;\n          }\n          if (socket.isConnected()) {\n            return connected = true;\n          }\n        });\n        return connected;\n      }\n      if (!this.sockets[socketId]) {\n        return false;\n      }\n      return this.sockets[socketId].isConnected();\n    };\n\n    ArrayPort.prototype.isAddressable = function() {\n      return true;\n    };\n\n    ArrayPort.prototype.isAttached = function(socketId) {\n      var i, len, ref, socket;\n      if (socketId === void 0) {\n        ref = this.sockets;\n        for (i = 0, len = ref.length; i < len; i++) {\n          socket = ref[i];\n          if (socket) {\n            return true;\n          }\n        }\n        return false;\n      }\n      if (this.sockets[socketId]) {\n        return true;\n      }\n      return false;\n    };\n\n    return ArrayPort;\n\n  })(port.Port);\n\n  exports.ArrayPort = ArrayPort;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-noflo/node_modules/noflo/lib/AsCallback.js":"(function() {\n  var ComponentLoader, Graph, IP, Network, getType, internalSocket, normalizeOptions, normalizeOutput, prepareInputMap, prepareNetwork, runNetwork, sendOutputMap;\n\n  ComponentLoader = require('./ComponentLoader').ComponentLoader;\n\n  Network = require('./Network').Network;\n\n  IP = require('./IP');\n\n  internalSocket = require('./InternalSocket');\n\n  Graph = require('fbp-graph').Graph;\n\n  normalizeOptions = function(options, component) {\n    if (!options) {\n      options = {};\n    }\n    if (!options.name) {\n      options.name = component;\n    }\n    if (options.loader) {\n      options.baseDir = options.loader.baseDir;\n    }\n    if (!options.baseDir && process && process.cwd) {\n      options.baseDir = process.cwd();\n    }\n    if (!options.loader) {\n      options.loader = new ComponentLoader(options.baseDir);\n    }\n    if (!options.raw) {\n      options.raw = false;\n    }\n    return options;\n  };\n\n  prepareNetwork = function(component, options, callback) {\n    return options.loader.load(component, function(err, instance) {\n      var def, graph, inPorts, network, nodeName, outPorts, port;\n      if (err) {\n        return callback(err);\n      }\n      graph = new Graph(options.name);\n      nodeName = options.name;\n      graph.addNode(nodeName, component);\n      inPorts = instance.inPorts.ports || instance.inPorts;\n      outPorts = instance.outPorts.ports || instance.outPorts;\n      for (port in inPorts) {\n        def = inPorts[port];\n        graph.addInport(port, nodeName, port);\n      }\n      for (port in outPorts) {\n        def = outPorts[port];\n        graph.addOutport(port, nodeName, port);\n      }\n      graph.componentLoader = options.loader;\n      network = new Network(graph, options);\n      return network.connect(function(err) {\n        if (err) {\n          return callback(err);\n        }\n        return callback(null, network);\n      });\n    });\n  };\n\n  runNetwork = function(network, inputs, options, callback) {\n    var inPorts, inSockets, outPorts, outSockets, process, received;\n    process = network.getNode(options.name);\n    inPorts = Object.keys(network.graph.inports);\n    inSockets = {};\n    inPorts.forEach(function(inport) {\n      inSockets[inport] = internalSocket.createSocket();\n      return process.component.inPorts[inport].attach(inSockets[inport]);\n    });\n    received = [];\n    outPorts = Object.keys(network.graph.outports);\n    outSockets = {};\n    outPorts.forEach(function(outport) {\n      outSockets[outport] = internalSocket.createSocket();\n      process.component.outPorts[outport].attach(outSockets[outport]);\n      return outSockets[outport].on('ip', function(ip) {\n        var res;\n        res = {};\n        res[outport] = ip;\n        return received.push(res);\n      });\n    });\n    network.once('end', function() {\n      var port, socket;\n      for (port in outSockets) {\n        socket = outSockets[port];\n        process.component.outPorts[port].detach(socket);\n      }\n      outSockets = {};\n      inSockets = {};\n      return callback(null, received);\n    });\n    return network.start(function(err) {\n      var i, inputMap, len, port, results, value;\n      if (err) {\n        return callback(err);\n      }\n      results = [];\n      for (i = 0, len = inputs.length; i < len; i++) {\n        inputMap = inputs[i];\n        results.push((function() {\n          var results1;\n          results1 = [];\n          for (port in inputMap) {\n            value = inputMap[port];\n            if (IP.isIP(value)) {\n              inSockets[port].post(value);\n              continue;\n            }\n            results1.push(inSockets[port].post(new IP('data', value)));\n          }\n          return results1;\n        })());\n      }\n      return results;\n    });\n  };\n\n  getType = function(inputs, network) {\n    var key, maps, value;\n    if (typeof inputs !== 'object') {\n      return 'simple';\n    }\n    if (Array.isArray(inputs)) {\n      maps = inputs.filter(function(entry) {\n        return getType(entry, network) === 'map';\n      });\n      if (maps.length === inputs.length) {\n        return 'sequence';\n      }\n      return 'simple';\n    }\n    if (!Object.keys(inputs).length) {\n      return 'simple';\n    }\n    for (key in inputs) {\n      value = inputs[key];\n      if (!network.graph.inports[key]) {\n        return 'simple';\n      }\n    }\n    return 'map';\n  };\n\n  prepareInputMap = function(inputs, inputType, network) {\n    var inPort, map;\n    if (inputType === 'sequence') {\n      return inputs;\n    }\n    if (inputType === 'map') {\n      return [inputs];\n    }\n    inPort = Object.keys(network.graph.inports)[0];\n    if (network.graph.inports[\"in\"]) {\n      inPort = 'in';\n    }\n    map = {};\n    map[inPort] = inputs;\n    return [map];\n  };\n\n  normalizeOutput = function(values, options) {\n    var current, i, len, packet, previous, result;\n    if (options.raw) {\n      return values;\n    }\n    result = [];\n    previous = null;\n    current = result;\n    for (i = 0, len = values.length; i < len; i++) {\n      packet = values[i];\n      if (packet.type === 'openBracket') {\n        previous = current;\n        current = [];\n        previous.push(current);\n      }\n      if (packet.type === 'data') {\n        current.push(packet.data);\n      }\n      if (packet.type === 'closeBracket') {\n        current = previous;\n      }\n    }\n    if (result.length === 1) {\n      return result[0];\n    }\n    return result;\n  };\n\n  sendOutputMap = function(outputs, resultType, options, callback) {\n    var errors, i, key, len, map, mappedOutputs, outputKeys, packets, port, result, val, withValue;\n    errors = outputs.filter(function(map) {\n      return map.error != null;\n    }).map(function(map) {\n      return map.error;\n    });\n    if (errors.length) {\n      return callback(normalizeOutput(errors, options));\n    }\n    if (resultType === 'sequence') {\n      return callback(null, outputs.map(function(map) {\n        var key, res, val;\n        res = {};\n        for (key in map) {\n          val = map[key];\n          if (options.raw) {\n            res[key] = val;\n            continue;\n          }\n          res[key] = normalizeOutput([val], options);\n        }\n        return res;\n      }));\n    }\n    mappedOutputs = {};\n    for (i = 0, len = outputs.length; i < len; i++) {\n      map = outputs[i];\n      for (key in map) {\n        val = map[key];\n        if (!mappedOutputs[key]) {\n          mappedOutputs[key] = [];\n        }\n        mappedOutputs[key].push(val);\n      }\n    }\n    outputKeys = Object.keys(mappedOutputs);\n    withValue = outputKeys.filter(function(outport) {\n      return mappedOutputs[outport].length > 0;\n    });\n    if (withValue.length === 0) {\n      return callback(null);\n    }\n    if (withValue.length === 1 && resultType === 'simple') {\n      return callback(null, normalizeOutput(mappedOutputs[withValue[0]], options));\n    }\n    result = {};\n    for (port in mappedOutputs) {\n      packets = mappedOutputs[port];\n      result[port] = normalizeOutput(packets, options);\n    }\n    return callback(null, result);\n  };\n\n  exports.asCallback = function(component, options) {\n    options = normalizeOptions(options, component);\n    return function(inputs, callback) {\n      return prepareNetwork(component, options, function(err, network) {\n        var inputMap, resultType;\n        if (err) {\n          return callback(err);\n        }\n        resultType = getType(inputs, network);\n        inputMap = prepareInputMap(inputs, resultType, network);\n        return runNetwork(network, inputMap, options, function(err, outputMap) {\n          if (err) {\n            return callback(err);\n          }\n          return sendOutputMap(outputMap, resultType, options, callback);\n        });\n      });\n    };\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-noflo/node_modules/noflo/browser/noflo.js":"/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 56);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n(function() {\n  var IP;\n\n  module.exports = IP = (function() {\n    IP.types = ['data', 'openBracket', 'closeBracket'];\n\n    IP.isIP = function(obj) {\n      return obj && typeof obj === 'object' && obj._isIP === true;\n    };\n\n    function IP(type, data, options) {\n      var key, val;\n      this.type = type != null ? type : 'data';\n      this.data = data != null ? data : null;\n      if (options == null) {\n        options = {};\n      }\n      this._isIP = true;\n      this.scope = null;\n      this.owner = null;\n      this.clonable = false;\n      this.index = null;\n      for (key in options) {\n        val = options[key];\n        this[key] = val;\n      }\n    }\n\n    IP.prototype.clone = function() {\n      var ip, key, val;\n      ip = new IP(this.type);\n      for (key in this) {\n        val = this[key];\n        if (['owner'].indexOf(key) !== -1) {\n          continue;\n        }\n        if (val === null) {\n          continue;\n        }\n        if (typeof val === 'object') {\n          ip[key] = JSON.parse(JSON.stringify(val));\n        } else {\n          ip[key] = val;\n        }\n      }\n      return ip;\n    };\n\n    IP.prototype.move = function(owner) {\n      this.owner = owner;\n    };\n\n    IP.prototype.drop = function() {\n      var key, results, val;\n      results = [];\n      for (key in this) {\n        val = this[key];\n        results.push(delete this[key]);\n      }\n      return results;\n    };\n\n    return IP;\n\n  })();\n\n}).call(this);\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\nvar IP;\n\nmodule.exports = IP = (function() {\n  IP.types = ['data', 'openBracket', 'closeBracket'];\n\n  IP.isIP = function(obj) {\n    return obj && typeof obj === 'object' && obj._isIP === true;\n  };\n\n  function IP(type, data, options) {\n    var key, val;\n    this.type = type != null ? type : 'data';\n    this.data = data != null ? data : null;\n    if (options == null) {\n      options = {};\n    }\n    this._isIP = true;\n    this.scope = null;\n    this.owner = null;\n    this.clonable = false;\n    this.index = null;\n    for (key in options) {\n      val = options[key];\n      this[key] = val;\n    }\n  }\n\n  IP.prototype.clone = function() {\n    var ip, key, ref, val;\n    ip = new IP(this.type);\n    ref = this;\n    for (key in ref) {\n      val = ref[key];\n      if (['owner'].indexOf(key) !== -1) {\n        continue;\n      }\n      if (val === null) {\n        continue;\n      }\n      if (typeof val === 'object') {\n        ip[key] = JSON.parse(JSON.stringify(val));\n      } else {\n        ip[key] = val;\n      }\n    }\n    return ip;\n  };\n\n  IP.prototype.move = function(owner) {\n    this.owner = owner;\n  };\n\n  IP.prototype.drop = function() {\n    var key, ref, results, val;\n    ref = this;\n    results = [];\n    for (key in ref) {\n      val = ref[key];\n      results.push(delete this[key]);\n    }\n    return results;\n  };\n\n  return IP;\n\n})();\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(process) {/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = __webpack_require__(45);\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  'lightseagreen',\n  'forestgreen',\n  'goldenrod',\n  'dodgerblue',\n  'darkorchid',\n  'crimson'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window && typeof window.process !== 'undefined' && window.process.type === 'renderer') {\n    return true;\n  }\n\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n  return (typeof document !== 'undefined' && document && 'WebkitAppearance' in document.documentElement.style) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (typeof window !== 'undefined' && window && window.console && (console.firebug || (console.exception && console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (typeof navigator !== 'undefined' && navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n    // double check webkit in userAgent just in case we are in a worker\n    (typeof navigator !== 'undefined' && navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return;\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit')\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  try {\n    return exports.storage.debug;\n  } catch(e) {}\n\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n  if (typeof process !== 'undefined' && 'env' in process) {\n    return process.env.DEBUG;\n  }\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nexports.graph = __webpack_require__(46);\nexports.Graph = exports.graph.Graph;\n\nexports.journal = __webpack_require__(47);\nexports.Journal = exports.journal.Journal;\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(process) {(function() {\n  exports.isBrowser = function() {\n    if (typeof process !== 'undefined' && process.execPath && process.execPath.match(/node|iojs/)) {\n      return false;\n    }\n    return true;\n  };\n\n  exports.deprecated = function(message) {\n    if (exports.isBrowser()) {\n      if (window.NOFLO_FATAL_DEPRECATED) {\n        throw new Error(message);\n      }\n      console.warn(message);\n      return;\n    }\n    if (process.env.NOFLO_FATAL_DEPRECATED) {\n      throw new Error(message);\n    }\n    return console.warn(message);\n  };\n\n}).call(this);\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(process) {exports.isBrowser = function() {\n  if (typeof process !== 'undefined' && process.execPath && process.execPath.match(/node|iojs/)) {\n    return false;\n  }\n  return true;\n};\n\nexports.deprecated = function(message) {\n  if (exports.isBrowser()) {\n    if (window.NOFLO_FATAL_DEPRECATED) {\n      throw new Error(message);\n    }\n    console.warn(message);\n    return;\n  }\n  if (process.env.NOFLO_FATAL_DEPRECATED) {\n    throw new Error(message);\n  }\n  return console.warn(message);\n};\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n(function() {\n  var EventEmitter, IP, InternalSocket,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  EventEmitter = __webpack_require__(0).EventEmitter;\n\n  IP = __webpack_require__(2);\n\n  InternalSocket = (function(superClass) {\n    extend(InternalSocket, superClass);\n\n    InternalSocket.prototype.regularEmitEvent = function(event, data) {\n      return this.emit(event, data);\n    };\n\n    InternalSocket.prototype.debugEmitEvent = function(event, data) {\n      var error, error1;\n      try {\n        return this.emit(event, data);\n      } catch (error1) {\n        error = error1;\n        if (error.id && error.metadata && error.error) {\n          if (this.listeners('error').length === 0) {\n            throw error.error;\n          }\n          this.emit('error', error);\n          return;\n        }\n        if (this.listeners('error').length === 0) {\n          throw error;\n        }\n        return this.emit('error', {\n          id: this.to.process.id,\n          error: error,\n          metadata: this.metadata\n        });\n      }\n    };\n\n    function InternalSocket(metadata) {\n      this.metadata = metadata != null ? metadata : {};\n      this.brackets = [];\n      this.connected = false;\n      this.dataDelegate = null;\n      this.debug = false;\n      this.emitEvent = this.regularEmitEvent;\n    }\n\n    InternalSocket.prototype.connect = function() {\n      if (this.connected) {\n        return;\n      }\n      this.connected = true;\n      return this.emitEvent('connect', null);\n    };\n\n    InternalSocket.prototype.disconnect = function() {\n      if (!this.connected) {\n        return;\n      }\n      this.connected = false;\n      return this.emitEvent('disconnect', null);\n    };\n\n    InternalSocket.prototype.isConnected = function() {\n      return this.connected;\n    };\n\n    InternalSocket.prototype.send = function(data) {\n      if (data === void 0 && typeof this.dataDelegate === 'function') {\n        data = this.dataDelegate();\n      }\n      return this.handleSocketEvent('data', data);\n    };\n\n    InternalSocket.prototype.post = function(ip, autoDisconnect) {\n      if (autoDisconnect == null) {\n        autoDisconnect = true;\n      }\n      if (ip === void 0 && typeof this.dataDelegate === 'function') {\n        ip = this.dataDelegate();\n      }\n      if (!this.isConnected() && this.brackets.length === 0) {\n        this.connect();\n      }\n      this.handleSocketEvent('ip', ip, false);\n      if (autoDisconnect && this.isConnected() && this.brackets.length === 0) {\n        return this.disconnect();\n      }\n    };\n\n    InternalSocket.prototype.beginGroup = function(group) {\n      return this.handleSocketEvent('begingroup', group);\n    };\n\n    InternalSocket.prototype.endGroup = function() {\n      return this.handleSocketEvent('endgroup');\n    };\n\n    InternalSocket.prototype.setDataDelegate = function(delegate) {\n      if (typeof delegate !== 'function') {\n        throw Error('A data delegate must be a function.');\n      }\n      return this.dataDelegate = delegate;\n    };\n\n    InternalSocket.prototype.setDebug = function(active) {\n      this.debug = active;\n      return this.emitEvent = this.debug ? this.debugEmitEvent : this.regularEmitEvent;\n    };\n\n    InternalSocket.prototype.getId = function() {\n      var fromStr, toStr;\n      fromStr = function(from) {\n        return from.process.id + \"() \" + (from.port.toUpperCase());\n      };\n      toStr = function(to) {\n        return (to.port.toUpperCase()) + \" \" + to.process.id + \"()\";\n      };\n      if (!(this.from || this.to)) {\n        return \"UNDEFINED\";\n      }\n      if (this.from && !this.to) {\n        return (fromStr(this.from)) + \" -> ANON\";\n      }\n      if (!this.from) {\n        return \"DATA -> \" + (toStr(this.to));\n      }\n      return (fromStr(this.from)) + \" -> \" + (toStr(this.to));\n    };\n\n    InternalSocket.prototype.legacyToIp = function(event, payload) {\n      if (IP.isIP(payload)) {\n        return payload;\n      }\n      switch (event) {\n        case 'begingroup':\n          return new IP('openBracket', payload);\n        case 'endgroup':\n          return new IP('closeBracket');\n        case 'data':\n          return new IP('data', payload);\n        default:\n          return null;\n      }\n    };\n\n    InternalSocket.prototype.ipToLegacy = function(ip) {\n      var legacy;\n      switch (ip.type) {\n        case 'openBracket':\n          return legacy = {\n            event: 'begingroup',\n            payload: ip.data\n          };\n        case 'data':\n          return legacy = {\n            event: 'data',\n            payload: ip.data\n          };\n        case 'closeBracket':\n          return legacy = {\n            event: 'endgroup',\n            payload: ip.data\n          };\n      }\n    };\n\n    InternalSocket.prototype.handleSocketEvent = function(event, payload, autoConnect) {\n      var ip, isIP, legacy;\n      if (autoConnect == null) {\n        autoConnect = true;\n      }\n      isIP = event === 'ip' && IP.isIP(payload);\n      ip = isIP ? payload : this.legacyToIp(event, payload);\n      if (!ip) {\n        return;\n      }\n      if (!this.isConnected() && autoConnect && this.brackets.length === 0) {\n        this.connect();\n      }\n      if (event === 'begingroup') {\n        this.brackets.push(payload);\n      }\n      if (isIP && ip.type === 'openBracket') {\n        this.brackets.push(ip.data);\n      }\n      if (event === 'endgroup') {\n        if (this.brackets.length === 0) {\n          return;\n        }\n        ip.data = this.brackets.pop();\n        payload = ip.data;\n      }\n      if (isIP && payload.type === 'closeBracket') {\n        if (this.brackets.length === 0) {\n          return;\n        }\n        this.brackets.pop();\n      }\n      this.emitEvent('ip', ip);\n      if (!(ip && ip.type)) {\n        return;\n      }\n      if (isIP) {\n        legacy = this.ipToLegacy(ip);\n        event = legacy.event;\n        payload = legacy.payload;\n      }\n      if (event === 'connect') {\n        this.connected = true;\n      }\n      if (event === 'disconnect') {\n        this.connected = false;\n      }\n      return this.emitEvent(event, payload);\n    };\n\n    return InternalSocket;\n\n  })(EventEmitter);\n\n  exports.InternalSocket = InternalSocket;\n\n  exports.createSocket = function() {\n    return new InternalSocket;\n  };\n\n}).call(this);\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar EventEmitter, IP, InternalSocket,\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nEventEmitter = __webpack_require__(0).EventEmitter;\n\nIP = __webpack_require__(3);\n\nInternalSocket = (function(superClass) {\n  extend(InternalSocket, superClass);\n\n  InternalSocket.prototype.regularEmitEvent = function(event, data) {\n    return this.emit(event, data);\n  };\n\n  InternalSocket.prototype.debugEmitEvent = function(event, data) {\n    var error;\n    try {\n      return this.emit(event, data);\n    } catch (error1) {\n      error = error1;\n      if (error.id && error.metadata && error.error) {\n        if (this.listeners('error').length === 0) {\n          throw error.error;\n        }\n        this.emit('error', error);\n        return;\n      }\n      if (this.listeners('error').length === 0) {\n        throw error;\n      }\n      return this.emit('error', {\n        id: this.to.process.id,\n        error: error,\n        metadata: this.metadata\n      });\n    }\n  };\n\n  function InternalSocket(metadata) {\n    this.metadata = metadata != null ? metadata : {};\n    this.brackets = [];\n    this.connected = false;\n    this.dataDelegate = null;\n    this.debug = false;\n    this.emitEvent = this.regularEmitEvent;\n  }\n\n  InternalSocket.prototype.connect = function() {\n    if (this.connected) {\n      return;\n    }\n    this.connected = true;\n    return this.emitEvent('connect', null);\n  };\n\n  InternalSocket.prototype.disconnect = function() {\n    if (!this.connected) {\n      return;\n    }\n    this.connected = false;\n    return this.emitEvent('disconnect', null);\n  };\n\n  InternalSocket.prototype.isConnected = function() {\n    return this.connected;\n  };\n\n  InternalSocket.prototype.send = function(data) {\n    if (data === void 0 && typeof this.dataDelegate === 'function') {\n      data = this.dataDelegate();\n    }\n    return this.handleSocketEvent('data', data);\n  };\n\n  InternalSocket.prototype.post = function(ip, autoDisconnect) {\n    if (autoDisconnect == null) {\n      autoDisconnect = true;\n    }\n    if (ip === void 0 && typeof this.dataDelegate === 'function') {\n      ip = this.dataDelegate();\n    }\n    if (!this.isConnected() && this.brackets.length === 0) {\n      this.connect();\n    }\n    this.handleSocketEvent('ip', ip, false);\n    if (autoDisconnect && this.isConnected() && this.brackets.length === 0) {\n      return this.disconnect();\n    }\n  };\n\n  InternalSocket.prototype.beginGroup = function(group) {\n    return this.handleSocketEvent('begingroup', group);\n  };\n\n  InternalSocket.prototype.endGroup = function() {\n    return this.handleSocketEvent('endgroup');\n  };\n\n  InternalSocket.prototype.setDataDelegate = function(delegate) {\n    if (typeof delegate !== 'function') {\n      throw Error('A data delegate must be a function.');\n    }\n    return this.dataDelegate = delegate;\n  };\n\n  InternalSocket.prototype.setDebug = function(active) {\n    this.debug = active;\n    return this.emitEvent = this.debug ? this.debugEmitEvent : this.regularEmitEvent;\n  };\n\n  InternalSocket.prototype.getId = function() {\n    var fromStr, toStr;\n    fromStr = function(from) {\n      return from.process.id + \"() \" + (from.port.toUpperCase());\n    };\n    toStr = function(to) {\n      return (to.port.toUpperCase()) + \" \" + to.process.id + \"()\";\n    };\n    if (!(this.from || this.to)) {\n      return \"UNDEFINED\";\n    }\n    if (this.from && !this.to) {\n      return (fromStr(this.from)) + \" -> ANON\";\n    }\n    if (!this.from) {\n      return \"DATA -> \" + (toStr(this.to));\n    }\n    return (fromStr(this.from)) + \" -> \" + (toStr(this.to));\n  };\n\n  InternalSocket.prototype.legacyToIp = function(event, payload) {\n    if (IP.isIP(payload)) {\n      return payload;\n    }\n    switch (event) {\n      case 'begingroup':\n        return new IP('openBracket', payload);\n      case 'endgroup':\n        return new IP('closeBracket');\n      case 'data':\n        return new IP('data', payload);\n      default:\n        return null;\n    }\n  };\n\n  InternalSocket.prototype.ipToLegacy = function(ip) {\n    var legacy;\n    switch (ip.type) {\n      case 'openBracket':\n        return legacy = {\n          event: 'begingroup',\n          payload: ip.data\n        };\n      case 'data':\n        return legacy = {\n          event: 'data',\n          payload: ip.data\n        };\n      case 'closeBracket':\n        return legacy = {\n          event: 'endgroup',\n          payload: ip.data\n        };\n    }\n  };\n\n  InternalSocket.prototype.handleSocketEvent = function(event, payload, autoConnect) {\n    var ip, isIP, legacy;\n    if (autoConnect == null) {\n      autoConnect = true;\n    }\n    isIP = event === 'ip' && IP.isIP(payload);\n    ip = isIP ? payload : this.legacyToIp(event, payload);\n    if (!ip) {\n      return;\n    }\n    if (!this.isConnected() && autoConnect && this.brackets.length === 0) {\n      this.connect();\n    }\n    if (event === 'begingroup') {\n      this.brackets.push(payload);\n    }\n    if (isIP && ip.type === 'openBracket') {\n      this.brackets.push(ip.data);\n    }\n    if (event === 'endgroup') {\n      if (this.brackets.length === 0) {\n        return;\n      }\n      ip.data = this.brackets.pop();\n      payload = ip.data;\n    }\n    if (isIP && payload.type === 'closeBracket') {\n      if (this.brackets.length === 0) {\n        return;\n      }\n      this.brackets.pop();\n    }\n    this.emitEvent('ip', ip);\n    if (!(ip && ip.type)) {\n      return;\n    }\n    if (isIP) {\n      legacy = this.ipToLegacy(ip);\n      event = legacy.event;\n      payload = legacy.payload;\n    }\n    if (event === 'connect') {\n      this.connected = true;\n    }\n    if (event === 'disconnect') {\n      this.connected = false;\n    }\n    return this.emitEvent(event, payload);\n  };\n\n  return InternalSocket;\n\n})(EventEmitter);\n\nexports.InternalSocket = InternalSocket;\n\nexports.createSocket = function() {\n  return new InternalSocket;\n};\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(process) {(function() {\n  var ComponentLoader, EventEmitter, fbpGraph, internalSocket, registerLoader,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  internalSocket = __webpack_require__(8);\n\n  fbpGraph = __webpack_require__(5);\n\n  EventEmitter = __webpack_require__(0).EventEmitter;\n\n  registerLoader = __webpack_require__(32);\n\n  ComponentLoader = (function(superClass) {\n    extend(ComponentLoader, superClass);\n\n    function ComponentLoader(baseDir, options) {\n      this.baseDir = baseDir;\n      this.options = options != null ? options : {};\n      this.components = null;\n      this.libraryIcons = {};\n      this.processing = false;\n      this.ready = false;\n      if (typeof this.setMaxListeners === 'function') {\n        this.setMaxListeners(0);\n      }\n    }\n\n    ComponentLoader.prototype.getModulePrefix = function(name) {\n      if (!name) {\n        return '';\n      }\n      if (name === 'noflo') {\n        return '';\n      }\n      if (name[0] === '@') {\n        name = name.replace(/\\@[a-z\\-]+\\//, '');\n      }\n      return name.replace('noflo-', '');\n    };\n\n    ComponentLoader.prototype.listComponents = function(callback) {\n      if (this.processing) {\n        this.once('ready', (function(_this) {\n          return function() {\n            return callback(null, _this.components);\n          };\n        })(this));\n        return;\n      }\n      if (this.components) {\n        return callback(null, this.components);\n      }\n      this.ready = false;\n      this.processing = true;\n      this.components = {};\n      registerLoader.register(this, (function(_this) {\n        return function(err) {\n          if (err) {\n            if (callback) {\n              return callback(err);\n            }\n            throw err;\n          }\n          _this.processing = false;\n          _this.ready = true;\n          _this.emit('ready', true);\n          if (callback) {\n            return callback(null, _this.components);\n          }\n        };\n      })(this));\n    };\n\n    ComponentLoader.prototype.load = function(name, callback, metadata) {\n      var component, componentName;\n      if (!this.ready) {\n        this.listComponents((function(_this) {\n          return function(err) {\n            if (err) {\n              return callback(err);\n            }\n            return _this.load(name, callback, metadata);\n          };\n        })(this));\n        return;\n      }\n      component = this.components[name];\n      if (!component) {\n        for (componentName in this.components) {\n          if (componentName.split('/')[1] === name) {\n            component = this.components[componentName];\n            break;\n          }\n        }\n        if (!component) {\n          callback(new Error(\"Component \" + name + \" not available with base \" + this.baseDir));\n          return;\n        }\n      }\n      if (this.isGraph(component)) {\n        if (typeof process !== 'undefined' && process.execPath && process.execPath.indexOf('node') !== -1) {\n          process.nextTick((function(_this) {\n            return function() {\n              return _this.loadGraph(name, component, callback, metadata);\n            };\n          })(this));\n        } else {\n          setTimeout((function(_this) {\n            return function() {\n              return _this.loadGraph(name, component, callback, metadata);\n            };\n          })(this), 0);\n        }\n        return;\n      }\n      return this.createComponent(name, component, metadata, (function(_this) {\n        return function(err, instance) {\n          if (err) {\n            return callback(err);\n          }\n          if (!instance) {\n            callback(new Error(\"Component \" + name + \" could not be loaded.\"));\n            return;\n          }\n          if (name === 'Graph') {\n            instance.baseDir = _this.baseDir;\n          }\n          if (typeof name === 'string') {\n            instance.componentName = name;\n          }\n          _this.setIcon(name, instance);\n          return callback(null, instance);\n        };\n      })(this));\n    };\n\n    ComponentLoader.prototype.createComponent = function(name, component, metadata, callback) {\n      var implementation, instance;\n      implementation = component;\n      if (!implementation) {\n        return callback(new Error(\"Component \" + name + \" not available\"));\n      }\n      if (typeof implementation === 'string') {\n        if (typeof registerLoader.dynamicLoad === 'function') {\n          registerLoader.dynamicLoad(name, implementation, metadata, callback);\n          return;\n        }\n        return callback(Error(\"Dynamic loading of \" + implementation + \" for component \" + name + \" not available on this platform.\"));\n      }\n      if (typeof implementation.getComponent === 'function') {\n        instance = implementation.getComponent(metadata);\n      } else if (typeof implementation === 'function') {\n        instance = implementation(metadata);\n      } else {\n        callback(new Error(\"Invalid type \" + (typeof implementation) + \" for component \" + name + \".\"));\n        return;\n      }\n      return callback(null, instance);\n    };\n\n    ComponentLoader.prototype.isGraph = function(cPath) {\n      if (typeof cPath === 'object' && cPath instanceof fbpGraph.Graph) {\n        return true;\n      }\n      if (typeof cPath === 'object' && cPath.processes && cPath.connections) {\n        return true;\n      }\n      if (typeof cPath !== 'string') {\n        return false;\n      }\n      return cPath.indexOf('.fbp') !== -1 || cPath.indexOf('.json') !== -1;\n    };\n\n    ComponentLoader.prototype.loadGraph = function(name, component, callback, metadata) {\n      this.createComponent(name, this.components['Graph'], metadata, (function(_this) {\n        return function(err, graph) {\n          var graphSocket;\n          if (err) {\n            return callback(err);\n          }\n          graphSocket = internalSocket.createSocket();\n          graph.loader = _this;\n          graph.baseDir = _this.baseDir;\n          graph.inPorts.remove('graph');\n          graph.setGraph(component, function(err) {\n            if (err) {\n              return callback(err);\n            }\n            _this.setIcon(name, graph);\n            return callback(null, graph);\n          });\n        };\n      })(this));\n    };\n\n    ComponentLoader.prototype.setIcon = function(name, instance) {\n      var componentName, library, ref;\n      if (!instance.getIcon || instance.getIcon()) {\n        return;\n      }\n      ref = name.split('/'), library = ref[0], componentName = ref[1];\n      if (componentName && this.getLibraryIcon(library)) {\n        instance.setIcon(this.getLibraryIcon(library));\n        return;\n      }\n      if (instance.isSubgraph()) {\n        instance.setIcon('sitemap');\n        return;\n      }\n      instance.setIcon('square');\n    };\n\n    ComponentLoader.prototype.getLibraryIcon = function(prefix) {\n      if (this.libraryIcons[prefix]) {\n        return this.libraryIcons[prefix];\n      }\n      return null;\n    };\n\n    ComponentLoader.prototype.setLibraryIcon = function(prefix, icon) {\n      return this.libraryIcons[prefix] = icon;\n    };\n\n    ComponentLoader.prototype.normalizeName = function(packageId, name) {\n      var fullName, prefix;\n      prefix = this.getModulePrefix(packageId);\n      fullName = prefix + \"/\" + name;\n      if (!packageId) {\n        fullName = name;\n      }\n      return fullName;\n    };\n\n    ComponentLoader.prototype.registerComponent = function(packageId, name, cPath, callback) {\n      var fullName;\n      fullName = this.normalizeName(packageId, name);\n      this.components[fullName] = cPath;\n      if (callback) {\n        return callback();\n      }\n    };\n\n    ComponentLoader.prototype.registerGraph = function(packageId, name, gPath, callback) {\n      return this.registerComponent(packageId, name, gPath, callback);\n    };\n\n    ComponentLoader.prototype.registerLoader = function(loader, callback) {\n      return loader(this, callback);\n    };\n\n    ComponentLoader.prototype.setSource = function(packageId, name, source, language, callback) {\n      if (!registerLoader.setSource) {\n        return callback(new Error('setSource not allowed'));\n      }\n      if (!this.ready) {\n        this.listComponents((function(_this) {\n          return function(err) {\n            if (err) {\n              return callback(err);\n            }\n            return _this.setSource(packageId, name, source, language, callback);\n          };\n        })(this));\n        return;\n      }\n      return registerLoader.setSource(this, packageId, name, source, language, callback);\n    };\n\n    ComponentLoader.prototype.getSource = function(name, callback) {\n      if (!registerLoader.getSource) {\n        return callback(new Error('getSource not allowed'));\n      }\n      if (!this.ready) {\n        this.listComponents((function(_this) {\n          return function(err) {\n            if (err) {\n              return callback(err);\n            }\n            return _this.getSource(name, callback);\n          };\n        })(this));\n        return;\n      }\n      return registerLoader.getSource(this, name, callback);\n    };\n\n    ComponentLoader.prototype.clear = function() {\n      this.components = null;\n      this.ready = false;\n      return this.processing = false;\n    };\n\n    return ComponentLoader;\n\n  })(EventEmitter);\n\n  exports.ComponentLoader = ComponentLoader;\n\n}).call(this);\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n(function() {\n  var EventEmitter, Port, platform,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  EventEmitter = __webpack_require__(0).EventEmitter;\n\n  platform = __webpack_require__(6);\n\n  Port = (function(superClass) {\n    extend(Port, superClass);\n\n    Port.prototype.description = '';\n\n    Port.prototype.required = true;\n\n    function Port(type) {\n      this.type = type;\n      platform.deprecated('noflo.Port is deprecated. Please port to noflo.InPort/noflo.OutPort');\n      if (!this.type) {\n        this.type = 'all';\n      }\n      if (this.type === 'integer') {\n        this.type = 'int';\n      }\n      this.sockets = [];\n      this.from = null;\n      this.node = null;\n      this.name = null;\n    }\n\n    Port.prototype.getId = function() {\n      if (!(this.node && this.name)) {\n        return 'Port';\n      }\n      return this.node + \" \" + (this.name.toUpperCase());\n    };\n\n    Port.prototype.getDataType = function() {\n      return this.type;\n    };\n\n    Port.prototype.getDescription = function() {\n      return this.description;\n    };\n\n    Port.prototype.attach = function(socket) {\n      this.sockets.push(socket);\n      return this.attachSocket(socket);\n    };\n\n    Port.prototype.attachSocket = function(socket, localId) {\n      if (localId == null) {\n        localId = null;\n      }\n      this.emit(\"attach\", socket, localId);\n      this.from = socket.from;\n      if (socket.setMaxListeners) {\n        socket.setMaxListeners(0);\n      }\n      socket.on(\"connect\", (function(_this) {\n        return function() {\n          return _this.emit(\"connect\", socket, localId);\n        };\n      })(this));\n      socket.on(\"begingroup\", (function(_this) {\n        return function(group) {\n          return _this.emit(\"begingroup\", group, localId);\n        };\n      })(this));\n      socket.on(\"data\", (function(_this) {\n        return function(data) {\n          return _this.emit(\"data\", data, localId);\n        };\n      })(this));\n      socket.on(\"endgroup\", (function(_this) {\n        return function(group) {\n          return _this.emit(\"endgroup\", group, localId);\n        };\n      })(this));\n      return socket.on(\"disconnect\", (function(_this) {\n        return function() {\n          return _this.emit(\"disconnect\", socket, localId);\n        };\n      })(this));\n    };\n\n    Port.prototype.connect = function() {\n      var i, len, ref, results, socket;\n      if (this.sockets.length === 0) {\n        throw new Error((this.getId()) + \": No connections available\");\n      }\n      ref = this.sockets;\n      results = [];\n      for (i = 0, len = ref.length; i < len; i++) {\n        socket = ref[i];\n        results.push(socket.connect());\n      }\n      return results;\n    };\n\n    Port.prototype.beginGroup = function(group) {\n      if (this.sockets.length === 0) {\n        throw new Error((this.getId()) + \": No connections available\");\n      }\n      return this.sockets.forEach(function(socket) {\n        if (socket.isConnected()) {\n          return socket.beginGroup(group);\n        }\n        socket.once('connect', function() {\n          return socket.beginGroup(group);\n        });\n        return socket.connect();\n      });\n    };\n\n    Port.prototype.send = function(data) {\n      if (this.sockets.length === 0) {\n        throw new Error((this.getId()) + \": No connections available\");\n      }\n      return this.sockets.forEach(function(socket) {\n        if (socket.isConnected()) {\n          return socket.send(data);\n        }\n        socket.once('connect', function() {\n          return socket.send(data);\n        });\n        return socket.connect();\n      });\n    };\n\n    Port.prototype.endGroup = function() {\n      var i, len, ref, results, socket;\n      if (this.sockets.length === 0) {\n        throw new Error((this.getId()) + \": No connections available\");\n      }\n      ref = this.sockets;\n      results = [];\n      for (i = 0, len = ref.length; i < len; i++) {\n        socket = ref[i];\n        results.push(socket.endGroup());\n      }\n      return results;\n    };\n\n    Port.prototype.disconnect = function() {\n      var i, len, ref, results, socket;\n      if (this.sockets.length === 0) {\n        throw new Error((this.getId()) + \": No connections available\");\n      }\n      ref = this.sockets;\n      results = [];\n      for (i = 0, len = ref.length; i < len; i++) {\n        socket = ref[i];\n        results.push(socket.disconnect());\n      }\n      return results;\n    };\n\n    Port.prototype.detach = function(socket) {\n      var index;\n      if (this.sockets.length === 0) {\n        return;\n      }\n      if (!socket) {\n        socket = this.sockets[0];\n      }\n      index = this.sockets.indexOf(socket);\n      if (index === -1) {\n        return;\n      }\n      if (this.isAddressable()) {\n        this.sockets[index] = void 0;\n        this.emit('detach', socket, index);\n        return;\n      }\n      this.sockets.splice(index, 1);\n      return this.emit(\"detach\", socket);\n    };\n\n    Port.prototype.isConnected = function() {\n      var connected;\n      connected = false;\n      this.sockets.forEach(function(socket) {\n        if (socket.isConnected()) {\n          return connected = true;\n        }\n      });\n      return connected;\n    };\n\n    Port.prototype.isAddressable = function() {\n      return false;\n    };\n\n    Port.prototype.isRequired = function() {\n      return this.required;\n    };\n\n    Port.prototype.isAttached = function() {\n      if (this.sockets.length > 0) {\n        return true;\n      }\n      return false;\n    };\n\n    Port.prototype.listAttached = function() {\n      var attached, i, idx, len, ref, socket;\n      attached = [];\n      ref = this.sockets;\n      for (idx = i = 0, len = ref.length; i < len; idx = ++i) {\n        socket = ref[idx];\n        if (!socket) {\n          continue;\n        }\n        attached.push(idx);\n      }\n      return attached;\n    };\n\n    Port.prototype.canAttach = function() {\n      return true;\n    };\n\n    Port.prototype.clear = function() {};\n\n    return Port;\n\n  })(EventEmitter);\n\n  exports.Port = Port;\n\n}).call(this);\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports) {\n\n(function() {\n  var IP, StreamReceiver, StreamSender, Substream;\n\n  IP = (function() {\n    function IP(data1) {\n      this.data = data1;\n    }\n\n    IP.prototype.sendTo = function(port) {\n      return port.send(this.data);\n    };\n\n    IP.prototype.getValue = function() {\n      return this.data;\n    };\n\n    IP.prototype.toObject = function() {\n      return this.data;\n    };\n\n    return IP;\n\n  })();\n\n  exports.IP = IP;\n\n  Substream = (function() {\n    function Substream(key) {\n      this.key = key;\n      this.value = [];\n    }\n\n    Substream.prototype.push = function(value) {\n      return this.value.push(value);\n    };\n\n    Substream.prototype.sendTo = function(port) {\n      var i, ip, len, ref;\n      port.beginGroup(this.key);\n      ref = this.value;\n      for (i = 0, len = ref.length; i < len; i++) {\n        ip = ref[i];\n        if (ip instanceof Substream || ip instanceof IP) {\n          ip.sendTo(port);\n        } else {\n          port.send(ip);\n        }\n      }\n      return port.endGroup(this.key);\n    };\n\n    Substream.prototype.getKey = function() {\n      return this.key;\n    };\n\n    Substream.prototype.getValue = function() {\n      var hasKeys, i, ip, len, obj, ref, res, val;\n      switch (this.value.length) {\n        case 0:\n          return null;\n        case 1:\n          if (typeof this.value[0].getValue === 'function') {\n            if (this.value[0] instanceof Substream) {\n              obj = {};\n              obj[this.value[0].key] = this.value[0].getValue();\n              return obj;\n            } else {\n              return this.value[0].getValue();\n            }\n          } else {\n            return this.value[0];\n          }\n          break;\n        default:\n          res = [];\n          hasKeys = false;\n          ref = this.value;\n          for (i = 0, len = ref.length; i < len; i++) {\n            ip = ref[i];\n            val = typeof ip.getValue === 'function' ? ip.getValue() : ip;\n            if (ip instanceof Substream) {\n              obj = {};\n              obj[ip.key] = ip.getValue();\n              res.push(obj);\n            } else {\n              res.push(val);\n            }\n          }\n          return res;\n      }\n    };\n\n    Substream.prototype.toObject = function() {\n      var obj;\n      obj = {};\n      obj[this.key] = this.getValue();\n      return obj;\n    };\n\n    return Substream;\n\n  })();\n\n  exports.Substream = Substream;\n\n  StreamSender = (function() {\n    function StreamSender(port1, ordered) {\n      this.port = port1;\n      this.ordered = ordered != null ? ordered : false;\n      this.q = [];\n      this.resetCurrent();\n      this.resolved = false;\n    }\n\n    StreamSender.prototype.resetCurrent = function() {\n      this.level = 0;\n      this.current = null;\n      return this.stack = [];\n    };\n\n    StreamSender.prototype.beginGroup = function(group) {\n      var stream;\n      this.level++;\n      stream = new Substream(group);\n      this.stack.push(stream);\n      this.current = stream;\n      return this;\n    };\n\n    StreamSender.prototype.endGroup = function() {\n      var parent, value;\n      if (this.level > 0) {\n        this.level--;\n      }\n      value = this.stack.pop();\n      if (this.level === 0) {\n        this.q.push(value);\n        this.resetCurrent();\n      } else {\n        parent = this.stack[this.stack.length - 1];\n        parent.push(value);\n        this.current = parent;\n      }\n      return this;\n    };\n\n    StreamSender.prototype.send = function(data) {\n      if (this.level === 0) {\n        this.q.push(new IP(data));\n      } else {\n        this.current.push(new IP(data));\n      }\n      return this;\n    };\n\n    StreamSender.prototype.done = function() {\n      if (this.ordered) {\n        this.resolved = true;\n      } else {\n        this.flush();\n      }\n      return this;\n    };\n\n    StreamSender.prototype.disconnect = function() {\n      this.q.push(null);\n      return this;\n    };\n\n    StreamSender.prototype.flush = function() {\n      var i, ip, len, ref, res;\n      res = false;\n      if (this.q.length > 0) {\n        ref = this.q;\n        for (i = 0, len = ref.length; i < len; i++) {\n          ip = ref[i];\n          if (ip === null) {\n            if (this.port.isConnected()) {\n              this.port.disconnect();\n            }\n          } else {\n            ip.sendTo(this.port);\n          }\n        }\n        res = true;\n      }\n      this.q = [];\n      return res;\n    };\n\n    StreamSender.prototype.isAttached = function() {\n      return this.port.isAttached();\n    };\n\n    return StreamSender;\n\n  })();\n\n  exports.StreamSender = StreamSender;\n\n  StreamReceiver = (function() {\n    function StreamReceiver(port1, buffered, process) {\n      this.port = port1;\n      this.buffered = buffered != null ? buffered : false;\n      this.process = process != null ? process : null;\n      this.q = [];\n      this.resetCurrent();\n      this.port.process = (function(_this) {\n        return function(event, payload, index) {\n          var stream;\n          switch (event) {\n            case 'connect':\n              if (typeof _this.process === 'function') {\n                return _this.process('connect', index);\n              }\n              break;\n            case 'begingroup':\n              _this.level++;\n              stream = new Substream(payload);\n              if (_this.level === 1) {\n                _this.root = stream;\n                _this.parent = null;\n              } else {\n                _this.parent = _this.current;\n              }\n              return _this.current = stream;\n            case 'endgroup':\n              if (_this.level > 0) {\n                _this.level--;\n              }\n              if (_this.level === 0) {\n                if (_this.buffered) {\n                  _this.q.push(_this.root);\n                  _this.process('readable', index);\n                } else {\n                  if (typeof _this.process === 'function') {\n                    _this.process('data', _this.root, index);\n                  }\n                }\n                return _this.resetCurrent();\n              } else {\n                _this.parent.push(_this.current);\n                return _this.current = _this.parent;\n              }\n              break;\n            case 'data':\n              if (_this.level === 0) {\n                return _this.q.push(new IP(payload));\n              } else {\n                return _this.current.push(new IP(payload));\n              }\n              break;\n            case 'disconnect':\n              if (typeof _this.process === 'function') {\n                return _this.process('disconnect', index);\n              }\n          }\n        };\n      })(this);\n    }\n\n    StreamReceiver.prototype.resetCurrent = function() {\n      this.level = 0;\n      this.root = null;\n      this.current = null;\n      return this.parent = null;\n    };\n\n    StreamReceiver.prototype.read = function() {\n      if (this.q.length === 0) {\n        return void 0;\n      }\n      return this.q.shift();\n    };\n\n    return StreamReceiver;\n\n  })();\n\n  exports.StreamReceiver = StreamReceiver;\n\n}).call(this);\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(process) {var ComponentLoader, EventEmitter, fbpGraph, internalSocket, registerLoader,\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\ninternalSocket = __webpack_require__(9);\n\nfbpGraph = __webpack_require__(5);\n\nEventEmitter = __webpack_require__(0).EventEmitter;\n\nregisterLoader = __webpack_require__(32);\n\nComponentLoader = (function(superClass) {\n  extend(ComponentLoader, superClass);\n\n  function ComponentLoader(baseDir, options) {\n    this.baseDir = baseDir;\n    this.options = options != null ? options : {};\n    this.components = null;\n    this.libraryIcons = {};\n    this.processing = false;\n    this.ready = false;\n    if (typeof this.setMaxListeners === 'function') {\n      this.setMaxListeners(0);\n    }\n  }\n\n  ComponentLoader.prototype.getModulePrefix = function(name) {\n    if (!name) {\n      return '';\n    }\n    if (name === 'noflo') {\n      return '';\n    }\n    if (name[0] === '@') {\n      name = name.replace(/\\@[a-z\\-]+\\//, '');\n    }\n    return name.replace('noflo-', '');\n  };\n\n  ComponentLoader.prototype.listComponents = function(callback) {\n    if (this.processing) {\n      this.once('ready', (function(_this) {\n        return function() {\n          return callback(null, _this.components);\n        };\n      })(this));\n      return;\n    }\n    if (this.components) {\n      return callback(null, this.components);\n    }\n    this.ready = false;\n    this.processing = true;\n    this.components = {};\n    registerLoader.register(this, (function(_this) {\n      return function(err) {\n        if (err) {\n          if (callback) {\n            return callback(err);\n          }\n          throw err;\n        }\n        _this.processing = false;\n        _this.ready = true;\n        _this.emit('ready', true);\n        if (callback) {\n          return callback(null, _this.components);\n        }\n      };\n    })(this));\n  };\n\n  ComponentLoader.prototype.load = function(name, callback, metadata) {\n    var component, componentName;\n    if (!this.ready) {\n      this.listComponents((function(_this) {\n        return function(err) {\n          if (err) {\n            return callback(err);\n          }\n          return _this.load(name, callback, metadata);\n        };\n      })(this));\n      return;\n    }\n    component = this.components[name];\n    if (!component) {\n      for (componentName in this.components) {\n        if (componentName.split('/')[1] === name) {\n          component = this.components[componentName];\n          break;\n        }\n      }\n      if (!component) {\n        callback(new Error(\"Component \" + name + \" not available with base \" + this.baseDir));\n        return;\n      }\n    }\n    if (this.isGraph(component)) {\n      if (typeof process !== 'undefined' && process.execPath && process.execPath.indexOf('node') !== -1) {\n        process.nextTick((function(_this) {\n          return function() {\n            return _this.loadGraph(name, component, callback, metadata);\n          };\n        })(this));\n      } else {\n        setTimeout((function(_this) {\n          return function() {\n            return _this.loadGraph(name, component, callback, metadata);\n          };\n        })(this), 0);\n      }\n      return;\n    }\n    return this.createComponent(name, component, metadata, (function(_this) {\n      return function(err, instance) {\n        if (err) {\n          return callback(err);\n        }\n        if (!instance) {\n          callback(new Error(\"Component \" + name + \" could not be loaded.\"));\n          return;\n        }\n        if (name === 'Graph') {\n          instance.baseDir = _this.baseDir;\n        }\n        if (typeof name === 'string') {\n          instance.componentName = name;\n        }\n        _this.setIcon(name, instance);\n        return callback(null, instance);\n      };\n    })(this));\n  };\n\n  ComponentLoader.prototype.createComponent = function(name, component, metadata, callback) {\n    var implementation, instance;\n    implementation = component;\n    if (!implementation) {\n      return callback(new Error(\"Component \" + name + \" not available\"));\n    }\n    if (typeof implementation === 'string') {\n      if (typeof registerLoader.dynamicLoad === 'function') {\n        registerLoader.dynamicLoad(name, implementation, metadata, callback);\n        return;\n      }\n      return callback(Error(\"Dynamic loading of \" + implementation + \" for component \" + name + \" not available on this platform.\"));\n    }\n    if (typeof implementation.getComponent === 'function') {\n      instance = implementation.getComponent(metadata);\n    } else if (typeof implementation === 'function') {\n      instance = implementation(metadata);\n    } else {\n      callback(new Error(\"Invalid type \" + (typeof implementation) + \" for component \" + name + \".\"));\n      return;\n    }\n    return callback(null, instance);\n  };\n\n  ComponentLoader.prototype.isGraph = function(cPath) {\n    if (typeof cPath === 'object' && cPath instanceof fbpGraph.Graph) {\n      return true;\n    }\n    if (typeof cPath === 'object' && cPath.processes && cPath.connections) {\n      return true;\n    }\n    if (typeof cPath !== 'string') {\n      return false;\n    }\n    return cPath.indexOf('.fbp') !== -1 || cPath.indexOf('.json') !== -1;\n  };\n\n  ComponentLoader.prototype.loadGraph = function(name, component, callback, metadata) {\n    this.createComponent(name, this.components['Graph'], metadata, (function(_this) {\n      return function(err, graph) {\n        var graphSocket;\n        if (err) {\n          return callback(err);\n        }\n        graphSocket = internalSocket.createSocket();\n        graph.loader = _this;\n        graph.baseDir = _this.baseDir;\n        graph.inPorts.remove('graph');\n        graph.setGraph(component, function(err) {\n          if (err) {\n            return callback(err);\n          }\n          _this.setIcon(name, graph);\n          return callback(null, graph);\n        });\n      };\n    })(this));\n  };\n\n  ComponentLoader.prototype.setIcon = function(name, instance) {\n    var componentName, library, ref;\n    if (!instance.getIcon || instance.getIcon()) {\n      return;\n    }\n    ref = name.split('/'), library = ref[0], componentName = ref[1];\n    if (componentName && this.getLibraryIcon(library)) {\n      instance.setIcon(this.getLibraryIcon(library));\n      return;\n    }\n    if (instance.isSubgraph()) {\n      instance.setIcon('sitemap');\n      return;\n    }\n    instance.setIcon('square');\n  };\n\n  ComponentLoader.prototype.getLibraryIcon = function(prefix) {\n    if (this.libraryIcons[prefix]) {\n      return this.libraryIcons[prefix];\n    }\n    return null;\n  };\n\n  ComponentLoader.prototype.setLibraryIcon = function(prefix, icon) {\n    return this.libraryIcons[prefix] = icon;\n  };\n\n  ComponentLoader.prototype.normalizeName = function(packageId, name) {\n    var fullName, prefix;\n    prefix = this.getModulePrefix(packageId);\n    fullName = prefix + \"/\" + name;\n    if (!packageId) {\n      fullName = name;\n    }\n    return fullName;\n  };\n\n  ComponentLoader.prototype.registerComponent = function(packageId, name, cPath, callback) {\n    var fullName;\n    fullName = this.normalizeName(packageId, name);\n    this.components[fullName] = cPath;\n    if (callback) {\n      return callback();\n    }\n  };\n\n  ComponentLoader.prototype.registerGraph = function(packageId, name, gPath, callback) {\n    return this.registerComponent(packageId, name, gPath, callback);\n  };\n\n  ComponentLoader.prototype.registerLoader = function(loader, callback) {\n    return loader(this, callback);\n  };\n\n  ComponentLoader.prototype.setSource = function(packageId, name, source, language, callback) {\n    if (!registerLoader.setSource) {\n      return callback(new Error('setSource not allowed'));\n    }\n    if (!this.ready) {\n      this.listComponents((function(_this) {\n        return function(err) {\n          if (err) {\n            return callback(err);\n          }\n          return _this.setSource(packageId, name, source, language, callback);\n        };\n      })(this));\n      return;\n    }\n    return registerLoader.setSource(this, packageId, name, source, language, callback);\n  };\n\n  ComponentLoader.prototype.getSource = function(name, callback) {\n    if (!registerLoader.getSource) {\n      return callback(new Error('getSource not allowed'));\n    }\n    if (!this.ready) {\n      this.listComponents((function(_this) {\n        return function(err) {\n          if (err) {\n            return callback(err);\n          }\n          return _this.getSource(name, callback);\n        };\n      })(this));\n      return;\n    }\n    return registerLoader.getSource(this, name, callback);\n  };\n\n  ComponentLoader.prototype.clear = function() {\n    this.components = null;\n    this.ready = false;\n    return this.processing = false;\n  };\n\n  return ComponentLoader;\n\n})(EventEmitter);\n\nexports.ComponentLoader = ComponentLoader;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar EventEmitter, Port, platform,\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nEventEmitter = __webpack_require__(0).EventEmitter;\n\nplatform = __webpack_require__(7);\n\nPort = (function(superClass) {\n  extend(Port, superClass);\n\n  Port.prototype.description = '';\n\n  Port.prototype.required = true;\n\n  function Port(type) {\n    this.type = type;\n    platform.deprecated('noflo.Port is deprecated. Please port to noflo.InPort/noflo.OutPort');\n    if (!this.type) {\n      this.type = 'all';\n    }\n    if (this.type === 'integer') {\n      this.type = 'int';\n    }\n    this.sockets = [];\n    this.from = null;\n    this.node = null;\n    this.name = null;\n  }\n\n  Port.prototype.getId = function() {\n    if (!(this.node && this.name)) {\n      return 'Port';\n    }\n    return this.node + \" \" + (this.name.toUpperCase());\n  };\n\n  Port.prototype.getDataType = function() {\n    return this.type;\n  };\n\n  Port.prototype.getDescription = function() {\n    return this.description;\n  };\n\n  Port.prototype.attach = function(socket) {\n    this.sockets.push(socket);\n    return this.attachSocket(socket);\n  };\n\n  Port.prototype.attachSocket = function(socket, localId) {\n    if (localId == null) {\n      localId = null;\n    }\n    this.emit(\"attach\", socket, localId);\n    this.from = socket.from;\n    if (socket.setMaxListeners) {\n      socket.setMaxListeners(0);\n    }\n    socket.on(\"connect\", (function(_this) {\n      return function() {\n        return _this.emit(\"connect\", socket, localId);\n      };\n    })(this));\n    socket.on(\"begingroup\", (function(_this) {\n      return function(group) {\n        return _this.emit(\"begingroup\", group, localId);\n      };\n    })(this));\n    socket.on(\"data\", (function(_this) {\n      return function(data) {\n        return _this.emit(\"data\", data, localId);\n      };\n    })(this));\n    socket.on(\"endgroup\", (function(_this) {\n      return function(group) {\n        return _this.emit(\"endgroup\", group, localId);\n      };\n    })(this));\n    return socket.on(\"disconnect\", (function(_this) {\n      return function() {\n        return _this.emit(\"disconnect\", socket, localId);\n      };\n    })(this));\n  };\n\n  Port.prototype.connect = function() {\n    var i, len, ref, results, socket;\n    if (this.sockets.length === 0) {\n      throw new Error((this.getId()) + \": No connections available\");\n    }\n    ref = this.sockets;\n    results = [];\n    for (i = 0, len = ref.length; i < len; i++) {\n      socket = ref[i];\n      results.push(socket.connect());\n    }\n    return results;\n  };\n\n  Port.prototype.beginGroup = function(group) {\n    if (this.sockets.length === 0) {\n      throw new Error((this.getId()) + \": No connections available\");\n    }\n    return this.sockets.forEach(function(socket) {\n      if (socket.isConnected()) {\n        return socket.beginGroup(group);\n      }\n      socket.once('connect', function() {\n        return socket.beginGroup(group);\n      });\n      return socket.connect();\n    });\n  };\n\n  Port.prototype.send = function(data) {\n    if (this.sockets.length === 0) {\n      throw new Error((this.getId()) + \": No connections available\");\n    }\n    return this.sockets.forEach(function(socket) {\n      if (socket.isConnected()) {\n        return socket.send(data);\n      }\n      socket.once('connect', function() {\n        return socket.send(data);\n      });\n      return socket.connect();\n    });\n  };\n\n  Port.prototype.endGroup = function() {\n    var i, len, ref, results, socket;\n    if (this.sockets.length === 0) {\n      throw new Error((this.getId()) + \": No connections available\");\n    }\n    ref = this.sockets;\n    results = [];\n    for (i = 0, len = ref.length; i < len; i++) {\n      socket = ref[i];\n      results.push(socket.endGroup());\n    }\n    return results;\n  };\n\n  Port.prototype.disconnect = function() {\n    var i, len, ref, results, socket;\n    if (this.sockets.length === 0) {\n      throw new Error((this.getId()) + \": No connections available\");\n    }\n    ref = this.sockets;\n    results = [];\n    for (i = 0, len = ref.length; i < len; i++) {\n      socket = ref[i];\n      results.push(socket.disconnect());\n    }\n    return results;\n  };\n\n  Port.prototype.detach = function(socket) {\n    var index;\n    if (this.sockets.length === 0) {\n      return;\n    }\n    if (!socket) {\n      socket = this.sockets[0];\n    }\n    index = this.sockets.indexOf(socket);\n    if (index === -1) {\n      return;\n    }\n    if (this.isAddressable()) {\n      this.sockets[index] = void 0;\n      this.emit('detach', socket, index);\n      return;\n    }\n    this.sockets.splice(index, 1);\n    return this.emit(\"detach\", socket);\n  };\n\n  Port.prototype.isConnected = function() {\n    var connected;\n    connected = false;\n    this.sockets.forEach(function(socket) {\n      if (socket.isConnected()) {\n        return connected = true;\n      }\n    });\n    return connected;\n  };\n\n  Port.prototype.isAddressable = function() {\n    return false;\n  };\n\n  Port.prototype.isRequired = function() {\n    return this.required;\n  };\n\n  Port.prototype.isAttached = function() {\n    if (this.sockets.length > 0) {\n      return true;\n    }\n    return false;\n  };\n\n  Port.prototype.listAttached = function() {\n    var attached, i, idx, len, ref, socket;\n    attached = [];\n    ref = this.sockets;\n    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {\n      socket = ref[idx];\n      if (!socket) {\n        continue;\n      }\n      attached.push(idx);\n    }\n    return attached;\n  };\n\n  Port.prototype.canAttach = function() {\n    return true;\n  };\n\n  Port.prototype.clear = function() {};\n\n  return Port;\n\n})(EventEmitter);\n\nexports.Port = Port;\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports) {\n\nvar IP, StreamReceiver, StreamSender, Substream;\n\nIP = (function() {\n  function IP(data1) {\n    this.data = data1;\n  }\n\n  IP.prototype.sendTo = function(port) {\n    return port.send(this.data);\n  };\n\n  IP.prototype.getValue = function() {\n    return this.data;\n  };\n\n  IP.prototype.toObject = function() {\n    return this.data;\n  };\n\n  return IP;\n\n})();\n\nexports.IP = IP;\n\nSubstream = (function() {\n  function Substream(key) {\n    this.key = key;\n    this.value = [];\n  }\n\n  Substream.prototype.push = function(value) {\n    return this.value.push(value);\n  };\n\n  Substream.prototype.sendTo = function(port) {\n    var i, ip, len, ref;\n    port.beginGroup(this.key);\n    ref = this.value;\n    for (i = 0, len = ref.length; i < len; i++) {\n      ip = ref[i];\n      if (ip instanceof Substream || ip instanceof IP) {\n        ip.sendTo(port);\n      } else {\n        port.send(ip);\n      }\n    }\n    return port.endGroup(this.key);\n  };\n\n  Substream.prototype.getKey = function() {\n    return this.key;\n  };\n\n  Substream.prototype.getValue = function() {\n    var hasKeys, i, ip, len, obj, ref, res, val;\n    switch (this.value.length) {\n      case 0:\n        return null;\n      case 1:\n        if (typeof this.value[0].getValue === 'function') {\n          if (this.value[0] instanceof Substream) {\n            obj = {};\n            obj[this.value[0].key] = this.value[0].getValue();\n            return obj;\n          } else {\n            return this.value[0].getValue();\n          }\n        } else {\n          return this.value[0];\n        }\n        break;\n      default:\n        res = [];\n        hasKeys = false;\n        ref = this.value;\n        for (i = 0, len = ref.length; i < len; i++) {\n          ip = ref[i];\n          val = typeof ip.getValue === 'function' ? ip.getValue() : ip;\n          if (ip instanceof Substream) {\n            obj = {};\n            obj[ip.key] = ip.getValue();\n            res.push(obj);\n          } else {\n            res.push(val);\n          }\n        }\n        return res;\n    }\n  };\n\n  Substream.prototype.toObject = function() {\n    var obj;\n    obj = {};\n    obj[this.key] = this.getValue();\n    return obj;\n  };\n\n  return Substream;\n\n})();\n\nexports.Substream = Substream;\n\nStreamSender = (function() {\n  function StreamSender(port1, ordered) {\n    this.port = port1;\n    this.ordered = ordered != null ? ordered : false;\n    this.q = [];\n    this.resetCurrent();\n    this.resolved = false;\n  }\n\n  StreamSender.prototype.resetCurrent = function() {\n    this.level = 0;\n    this.current = null;\n    return this.stack = [];\n  };\n\n  StreamSender.prototype.beginGroup = function(group) {\n    var stream;\n    this.level++;\n    stream = new Substream(group);\n    this.stack.push(stream);\n    this.current = stream;\n    return this;\n  };\n\n  StreamSender.prototype.endGroup = function() {\n    var parent, value;\n    if (this.level > 0) {\n      this.level--;\n    }\n    value = this.stack.pop();\n    if (this.level === 0) {\n      this.q.push(value);\n      this.resetCurrent();\n    } else {\n      parent = this.stack[this.stack.length - 1];\n      parent.push(value);\n      this.current = parent;\n    }\n    return this;\n  };\n\n  StreamSender.prototype.send = function(data) {\n    if (this.level === 0) {\n      this.q.push(new IP(data));\n    } else {\n      this.current.push(new IP(data));\n    }\n    return this;\n  };\n\n  StreamSender.prototype.done = function() {\n    if (this.ordered) {\n      this.resolved = true;\n    } else {\n      this.flush();\n    }\n    return this;\n  };\n\n  StreamSender.prototype.disconnect = function() {\n    this.q.push(null);\n    return this;\n  };\n\n  StreamSender.prototype.flush = function() {\n    var i, ip, len, ref, res;\n    res = false;\n    if (this.q.length > 0) {\n      ref = this.q;\n      for (i = 0, len = ref.length; i < len; i++) {\n        ip = ref[i];\n        if (ip === null) {\n          if (this.port.isConnected()) {\n            this.port.disconnect();\n          }\n        } else {\n          ip.sendTo(this.port);\n        }\n      }\n      res = true;\n    }\n    this.q = [];\n    return res;\n  };\n\n  StreamSender.prototype.isAttached = function() {\n    return this.port.isAttached();\n  };\n\n  return StreamSender;\n\n})();\n\nexports.StreamSender = StreamSender;\n\nStreamReceiver = (function() {\n  function StreamReceiver(port1, buffered, process) {\n    this.port = port1;\n    this.buffered = buffered != null ? buffered : false;\n    this.process = process != null ? process : null;\n    this.q = [];\n    this.resetCurrent();\n    this.port.process = (function(_this) {\n      return function(event, payload, index) {\n        var stream;\n        switch (event) {\n          case 'connect':\n            if (typeof _this.process === 'function') {\n              return _this.process('connect', index);\n            }\n            break;\n          case 'begingroup':\n            _this.level++;\n            stream = new Substream(payload);\n            if (_this.level === 1) {\n              _this.root = stream;\n              _this.parent = null;\n            } else {\n              _this.parent = _this.current;\n            }\n            return _this.current = stream;\n          case 'endgroup':\n            if (_this.level > 0) {\n              _this.level--;\n            }\n            if (_this.level === 0) {\n              if (_this.buffered) {\n                _this.q.push(_this.root);\n                _this.process('readable', index);\n              } else {\n                if (typeof _this.process === 'function') {\n                  _this.process('data', _this.root, index);\n                }\n              }\n              return _this.resetCurrent();\n            } else {\n              _this.parent.push(_this.current);\n              return _this.current = _this.parent;\n            }\n            break;\n          case 'data':\n            if (_this.level === 0) {\n              return _this.q.push(new IP(payload));\n            } else {\n              return _this.current.push(new IP(payload));\n            }\n            break;\n          case 'disconnect':\n            if (typeof _this.process === 'function') {\n              return _this.process('disconnect', index);\n            }\n        }\n      };\n    })(this);\n  }\n\n  StreamReceiver.prototype.resetCurrent = function() {\n    this.level = 0;\n    this.root = null;\n    this.current = null;\n    return this.parent = null;\n  };\n\n  StreamReceiver.prototype.read = function() {\n    if (this.q.length === 0) {\n      return void 0;\n    }\n    return this.q.shift();\n  };\n\n  return StreamReceiver;\n\n})();\n\nexports.StreamReceiver = StreamReceiver;\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports) {\n\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n(function() {\n  var BasePort, EventEmitter, validTypes,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  EventEmitter = __webpack_require__(0).EventEmitter;\n\n  validTypes = ['all', 'string', 'number', 'int', 'object', 'array', 'boolean', 'color', 'date', 'bang', 'function', 'buffer', 'stream'];\n\n  BasePort = (function(superClass) {\n    extend(BasePort, superClass);\n\n    function BasePort(options) {\n      this.handleOptions(options);\n      this.sockets = [];\n      this.node = null;\n      this.name = null;\n    }\n\n    BasePort.prototype.handleOptions = function(options) {\n      if (!options) {\n        options = {};\n      }\n      if (!options.datatype) {\n        options.datatype = 'all';\n      }\n      if (options.required === void 0) {\n        options.required = false;\n      }\n      if (options.datatype === 'integer') {\n        options.datatype = 'int';\n      }\n      if (validTypes.indexOf(options.datatype) === -1) {\n        throw new Error(\"Invalid port datatype '\" + options.datatype + \"' specified, valid are \" + (validTypes.join(', ')));\n      }\n      if (options.type && options.type.indexOf('/') === -1) {\n        throw new Error(\"Invalid port type '\" + options.type + \"' specified. Should be URL or MIME type\");\n      }\n      return this.options = options;\n    };\n\n    BasePort.prototype.getId = function() {\n      if (!(this.node && this.name)) {\n        return 'Port';\n      }\n      return this.node + \" \" + (this.name.toUpperCase());\n    };\n\n    BasePort.prototype.getDataType = function() {\n      return this.options.datatype;\n    };\n\n    BasePort.prototype.getDescription = function() {\n      return this.options.description;\n    };\n\n    BasePort.prototype.attach = function(socket, index) {\n      if (index == null) {\n        index = null;\n      }\n      if (!this.isAddressable() || index === null) {\n        index = this.sockets.length;\n      }\n      this.sockets[index] = socket;\n      this.attachSocket(socket, index);\n      if (this.isAddressable()) {\n        this.emit('attach', socket, index);\n        return;\n      }\n      return this.emit('attach', socket);\n    };\n\n    BasePort.prototype.attachSocket = function() {};\n\n    BasePort.prototype.detach = function(socket) {\n      var index;\n      index = this.sockets.indexOf(socket);\n      if (index === -1) {\n        return;\n      }\n      this.sockets[index] = void 0;\n      if (this.isAddressable()) {\n        this.emit('detach', socket, index);\n        return;\n      }\n      return this.emit('detach', socket);\n    };\n\n    BasePort.prototype.isAddressable = function() {\n      if (this.options.addressable) {\n        return true;\n      }\n      return false;\n    };\n\n    BasePort.prototype.isBuffered = function() {\n      if (this.options.buffered) {\n        return true;\n      }\n      return false;\n    };\n\n    BasePort.prototype.isRequired = function() {\n      if (this.options.required) {\n        return true;\n      }\n      return false;\n    };\n\n    BasePort.prototype.isAttached = function(socketId) {\n      if (socketId == null) {\n        socketId = null;\n      }\n      if (this.isAddressable() && socketId !== null) {\n        if (this.sockets[socketId]) {\n          return true;\n        }\n        return false;\n      }\n      if (this.sockets.length) {\n        return true;\n      }\n      return false;\n    };\n\n    BasePort.prototype.listAttached = function() {\n      var attached, i, idx, len, ref, socket;\n      attached = [];\n      ref = this.sockets;\n      for (idx = i = 0, len = ref.length; i < len; idx = ++i) {\n        socket = ref[idx];\n        if (!socket) {\n          continue;\n        }\n        attached.push(idx);\n      }\n      return attached;\n    };\n\n    BasePort.prototype.isConnected = function(socketId) {\n      var connected;\n      if (socketId == null) {\n        socketId = null;\n      }\n      if (this.isAddressable()) {\n        if (socketId === null) {\n          throw new Error((this.getId()) + \": Socket ID required\");\n        }\n        if (!this.sockets[socketId]) {\n          throw new Error((this.getId()) + \": Socket \" + socketId + \" not available\");\n        }\n        return this.sockets[socketId].isConnected();\n      }\n      connected = false;\n      this.sockets.forEach(function(socket) {\n        if (!socket) {\n          return;\n        }\n        if (socket.isConnected()) {\n          return connected = true;\n        }\n      });\n      return connected;\n    };\n\n    BasePort.prototype.canAttach = function() {\n      return true;\n    };\n\n    return BasePort;\n\n  })(EventEmitter);\n\n  module.exports = BasePort;\n\n}).call(this);\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n(function() {\n  var Component, EventEmitter, IP, ProcessContext, ProcessInput, ProcessOutput, debug, debugBrackets, debugSend, ports,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty,\n    slice = [].slice;\n\n  EventEmitter = __webpack_require__(0).EventEmitter;\n\n  ports = __webpack_require__(22);\n\n  IP = __webpack_require__(2);\n\n  debug = __webpack_require__(4)('noflo:component');\n\n  debugBrackets = __webpack_require__(4)('noflo:component:brackets');\n\n  debugSend = __webpack_require__(4)('noflo:component:send');\n\n  Component = (function(superClass) {\n    extend(Component, superClass);\n\n    Component.prototype.description = '';\n\n    Component.prototype.icon = null;\n\n    function Component(options) {\n      this.error = bind(this.error, this);\n      var ref, ref1, ref2;\n      if (!options) {\n        options = {};\n      }\n      if (!options.inPorts) {\n        options.inPorts = {};\n      }\n      if (options.inPorts instanceof ports.InPorts) {\n        this.inPorts = options.inPorts;\n      } else {\n        this.inPorts = new ports.InPorts(options.inPorts);\n      }\n      if (!options.outPorts) {\n        options.outPorts = {};\n      }\n      if (options.outPorts instanceof ports.OutPorts) {\n        this.outPorts = options.outPorts;\n      } else {\n        this.outPorts = new ports.OutPorts(options.outPorts);\n      }\n      if (options.icon) {\n        this.icon = options.icon;\n      }\n      if (options.description) {\n        this.description = options.description;\n      }\n      this.started = false;\n      this.load = 0;\n      this.ordered = (ref = options.ordered) != null ? ref : false;\n      this.autoOrdering = (ref1 = options.autoOrdering) != null ? ref1 : null;\n      this.outputQ = [];\n      this.bracketContext = {\n        \"in\": {},\n        out: {}\n      };\n      this.activateOnInput = (ref2 = options.activateOnInput) != null ? ref2 : true;\n      this.forwardBrackets = {\n        \"in\": ['out', 'error']\n      };\n      if ('forwardBrackets' in options) {\n        this.forwardBrackets = options.forwardBrackets;\n      }\n      if (typeof options.process === 'function') {\n        this.process(options.process);\n      }\n    }\n\n    Component.prototype.getDescription = function() {\n      return this.description;\n    };\n\n    Component.prototype.isReady = function() {\n      return true;\n    };\n\n    Component.prototype.isSubgraph = function() {\n      return false;\n    };\n\n    Component.prototype.setIcon = function(icon) {\n      this.icon = icon;\n      return this.emit('icon', this.icon);\n    };\n\n    Component.prototype.getIcon = function() {\n      return this.icon;\n    };\n\n    Component.prototype.error = function(e, groups, errorPort, scope) {\n      var group, i, j, len1, len2;\n      if (groups == null) {\n        groups = [];\n      }\n      if (errorPort == null) {\n        errorPort = 'error';\n      }\n      if (scope == null) {\n        scope = null;\n      }\n      if (this.outPorts[errorPort] && (this.outPorts[errorPort].isAttached() || !this.outPorts[errorPort].isRequired())) {\n        for (i = 0, len1 = groups.length; i < len1; i++) {\n          group = groups[i];\n          this.outPorts[errorPort].openBracket(group, {\n            scope: scope\n          });\n        }\n        this.outPorts[errorPort].data(e, {\n          scope: scope\n        });\n        for (j = 0, len2 = groups.length; j < len2; j++) {\n          group = groups[j];\n          this.outPorts[errorPort].closeBracket(group, {\n            scope: scope\n          });\n        }\n        return;\n      }\n      throw e;\n    };\n\n    Component.prototype.setUp = function(callback) {\n      return callback();\n    };\n\n    Component.prototype.tearDown = function(callback) {\n      return callback();\n    };\n\n    Component.prototype.start = function(callback) {\n      if (this.isStarted()) {\n        return callback();\n      }\n      return this.setUp((function(_this) {\n        return function(err) {\n          if (err) {\n            return callback(err);\n          }\n          _this.started = true;\n          _this.emit('start');\n          return callback(null);\n        };\n      })(this));\n    };\n\n    Component.prototype.shutdown = function(callback) {\n      var finalize;\n      finalize = (function(_this) {\n        return function() {\n          var inPort, inPorts, portName;\n          inPorts = _this.inPorts.ports || _this.inPorts;\n          for (portName in inPorts) {\n            inPort = inPorts[portName];\n            if (typeof inPort.clear !== 'function') {\n              continue;\n            }\n            inPort.clear();\n          }\n          _this.bracketContext = {\n            \"in\": {},\n            out: {}\n          };\n          if (!_this.isStarted()) {\n            return callback();\n          }\n          _this.started = false;\n          _this.emit('end');\n          return callback();\n        };\n      })(this);\n      return this.tearDown((function(_this) {\n        return function(err) {\n          var checkLoad;\n          if (err) {\n            return callback(err);\n          }\n          if (_this.load > 0) {\n            checkLoad = function(load) {\n              if (load > 0) {\n                return;\n              }\n              this.removeListener('deactivate', checkLoad);\n              return finalize();\n            };\n            _this.on('deactivate', checkLoad);\n            return;\n          }\n          return finalize();\n        };\n      })(this));\n    };\n\n    Component.prototype.isStarted = function() {\n      return this.started;\n    };\n\n    Component.prototype.prepareForwarding = function() {\n      var i, inPort, len1, outPort, outPorts, ref, results, tmp;\n      ref = this.forwardBrackets;\n      results = [];\n      for (inPort in ref) {\n        outPorts = ref[inPort];\n        if (!(inPort in this.inPorts.ports)) {\n          delete this.forwardBrackets[inPort];\n          continue;\n        }\n        tmp = [];\n        for (i = 0, len1 = outPorts.length; i < len1; i++) {\n          outPort = outPorts[i];\n          if (outPort in this.outPorts.ports) {\n            tmp.push(outPort);\n          }\n        }\n        if (tmp.length === 0) {\n          results.push(delete this.forwardBrackets[inPort]);\n        } else {\n          results.push(this.forwardBrackets[inPort] = tmp);\n        }\n      }\n      return results;\n    };\n\n    Component.prototype.isLegacy = function() {\n      if (this.handle) {\n        return false;\n      }\n      if (this._wpData) {\n        return false;\n      }\n      return true;\n    };\n\n    Component.prototype.process = function(handle) {\n      var fn, name, port, ref;\n      if (typeof handle !== 'function') {\n        throw new Error(\"Process handler must be a function\");\n      }\n      if (!this.inPorts) {\n        throw new Error(\"Component ports must be defined before process function\");\n      }\n      this.prepareForwarding();\n      this.handle = handle;\n      ref = this.inPorts.ports;\n      fn = (function(_this) {\n        return function(name, port) {\n          if (!port.name) {\n            port.name = name;\n          }\n          return port.on('ip', function(ip) {\n            return _this.handleIP(ip, port);\n          });\n        };\n      })(this);\n      for (name in ref) {\n        port = ref[name];\n        fn(name, port);\n      }\n      return this;\n    };\n\n    Component.prototype.isForwardingInport = function(port) {\n      var portName;\n      if (typeof port === 'string') {\n        portName = port;\n      } else {\n        portName = port.name;\n      }\n      if (portName in this.forwardBrackets) {\n        return true;\n      }\n      return false;\n    };\n\n    Component.prototype.isForwardingOutport = function(inport, outport) {\n      var inportName, outportName;\n      if (typeof inport === 'string') {\n        inportName = inport;\n      } else {\n        inportName = inport.name;\n      }\n      if (typeof outport === 'string') {\n        outportName = outport;\n      } else {\n        outportName = outport.name;\n      }\n      if (!this.forwardBrackets[inportName]) {\n        return false;\n      }\n      if (this.forwardBrackets[inportName].indexOf(outportName) !== -1) {\n        return true;\n      }\n      return false;\n    };\n\n    Component.prototype.isOrdered = function() {\n      if (this.ordered) {\n        return true;\n      }\n      if (this.autoOrdering) {\n        return true;\n      }\n      return false;\n    };\n\n    Component.prototype.handleIP = function(ip, port) {\n      var buf, context, dataPackets, e, error1, input, output, result;\n      if (!port.options.triggering) {\n        return;\n      }\n      if (ip.type === 'openBracket' && this.autoOrdering === null && !this.ordered) {\n        debug(this.nodeId + \" port '\" + port.name + \"' entered auto-ordering mode\");\n        this.autoOrdering = true;\n      }\n      result = {};\n      if (this.isForwardingInport(port)) {\n        if (ip.type === 'openBracket') {\n          return;\n        }\n        if (ip.type === 'closeBracket') {\n          buf = port.getBuffer(ip.scope, ip.index);\n          dataPackets = buf.filter(function(ip) {\n            return ip.type === 'data';\n          });\n          if (this.outputQ.length >= this.load && dataPackets.length === 0) {\n            if (buf[0] !== ip) {\n              return;\n            }\n            port.get(ip.scope, ip.index);\n            context = this.getBracketContext('in', port.name, ip.scope, ip.index).pop();\n            context.closeIp = ip;\n            debugBrackets(this.nodeId + \" closeBracket-C from '\" + context.source + \"' to \" + context.ports + \": '\" + ip.data + \"'\");\n            result = {\n              __resolved: true,\n              __bracketClosingAfter: [context]\n            };\n            this.outputQ.push(result);\n            this.processOutputQueue();\n          }\n          if (!dataPackets.length) {\n            return;\n          }\n        }\n      }\n      context = new ProcessContext(ip, this, port, result);\n      input = new ProcessInput(this.inPorts, context);\n      output = new ProcessOutput(this.outPorts, context);\n      try {\n        this.handle(input, output, context);\n      } catch (error1) {\n        e = error1;\n        this.deactivate(context);\n        output.sendDone(e);\n      }\n      if (context.activated) {\n        return;\n      }\n      if (port.isAddressable()) {\n        debug(this.nodeId + \" packet on '\" + port.name + \"[\" + ip.index + \"]' didn't match preconditions: \" + ip.type);\n        return;\n      }\n      debug(this.nodeId + \" packet on '\" + port.name + \"' didn't match preconditions: \" + ip.type);\n    };\n\n    Component.prototype.getBracketContext = function(type, port, scope, idx) {\n      var index, name, portsList, ref;\n      ref = ports.normalizePortName(port), name = ref.name, index = ref.index;\n      if (idx != null) {\n        index = idx;\n      }\n      portsList = type === 'in' ? this.inPorts : this.outPorts;\n      if (portsList[name].isAddressable()) {\n        port = name + \"[\" + index + \"]\";\n      }\n      if (!this.bracketContext[type][port]) {\n        this.bracketContext[type][port] = {};\n      }\n      if (!this.bracketContext[type][port][scope]) {\n        this.bracketContext[type][port][scope] = [];\n      }\n      return this.bracketContext[type][port][scope];\n    };\n\n    Component.prototype.addToResult = function(result, port, ip, before) {\n      var idx, index, method, name, ref;\n      if (before == null) {\n        before = false;\n      }\n      ref = ports.normalizePortName(port), name = ref.name, index = ref.index;\n      method = before ? 'unshift' : 'push';\n      if (this.outPorts[name].isAddressable()) {\n        idx = index ? parseInt(index) : ip.index;\n        if (!result[name]) {\n          result[name] = {};\n        }\n        if (!result[name][idx]) {\n          result[name][idx] = [];\n        }\n        ip.index = idx;\n        result[name][idx][method](ip);\n        return;\n      }\n      if (!result[name]) {\n        result[name] = [];\n      }\n      return result[name][method](ip);\n    };\n\n    Component.prototype.getForwardableContexts = function(inport, outport, contexts) {\n      var forwardable, index, name, ref;\n      ref = ports.normalizePortName(outport), name = ref.name, index = ref.index;\n      forwardable = [];\n      contexts.forEach((function(_this) {\n        return function(ctx, idx) {\n          var outContext;\n          if (!_this.isForwardingOutport(inport, name)) {\n            return;\n          }\n          if (ctx.ports.indexOf(outport) !== -1) {\n            return;\n          }\n          outContext = _this.getBracketContext('out', name, ctx.ip.scope, index)[idx];\n          if (outContext) {\n            if (outContext.ip.data === ctx.ip.data && outContext.ports.indexOf(outport) !== -1) {\n              return;\n            }\n          }\n          return forwardable.push(ctx);\n        };\n      })(this));\n      return forwardable;\n    };\n\n    Component.prototype.addBracketForwards = function(result) {\n      var context, i, ipClone, j, k, l, len1, len2, len3, len4, port, ref, ref1, ref2, ref3, ref4, ref5;\n      if ((ref = result.__bracketClosingBefore) != null ? ref.length : void 0) {\n        ref1 = result.__bracketClosingBefore;\n        for (i = 0, len1 = ref1.length; i < len1; i++) {\n          context = ref1[i];\n          debugBrackets(this.nodeId + \" closeBracket-A from '\" + context.source + \"' to \" + context.ports + \": '\" + context.closeIp.data + \"'\");\n          if (!context.ports.length) {\n            continue;\n          }\n          ref2 = context.ports;\n          for (j = 0, len2 = ref2.length; j < len2; j++) {\n            port = ref2[j];\n            ipClone = context.closeIp.clone();\n            this.addToResult(result, port, ipClone, true);\n            this.getBracketContext('out', port, ipClone.scope).pop();\n          }\n        }\n      }\n      if (result.__bracketContext) {\n        Object.keys(result.__bracketContext).reverse().forEach((function(_this) {\n          return function(inport) {\n            var ctx, datas, forwardedOpens, idx, idxIps, ip, ips, k, l, len3, len4, len5, m, outport, portIdentifier, results, unforwarded;\n            context = result.__bracketContext[inport];\n            if (!context.length) {\n              return;\n            }\n            results = [];\n            for (outport in result) {\n              ips = result[outport];\n              if (outport.indexOf('__') === 0) {\n                continue;\n              }\n              if (_this.outPorts[outport].isAddressable()) {\n                for (idx in ips) {\n                  idxIps = ips[idx];\n                  datas = idxIps.filter(function(ip) {\n                    return ip.type === 'data';\n                  });\n                  if (!datas.length) {\n                    continue;\n                  }\n                  portIdentifier = outport + \"[\" + idx + \"]\";\n                  unforwarded = _this.getForwardableContexts(inport, portIdentifier, context);\n                  if (!unforwarded.length) {\n                    continue;\n                  }\n                  forwardedOpens = [];\n                  for (k = 0, len3 = unforwarded.length; k < len3; k++) {\n                    ctx = unforwarded[k];\n                    debugBrackets(_this.nodeId + \" openBracket from '\" + inport + \"' to '\" + portIdentifier + \"': '\" + ctx.ip.data + \"'\");\n                    ipClone = ctx.ip.clone();\n                    ipClone.index = parseInt(idx);\n                    forwardedOpens.push(ipClone);\n                    ctx.ports.push(portIdentifier);\n                    _this.getBracketContext('out', outport, ctx.ip.scope, idx).push(ctx);\n                  }\n                  forwardedOpens.reverse();\n                  for (l = 0, len4 = forwardedOpens.length; l < len4; l++) {\n                    ip = forwardedOpens[l];\n                    _this.addToResult(result, outport, ip, true);\n                  }\n                }\n                continue;\n              }\n              datas = ips.filter(function(ip) {\n                return ip.type === 'data';\n              });\n              if (!datas.length) {\n                continue;\n              }\n              unforwarded = _this.getForwardableContexts(inport, outport, context);\n              if (!unforwarded.length) {\n                continue;\n              }\n              forwardedOpens = [];\n              for (m = 0, len5 = unforwarded.length; m < len5; m++) {\n                ctx = unforwarded[m];\n                debugBrackets(_this.nodeId + \" openBracket from '\" + inport + \"' to '\" + outport + \"': '\" + ctx.ip.data + \"'\");\n                forwardedOpens.push(ctx.ip.clone());\n                ctx.ports.push(outport);\n                _this.getBracketContext('out', outport, ctx.ip.scope).push(ctx);\n              }\n              forwardedOpens.reverse();\n              results.push((function() {\n                var len6, n, results1;\n                results1 = [];\n                for (n = 0, len6 = forwardedOpens.length; n < len6; n++) {\n                  ip = forwardedOpens[n];\n                  results1.push(this.addToResult(result, outport, ip, true));\n                }\n                return results1;\n              }).call(_this));\n            }\n            return results;\n          };\n        })(this));\n      }\n      if ((ref3 = result.__bracketClosingAfter) != null ? ref3.length : void 0) {\n        ref4 = result.__bracketClosingAfter;\n        for (k = 0, len3 = ref4.length; k < len3; k++) {\n          context = ref4[k];\n          debugBrackets(this.nodeId + \" closeBracket-B from '\" + context.source + \"' to \" + context.ports + \": '\" + context.closeIp.data + \"'\");\n          if (!context.ports.length) {\n            continue;\n          }\n          ref5 = context.ports;\n          for (l = 0, len4 = ref5.length; l < len4; l++) {\n            port = ref5[l];\n            ipClone = context.closeIp.clone();\n            this.addToResult(result, port, ipClone, false);\n            this.getBracketContext('out', port, ipClone.scope).pop();\n          }\n        }\n      }\n      delete result.__bracketClosingBefore;\n      delete result.__bracketContext;\n      return delete result.__bracketClosingAfter;\n    };\n\n    Component.prototype.processOutputQueue = function() {\n      var i, idx, idxIps, ip, ips, j, len1, len2, port, portIdentifier, result, results;\n      results = [];\n      while (this.outputQ.length > 0) {\n        result = this.outputQ[0];\n        if (!result.__resolved) {\n          break;\n        }\n        this.addBracketForwards(result);\n        for (port in result) {\n          ips = result[port];\n          if (port.indexOf('__') === 0) {\n            continue;\n          }\n          if (this.outPorts.ports[port].isAddressable()) {\n            for (idx in ips) {\n              idxIps = ips[idx];\n              idx = parseInt(idx);\n              if (!this.outPorts.ports[port].isAttached(idx)) {\n                continue;\n              }\n              for (i = 0, len1 = idxIps.length; i < len1; i++) {\n                ip = idxIps[i];\n                portIdentifier = port + \"[\" + ip.index + \"]\";\n                if (ip.type === 'openBracket') {\n                  debugSend(this.nodeId + \" sending \" + portIdentifier + \" < '\" + ip.data + \"'\");\n                } else if (ip.type === 'closeBracket') {\n                  debugSend(this.nodeId + \" sending \" + portIdentifier + \" > '\" + ip.data + \"'\");\n                } else {\n                  debugSend(this.nodeId + \" sending \" + portIdentifier + \" DATA\");\n                }\n                this.outPorts[port].sendIP(ip);\n              }\n            }\n            continue;\n          }\n          if (!this.outPorts.ports[port].isAttached()) {\n            continue;\n          }\n          for (j = 0, len2 = ips.length; j < len2; j++) {\n            ip = ips[j];\n            portIdentifier = port;\n            if (ip.type === 'openBracket') {\n              debugSend(this.nodeId + \" sending \" + portIdentifier + \" < '\" + ip.data + \"'\");\n            } else if (ip.type === 'closeBracket') {\n              debugSend(this.nodeId + \" sending \" + portIdentifier + \" > '\" + ip.data + \"'\");\n            } else {\n              debugSend(this.nodeId + \" sending \" + portIdentifier + \" DATA\");\n            }\n            this.outPorts[port].sendIP(ip);\n          }\n        }\n        results.push(this.outputQ.shift());\n      }\n      return results;\n    };\n\n    Component.prototype.activate = function(context) {\n      if (context.activated) {\n        return;\n      }\n      context.activated = true;\n      context.deactivated = false;\n      this.load++;\n      this.emit('activate', this.load);\n      if (this.ordered || this.autoOrdering) {\n        return this.outputQ.push(context.result);\n      }\n    };\n\n    Component.prototype.deactivate = function(context) {\n      if (context.deactivated) {\n        return;\n      }\n      context.deactivated = true;\n      context.activated = false;\n      if (this.isOrdered()) {\n        this.processOutputQueue();\n      }\n      this.load--;\n      return this.emit('deactivate', this.load);\n    };\n\n    return Component;\n\n  })(EventEmitter);\n\n  exports.Component = Component;\n\n  ProcessContext = (function() {\n    function ProcessContext(ip1, nodeInstance, port1, result1) {\n      this.ip = ip1;\n      this.nodeInstance = nodeInstance;\n      this.port = port1;\n      this.result = result1;\n      this.scope = this.ip.scope;\n      this.activated = false;\n      this.deactivated = false;\n    }\n\n    ProcessContext.prototype.activate = function() {\n      if (this.result.__resolved || this.nodeInstance.outputQ.indexOf(this.result) === -1) {\n        this.result = {};\n      }\n      return this.nodeInstance.activate(this);\n    };\n\n    ProcessContext.prototype.deactivate = function() {\n      if (!this.result.__resolved) {\n        this.result.__resolved = true;\n      }\n      return this.nodeInstance.deactivate(this);\n    };\n\n    return ProcessContext;\n\n  })();\n\n  ProcessInput = (function() {\n    function ProcessInput(ports1, context1) {\n      this.ports = ports1;\n      this.context = context1;\n      this.nodeInstance = this.context.nodeInstance;\n      this.ip = this.context.ip;\n      this.port = this.context.port;\n      this.result = this.context.result;\n      this.scope = this.context.scope;\n    }\n\n    ProcessInput.prototype.activate = function() {\n      if (this.context.activated) {\n        return;\n      }\n      if (this.nodeInstance.isOrdered()) {\n        this.result.__resolved = false;\n      }\n      this.nodeInstance.activate(this.context);\n      if (this.port.isAddressable()) {\n        return debug(this.nodeInstance.nodeId + \" packet on '\" + this.port.name + \"[\" + this.ip.index + \"]' caused activation \" + this.nodeInstance.load + \": \" + this.ip.type);\n      } else {\n        return debug(this.nodeInstance.nodeId + \" packet on '\" + this.port.name + \"' caused activation \" + this.nodeInstance.load + \": \" + this.ip.type);\n      }\n    };\n\n    ProcessInput.prototype.attached = function() {\n      var args, i, len1, port, res;\n      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      if (!args.length) {\n        args = ['in'];\n      }\n      res = [];\n      for (i = 0, len1 = args.length; i < len1; i++) {\n        port = args[i];\n        res.push(this.ports[port].listAttached());\n      }\n      if (args.length === 1) {\n        return res.pop();\n      }\n      return res;\n    };\n\n    ProcessInput.prototype.has = function() {\n      var args, i, len1, port, validate;\n      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      if (!args.length) {\n        args = ['in'];\n      }\n      if (typeof args[args.length - 1] === 'function') {\n        validate = args.pop();\n      } else {\n        validate = function() {\n          return true;\n        };\n      }\n      for (i = 0, len1 = args.length; i < len1; i++) {\n        port = args[i];\n        if (Array.isArray(port)) {\n          if (!this.ports[port[0]].isAddressable()) {\n            throw new Error(\"Non-addressable ports, access must be with string \" + port[0]);\n          }\n          if (!this.ports[port[0]].has(this.scope, port[1], validate)) {\n            return false;\n          }\n          continue;\n        }\n        if (this.ports[port].isAddressable()) {\n          throw new Error(\"For addressable ports, access must be with array [\" + port + \", idx]\");\n        }\n        if (!this.ports[port].has(this.scope, validate)) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    ProcessInput.prototype.hasData = function() {\n      var args;\n      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      if (!args.length) {\n        args = ['in'];\n      }\n      args.push(function(ip) {\n        return ip.type === 'data';\n      });\n      return this.has.apply(this, args);\n    };\n\n    ProcessInput.prototype.hasStream = function() {\n      var args, dataBrackets, hasData, i, len1, port, portBrackets, validate, validateStream;\n      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      if (!args.length) {\n        args = ['in'];\n      }\n      if (typeof args[args.length - 1] === 'function') {\n        validateStream = args.pop();\n      } else {\n        validateStream = function() {\n          return true;\n        };\n      }\n      for (i = 0, len1 = args.length; i < len1; i++) {\n        port = args[i];\n        portBrackets = [];\n        dataBrackets = [];\n        hasData = false;\n        validate = function(ip) {\n          if (ip.type === 'openBracket') {\n            portBrackets.push(ip.data);\n            return false;\n          }\n          if (ip.type === 'data') {\n            hasData = validateStream(ip, portBrackets);\n            if (!portBrackets.length) {\n              return hasData;\n            }\n            return false;\n          }\n          if (ip.type === 'closeBracket') {\n            portBrackets.pop();\n            if (portBrackets.length) {\n              return false;\n            }\n            if (!hasData) {\n              return false;\n            }\n            return true;\n          }\n        };\n        if (!this.has(port, validate)) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    ProcessInput.prototype.get = function() {\n      var args, i, idx, ip, len1, port, portname, res;\n      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      this.activate();\n      if (!args.length) {\n        args = ['in'];\n      }\n      res = [];\n      for (i = 0, len1 = args.length; i < len1; i++) {\n        port = args[i];\n        if (Array.isArray(port)) {\n          portname = port[0], idx = port[1];\n          if (!this.ports[portname].isAddressable()) {\n            throw new Error('Non-addressable ports, access must be with string portname');\n          }\n        } else {\n          portname = port;\n          if (this.ports[portname].isAddressable()) {\n            throw new Error('For addressable ports, access must be with array [portname, idx]');\n          }\n        }\n        if (this.nodeInstance.isForwardingInport(portname)) {\n          ip = this.__getForForwarding(portname, idx);\n          res.push(ip);\n          continue;\n        }\n        ip = this.ports[portname].get(this.scope, idx);\n        res.push(ip);\n      }\n      if (args.length === 1) {\n        return res[0];\n      } else {\n        return res;\n      }\n    };\n\n    ProcessInput.prototype.__getForForwarding = function(port, idx) {\n      var context, dataIp, i, ip, len1, prefix;\n      prefix = [];\n      dataIp = null;\n      while (true) {\n        ip = this.ports[port].get(this.scope, idx);\n        if (!ip) {\n          break;\n        }\n        if (ip.type === 'data') {\n          dataIp = ip;\n          break;\n        }\n        prefix.push(ip);\n      }\n      for (i = 0, len1 = prefix.length; i < len1; i++) {\n        ip = prefix[i];\n        if (ip.type === 'closeBracket') {\n          if (!this.result.__bracketClosingBefore) {\n            this.result.__bracketClosingBefore = [];\n          }\n          context = this.nodeInstance.getBracketContext('in', port, this.scope, idx).pop();\n          context.closeIp = ip;\n          this.result.__bracketClosingBefore.push(context);\n          continue;\n        }\n        if (ip.type === 'openBracket') {\n          this.nodeInstance.getBracketContext('in', port, this.scope, idx).push({\n            ip: ip,\n            ports: [],\n            source: port\n          });\n          continue;\n        }\n      }\n      if (!this.result.__bracketContext) {\n        this.result.__bracketContext = {};\n      }\n      this.result.__bracketContext[port] = this.nodeInstance.getBracketContext('in', port, this.scope, idx).slice(0);\n      return dataIp;\n    };\n\n    ProcessInput.prototype.getData = function() {\n      var args, datas, i, len1, packet, port;\n      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      if (!args.length) {\n        args = ['in'];\n      }\n      datas = [];\n      for (i = 0, len1 = args.length; i < len1; i++) {\n        port = args[i];\n        packet = this.get(port);\n        if (packet == null) {\n          datas.push(packet);\n          continue;\n        }\n        while (packet.type !== 'data') {\n          packet = this.get(port);\n          if (!packet) {\n            break;\n          }\n        }\n        datas.push(packet.data);\n      }\n      if (args.length === 1) {\n        return datas.pop();\n      }\n      return datas;\n    };\n\n    ProcessInput.prototype.getStream = function() {\n      var args, datas, hasData, i, ip, len1, port, portBrackets, portPackets;\n      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      if (!args.length) {\n        args = ['in'];\n      }\n      datas = [];\n      for (i = 0, len1 = args.length; i < len1; i++) {\n        port = args[i];\n        portBrackets = [];\n        portPackets = [];\n        hasData = false;\n        ip = this.get(port);\n        if (!ip) {\n          datas.push(void 0);\n        }\n        while (ip) {\n          if (ip.type === 'openBracket') {\n            if (!portBrackets.length) {\n              portPackets = [];\n              hasData = false;\n            }\n            portBrackets.push(ip.data);\n            portPackets.push(ip);\n          }\n          if (ip.type === 'data') {\n            portPackets.push(ip);\n            hasData = true;\n            if (!portBrackets.length) {\n              break;\n            }\n          }\n          if (ip.type === 'closeBracket') {\n            portPackets.push(ip);\n            portBrackets.pop();\n            if (hasData && !portBrackets.length) {\n              break;\n            }\n          }\n          ip = this.get(port);\n        }\n        datas.push(portPackets);\n      }\n      if (args.length === 1) {\n        return datas.pop();\n      }\n      return datas;\n    };\n\n    return ProcessInput;\n\n  })();\n\n  ProcessOutput = (function() {\n    function ProcessOutput(ports1, context1) {\n      this.ports = ports1;\n      this.context = context1;\n      this.nodeInstance = this.context.nodeInstance;\n      this.ip = this.context.ip;\n      this.result = this.context.result;\n      this.scope = this.context.scope;\n    }\n\n    ProcessOutput.prototype.isError = function(err) {\n      return err instanceof Error || Array.isArray(err) && err.length > 0 && err[0] instanceof Error;\n    };\n\n    ProcessOutput.prototype.error = function(err) {\n      var e, i, j, len1, len2, multiple, results;\n      multiple = Array.isArray(err);\n      if (!multiple) {\n        err = [err];\n      }\n      if ('error' in this.ports && (this.ports.error.isAttached() || !this.ports.error.isRequired())) {\n        if (multiple) {\n          this.sendIP('error', new IP('openBracket'));\n        }\n        for (i = 0, len1 = err.length; i < len1; i++) {\n          e = err[i];\n          this.sendIP('error', e);\n        }\n        if (multiple) {\n          return this.sendIP('error', new IP('closeBracket'));\n        }\n      } else {\n        results = [];\n        for (j = 0, len2 = err.length; j < len2; j++) {\n          e = err[j];\n          throw e;\n        }\n        return results;\n      }\n    };\n\n    ProcessOutput.prototype.sendIP = function(port, packet) {\n      var ip;\n      if (!IP.isIP(packet)) {\n        ip = new IP('data', packet);\n      } else {\n        ip = packet;\n      }\n      if (this.scope !== null && ip.scope === null) {\n        ip.scope = this.scope;\n      }\n      if (this.nodeInstance.outPorts[port].isAddressable() && ip.index === null) {\n        throw new Error('Sending packets to addressable ports requires specifying index');\n      }\n      if (this.nodeInstance.isOrdered()) {\n        this.nodeInstance.addToResult(this.result, port, ip);\n        return;\n      }\n      return this.nodeInstance.outPorts[port].sendIP(ip);\n    };\n\n    ProcessOutput.prototype.send = function(outputMap) {\n      var componentPorts, i, len1, mapIsInPorts, packet, port, ref, results;\n      if (this.isError(outputMap)) {\n        return this.error(outputMap);\n      }\n      componentPorts = [];\n      mapIsInPorts = false;\n      ref = Object.keys(this.ports.ports);\n      for (i = 0, len1 = ref.length; i < len1; i++) {\n        port = ref[i];\n        if (port !== 'error' && port !== 'ports' && port !== '_callbacks') {\n          componentPorts.push(port);\n        }\n        if (!mapIsInPorts && (outputMap != null) && typeof outputMap === 'object' && Object.keys(outputMap).indexOf(port) !== -1) {\n          mapIsInPorts = true;\n        }\n      }\n      if (componentPorts.length === 1 && !mapIsInPorts) {\n        this.sendIP(componentPorts[0], outputMap);\n        return;\n      }\n      if (componentPorts.length > 1 && !mapIsInPorts) {\n        throw new Error('Port must be specified for sending output');\n      }\n      results = [];\n      for (port in outputMap) {\n        packet = outputMap[port];\n        results.push(this.sendIP(port, packet));\n      }\n      return results;\n    };\n\n    ProcessOutput.prototype.sendDone = function(outputMap) {\n      this.send(outputMap);\n      return this.done();\n    };\n\n    ProcessOutput.prototype.pass = function(data, options) {\n      var key, val;\n      if (options == null) {\n        options = {};\n      }\n      if (!('out' in this.ports)) {\n        throw new Error('output.pass() requires port \"out\" to be present');\n      }\n      for (key in options) {\n        val = options[key];\n        this.ip[key] = val;\n      }\n      this.ip.data = data;\n      this.sendIP('out', this.ip);\n      return this.done();\n    };\n\n    ProcessOutput.prototype.done = function(error) {\n      var buf, context, contexts, ctx, ip, isLast, nodeContext, port, ref;\n      this.result.__resolved = true;\n      this.nodeInstance.activate(this.context);\n      if (error) {\n        this.error(error);\n      }\n      isLast = (function(_this) {\n        return function() {\n          var len, load, pos, resultsOnly;\n          resultsOnly = _this.nodeInstance.outputQ.filter(function(q) {\n            if (!q.__resolved) {\n              return true;\n            }\n            if (Object.keys(q).length === 2 && q.__bracketClosingAfter) {\n              return false;\n            }\n            return true;\n          });\n          pos = resultsOnly.indexOf(_this.result);\n          len = resultsOnly.length;\n          load = _this.nodeInstance.load;\n          if (pos === len - 1) {\n            return true;\n          }\n          if (pos === -1 && load === len + 1) {\n            return true;\n          }\n          if (len <= 1 && load === 1) {\n            return true;\n          }\n          return false;\n        };\n      })(this);\n      if (this.nodeInstance.isOrdered() && isLast()) {\n        ref = this.nodeInstance.bracketContext[\"in\"];\n        for (port in ref) {\n          contexts = ref[port];\n          if (!contexts[this.scope]) {\n            continue;\n          }\n          nodeContext = contexts[this.scope];\n          if (!nodeContext.length) {\n            continue;\n          }\n          context = nodeContext[nodeContext.length - 1];\n          buf = this.nodeInstance.inPorts[context.source].getBuffer(context.ip.scope, context.ip.index);\n          while (true) {\n            if (!buf.length) {\n              break;\n            }\n            if (buf[0].type !== 'closeBracket') {\n              break;\n            }\n            ip = this.nodeInstance.inPorts[context.source].get(context.ip.scope, context.ip.index);\n            ctx = nodeContext.pop();\n            ctx.closeIp = ip;\n            if (!this.result.__bracketClosingAfter) {\n              this.result.__bracketClosingAfter = [];\n            }\n            this.result.__bracketClosingAfter.push(ctx);\n          }\n        }\n      }\n      debug(this.nodeInstance.nodeId + \" finished processing \" + this.nodeInstance.load);\n      return this.nodeInstance.deactivate(this.context);\n    };\n\n    return ProcessOutput;\n\n  })();\n\n}).call(this);\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n(function() {\n  var BasePort, IP, InPort, platform,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  BasePort = __webpack_require__(17);\n\n  IP = __webpack_require__(2);\n\n  platform = __webpack_require__(6);\n\n  InPort = (function(superClass) {\n    extend(InPort, superClass);\n\n    function InPort(options, process) {\n      this.process = null;\n      if (!process && typeof options === 'function') {\n        process = options;\n        options = {};\n      }\n      if (options == null) {\n        options = {};\n      }\n      if (options.buffered == null) {\n        options.buffered = false;\n      }\n      if (options.control == null) {\n        options.control = false;\n      }\n      if (options.triggering == null) {\n        options.triggering = true;\n      }\n      if (!process && options && options.process) {\n        process = options.process;\n        delete options.process;\n      }\n      if (process) {\n        platform.deprecated('InPort process callback is deprecated. Please use Process API or the InPort handle option');\n        if (typeof process !== 'function') {\n          throw new Error('process must be a function');\n        }\n        this.process = process;\n      }\n      if (options.handle) {\n        platform.deprecated('InPort handle callback is deprecated. Please use Process API');\n        if (typeof options.handle !== 'function') {\n          throw new Error('handle must be a function');\n        }\n        this.handle = options.handle;\n        delete options.handle;\n      }\n      InPort.__super__.constructor.call(this, options);\n      this.prepareBuffer();\n    }\n\n    InPort.prototype.attachSocket = function(socket, localId) {\n      if (localId == null) {\n        localId = null;\n      }\n      if (this.hasDefault()) {\n        if (this.handle) {\n          socket.setDataDelegate((function(_this) {\n            return function() {\n              return new IP('data', _this.options[\"default\"]);\n            };\n          })(this));\n        } else {\n          socket.setDataDelegate((function(_this) {\n            return function() {\n              return _this.options[\"default\"];\n            };\n          })(this));\n        }\n      }\n      socket.on('connect', (function(_this) {\n        return function() {\n          return _this.handleSocketEvent('connect', socket, localId);\n        };\n      })(this));\n      socket.on('begingroup', (function(_this) {\n        return function(group) {\n          return _this.handleSocketEvent('begingroup', group, localId);\n        };\n      })(this));\n      socket.on('data', (function(_this) {\n        return function(data) {\n          _this.validateData(data);\n          return _this.handleSocketEvent('data', data, localId);\n        };\n      })(this));\n      socket.on('endgroup', (function(_this) {\n        return function(group) {\n          return _this.handleSocketEvent('endgroup', group, localId);\n        };\n      })(this));\n      socket.on('disconnect', (function(_this) {\n        return function() {\n          return _this.handleSocketEvent('disconnect', socket, localId);\n        };\n      })(this));\n      return socket.on('ip', (function(_this) {\n        return function(ip) {\n          return _this.handleIP(ip, localId);\n        };\n      })(this));\n    };\n\n    InPort.prototype.handleIP = function(ip, id) {\n      var buf;\n      if (this.process) {\n        return;\n      }\n      if (this.options.control && ip.type !== 'data') {\n        return;\n      }\n      ip.owner = this.nodeInstance;\n      if (this.isAddressable()) {\n        ip.index = id;\n      }\n      buf = this.prepareBufferForIP(ip);\n      buf.push(ip);\n      if (this.options.control && buf.length > 1) {\n        buf.shift();\n      }\n      if (this.handle) {\n        this.handle(ip, this.nodeInstance);\n      }\n      return this.emit('ip', ip, id);\n    };\n\n    InPort.prototype.handleSocketEvent = function(event, payload, id) {\n      if (this.isBuffered()) {\n        this.buffer.push({\n          event: event,\n          payload: payload,\n          id: id\n        });\n        if (this.isAddressable()) {\n          if (this.process) {\n            this.process(event, id, this.nodeInstance);\n          }\n          this.emit(event, id);\n        } else {\n          if (this.process) {\n            this.process(event, this.nodeInstance);\n          }\n          this.emit(event);\n        }\n        return;\n      }\n      if (this.process) {\n        if (this.isAddressable()) {\n          this.process(event, payload, id, this.nodeInstance);\n        } else {\n          this.process(event, payload, this.nodeInstance);\n        }\n      }\n      if (this.isAddressable()) {\n        return this.emit(event, payload, id);\n      }\n      return this.emit(event, payload);\n    };\n\n    InPort.prototype.hasDefault = function() {\n      return this.options[\"default\"] !== void 0;\n    };\n\n    InPort.prototype.prepareBuffer = function() {\n      this.buffer = [];\n      if (this.isAddressable()) {\n        this.indexedBuffer = {};\n      }\n      this.scopedBuffer = {};\n      return this.iipBuffer = this.isAddressable() ? {} : [];\n    };\n\n    InPort.prototype.prepareBufferForIP = function(ip) {\n      if (this.isAddressable()) {\n        if (ip.scope != null) {\n          if (!(ip.scope in this.scopedBuffer)) {\n            this.scopedBuffer[ip.scope] = [];\n          }\n          if (!(ip.index in this.scopedBuffer[ip.scope])) {\n            this.scopedBuffer[ip.scope][ip.index] = [];\n          }\n          return this.scopedBuffer[ip.scope][ip.index];\n        }\n        if (ip.initial) {\n          if (!(ip.index in this.iipBuffer)) {\n            this.iipBuffer[ip.index] = [];\n          }\n          return this.iipBuffer[ip.index];\n        }\n        if (!(ip.index in this.indexedBuffer)) {\n          this.indexedBuffer[ip.index] = [];\n        }\n        return this.indexedBuffer[ip.index];\n      }\n      if (ip.scope != null) {\n        if (!(ip.scope in this.scopedBuffer)) {\n          this.scopedBuffer[ip.scope] = [];\n        }\n        return this.scopedBuffer[ip.scope];\n      }\n      if (ip.initial) {\n        return this.iipBuffer;\n      }\n      return this.buffer;\n    };\n\n    InPort.prototype.validateData = function(data) {\n      if (!this.options.values) {\n        return;\n      }\n      if (this.options.values.indexOf(data) === -1) {\n        throw new Error(\"Invalid data='\" + data + \"' received, not in [\" + this.options.values + \"]\");\n      }\n    };\n\n    InPort.prototype.receive = function() {\n      platform.deprecated('InPort.receive is deprecated. Use InPort.get instead');\n      if (!this.isBuffered()) {\n        throw new Error('Receive is only possible on buffered ports');\n      }\n      return this.buffer.shift();\n    };\n\n    InPort.prototype.contains = function() {\n      platform.deprecated('InPort.contains is deprecated. Use InPort.has instead');\n      if (!this.isBuffered()) {\n        throw new Error('Contains query is only possible on buffered ports');\n      }\n      return this.buffer.filter(function(packet) {\n        if (packet.event === 'data') {\n          return true;\n        }\n      }).length;\n    };\n\n    InPort.prototype.getBuffer = function(scope, idx, initial) {\n      if (initial == null) {\n        initial = false;\n      }\n      if (this.isAddressable()) {\n        if (scope != null) {\n          if (!(scope in this.scopedBuffer)) {\n            return void 0;\n          }\n          if (!(idx in this.scopedBuffer[scope])) {\n            return void 0;\n          }\n          return this.scopedBuffer[scope][idx];\n        }\n        if (initial) {\n          if (!(idx in this.iipBuffer)) {\n            return void 0;\n          }\n          return this.iipBuffer[idx];\n        }\n        if (!(idx in this.indexedBuffer)) {\n          return void 0;\n        }\n        return this.indexedBuffer[idx];\n      }\n      if (scope != null) {\n        if (!(scope in this.scopedBuffer)) {\n          return void 0;\n        }\n        return this.scopedBuffer[scope];\n      }\n      if (initial) {\n        return this.iipBuffer;\n      }\n      return this.buffer;\n    };\n\n    InPort.prototype.getFromBuffer = function(scope, idx, initial) {\n      var buf;\n      if (initial == null) {\n        initial = false;\n      }\n      buf = this.getBuffer(scope, idx, initial);\n      if (!(buf != null ? buf.length : void 0)) {\n        return void 0;\n      }\n      if (this.options.control) {\n        return buf[buf.length - 1];\n      } else {\n        return buf.shift();\n      }\n    };\n\n    InPort.prototype.get = function(scope, idx) {\n      var res;\n      res = this.getFromBuffer(scope, idx);\n      if (res !== void 0) {\n        return res;\n      }\n      return this.getFromBuffer(null, idx, true);\n    };\n\n    InPort.prototype.hasIPinBuffer = function(scope, idx, validate, initial) {\n      var buf, i, len, packet;\n      if (initial == null) {\n        initial = false;\n      }\n      buf = this.getBuffer(scope, idx, initial);\n      if (!(buf != null ? buf.length : void 0)) {\n        return false;\n      }\n      for (i = 0, len = buf.length; i < len; i++) {\n        packet = buf[i];\n        if (validate(packet)) {\n          return true;\n        }\n      }\n      return false;\n    };\n\n    InPort.prototype.hasIIP = function(idx, validate) {\n      return this.hasIPinBuffer(null, idx, validate, true);\n    };\n\n    InPort.prototype.has = function(scope, idx, validate) {\n      if (!this.isAddressable()) {\n        validate = idx;\n        idx = null;\n      }\n      if (this.hasIPinBuffer(scope, idx, validate)) {\n        return true;\n      }\n      if (this.hasIIP(idx, validate)) {\n        return true;\n      }\n      return false;\n    };\n\n    InPort.prototype.length = function(scope, idx) {\n      var buf;\n      buf = this.getBuffer(scope, idx);\n      if (!buf) {\n        return 0;\n      }\n      return buf.length;\n    };\n\n    InPort.prototype.ready = function(scope, idx) {\n      return this.length(scope) > 0;\n    };\n\n    InPort.prototype.clear = function() {\n      return this.prepareBuffer();\n    };\n\n    return InPort;\n\n  })(BasePort);\n\n  module.exports = InPort;\n\n}).call(this);\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(process) {(function() {\n  var EventEmitter, IP, Network, componentLoader, graph, internalSocket, platform, utils,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  internalSocket = __webpack_require__(8);\n\n  graph = __webpack_require__(5);\n\n  EventEmitter = __webpack_require__(0).EventEmitter;\n\n  platform = __webpack_require__(6);\n\n  componentLoader = __webpack_require__(10);\n\n  utils = __webpack_require__(23);\n\n  IP = __webpack_require__(2);\n\n  Network = (function(superClass) {\n    extend(Network, superClass);\n\n    Network.prototype.processes = {};\n\n    Network.prototype.connections = [];\n\n    Network.prototype.initials = [];\n\n    Network.prototype.defaults = [];\n\n    Network.prototype.graph = null;\n\n    Network.prototype.startupDate = null;\n\n    function Network(graph, options) {\n      this.options = options != null ? options : {};\n      this.processes = {};\n      this.connections = [];\n      this.initials = [];\n      this.nextInitials = [];\n      this.defaults = [];\n      this.graph = graph;\n      this.started = false;\n      this.debug = true;\n      this.eventBuffer = [];\n      if (!platform.isBrowser()) {\n        this.baseDir = graph.baseDir || process.cwd();\n      } else {\n        this.baseDir = graph.baseDir || '/';\n      }\n      this.startupDate = null;\n      if (graph.componentLoader) {\n        this.loader = graph.componentLoader;\n      } else {\n        this.loader = new componentLoader.ComponentLoader(this.baseDir, this.options);\n      }\n    }\n\n    Network.prototype.uptime = function() {\n      if (!this.startupDate) {\n        return 0;\n      }\n      return new Date() - this.startupDate;\n    };\n\n    Network.prototype.getActiveProcesses = function() {\n      var active, name, process, ref;\n      active = [];\n      if (!this.started) {\n        return active;\n      }\n      ref = this.processes;\n      for (name in ref) {\n        process = ref[name];\n        if (process.component.load > 0) {\n          active.push(name);\n        }\n        if (process.component.__openConnections > 0) {\n          active.push(name);\n        }\n      }\n      return active;\n    };\n\n    Network.prototype.bufferedEmit = function(event, payload) {\n      var ev, i, len, ref;\n      if (event === 'error' || event === 'process-error' || event === 'end') {\n        this.emit(event, payload);\n        return;\n      }\n      if (!this.isStarted() && event !== 'end') {\n        this.eventBuffer.push({\n          type: event,\n          payload: payload\n        });\n        return;\n      }\n      this.emit(event, payload);\n      if (event === 'start') {\n        ref = this.eventBuffer;\n        for (i = 0, len = ref.length; i < len; i++) {\n          ev = ref[i];\n          this.emit(ev.type, ev.payload);\n        }\n        return this.eventBuffer = [];\n      }\n    };\n\n    Network.prototype.load = function(component, metadata, callback) {\n      return this.loader.load(component, callback, metadata);\n    };\n\n    Network.prototype.addNode = function(node, callback) {\n      var process;\n      if (this.processes[node.id]) {\n        callback(null, this.processes[node.id]);\n        return;\n      }\n      process = {\n        id: node.id\n      };\n      if (!node.component) {\n        this.processes[process.id] = process;\n        callback(null, process);\n        return;\n      }\n      return this.load(node.component, node.metadata, (function(_this) {\n        return function(err, instance) {\n          var inPorts, name, outPorts, port;\n          if (err) {\n            return callback(err);\n          }\n          instance.nodeId = node.id;\n          process.component = instance;\n          process.componentName = node.component;\n          inPorts = process.component.inPorts.ports || process.component.inPorts;\n          outPorts = process.component.outPorts.ports || process.component.outPorts;\n          for (name in inPorts) {\n            port = inPorts[name];\n            port.node = node.id;\n            port.nodeInstance = instance;\n            port.name = name;\n          }\n          for (name in outPorts) {\n            port = outPorts[name];\n            port.node = node.id;\n            port.nodeInstance = instance;\n            port.name = name;\n          }\n          if (instance.isSubgraph()) {\n            _this.subscribeSubgraph(process);\n          }\n          _this.subscribeNode(process);\n          _this.processes[process.id] = process;\n          return callback(null, process);\n        };\n      })(this));\n    };\n\n    Network.prototype.removeNode = function(node, callback) {\n      if (!this.processes[node.id]) {\n        return callback(new Error(\"Node \" + node.id + \" not found\"));\n      }\n      return this.processes[node.id].component.shutdown((function(_this) {\n        return function(err) {\n          if (err) {\n            return callback(err);\n          }\n          delete _this.processes[node.id];\n          return callback(null);\n        };\n      })(this));\n    };\n\n    Network.prototype.renameNode = function(oldId, newId, callback) {\n      var inPorts, name, outPorts, port, process;\n      process = this.getNode(oldId);\n      if (!process) {\n        return callback(new Error(\"Process \" + oldId + \" not found\"));\n      }\n      process.id = newId;\n      inPorts = process.component.inPorts.ports || process.component.inPorts;\n      outPorts = process.component.outPorts.ports || process.component.outPorts;\n      for (name in inPorts) {\n        port = inPorts[name];\n        if (!port) {\n          continue;\n        }\n        port.node = newId;\n      }\n      for (name in outPorts) {\n        port = outPorts[name];\n        if (!port) {\n          continue;\n        }\n        port.node = newId;\n      }\n      this.processes[newId] = process;\n      delete this.processes[oldId];\n      return callback(null);\n    };\n\n    Network.prototype.getNode = function(id) {\n      return this.processes[id];\n    };\n\n    Network.prototype.connect = function(done) {\n      var callStack, edges, initializers, nodes, serialize, setDefaults, subscribeGraph;\n      if (done == null) {\n        done = function() {};\n      }\n      callStack = 0;\n      serialize = (function(_this) {\n        return function(next, add) {\n          return function(type) {\n            return _this[\"add\" + type](add, function(err) {\n              if (err) {\n                return done(err);\n              }\n              callStack++;\n              if (callStack % 100 === 0) {\n                setTimeout(function() {\n                  return next(type);\n                }, 0);\n                return;\n              }\n              return next(type);\n            });\n          };\n        };\n      })(this);\n      subscribeGraph = (function(_this) {\n        return function() {\n          _this.subscribeGraph();\n          return done();\n        };\n      })(this);\n      setDefaults = utils.reduceRight(this.graph.nodes, serialize, subscribeGraph);\n      initializers = utils.reduceRight(this.graph.initializers, serialize, function() {\n        return setDefaults(\"Defaults\");\n      });\n      edges = utils.reduceRight(this.graph.edges, serialize, function() {\n        return initializers(\"Initial\");\n      });\n      nodes = utils.reduceRight(this.graph.nodes, serialize, function() {\n        return edges(\"Edge\");\n      });\n      return nodes(\"Node\");\n    };\n\n    Network.prototype.connectPort = function(socket, process, port, index, inbound) {\n      if (inbound) {\n        socket.to = {\n          process: process,\n          port: port,\n          index: index\n        };\n        if (!(process.component.inPorts && process.component.inPorts[port])) {\n          throw new Error(\"No inport '\" + port + \"' defined in process \" + process.id + \" (\" + (socket.getId()) + \")\");\n          return;\n        }\n        if (process.component.inPorts[port].isAddressable()) {\n          return process.component.inPorts[port].attach(socket, index);\n        }\n        return process.component.inPorts[port].attach(socket);\n      }\n      socket.from = {\n        process: process,\n        port: port,\n        index: index\n      };\n      if (!(process.component.outPorts && process.component.outPorts[port])) {\n        throw new Error(\"No outport '\" + port + \"' defined in process \" + process.id + \" (\" + (socket.getId()) + \")\");\n        return;\n      }\n      if (process.component.outPorts[port].isAddressable()) {\n        return process.component.outPorts[port].attach(socket, index);\n      }\n      return process.component.outPorts[port].attach(socket);\n    };\n\n    Network.prototype.subscribeGraph = function() {\n      var graphOps, processOps, processing, registerOp;\n      graphOps = [];\n      processing = false;\n      registerOp = function(op, details) {\n        return graphOps.push({\n          op: op,\n          details: details\n        });\n      };\n      processOps = (function(_this) {\n        return function(err) {\n          var cb, op;\n          if (err) {\n            if (_this.listeners('process-error').length === 0) {\n              throw err;\n            }\n            _this.bufferedEmit('process-error', err);\n          }\n          if (!graphOps.length) {\n            processing = false;\n            return;\n          }\n          processing = true;\n          op = graphOps.shift();\n          cb = processOps;\n          switch (op.op) {\n            case 'renameNode':\n              return _this.renameNode(op.details.from, op.details.to, cb);\n            default:\n              return _this[op.op](op.details, cb);\n          }\n        };\n      })(this);\n      this.graph.on('addNode', function(node) {\n        registerOp('addNode', node);\n        if (!processing) {\n          return processOps();\n        }\n      });\n      this.graph.on('removeNode', function(node) {\n        registerOp('removeNode', node);\n        if (!processing) {\n          return processOps();\n        }\n      });\n      this.graph.on('renameNode', function(oldId, newId) {\n        registerOp('renameNode', {\n          from: oldId,\n          to: newId\n        });\n        if (!processing) {\n          return processOps();\n        }\n      });\n      this.graph.on('addEdge', function(edge) {\n        registerOp('addEdge', edge);\n        if (!processing) {\n          return processOps();\n        }\n      });\n      this.graph.on('removeEdge', function(edge) {\n        registerOp('removeEdge', edge);\n        if (!processing) {\n          return processOps();\n        }\n      });\n      this.graph.on('addInitial', function(iip) {\n        registerOp('addInitial', iip);\n        if (!processing) {\n          return processOps();\n        }\n      });\n      return this.graph.on('removeInitial', function(iip) {\n        registerOp('removeInitial', iip);\n        if (!processing) {\n          return processOps();\n        }\n      });\n    };\n\n    Network.prototype.subscribeSubgraph = function(node) {\n      var emitSub;\n      if (!node.component.isReady()) {\n        node.component.once('ready', (function(_this) {\n          return function() {\n            return _this.subscribeSubgraph(node);\n          };\n        })(this));\n        return;\n      }\n      if (!node.component.network) {\n        return;\n      }\n      node.component.network.setDebug(this.debug);\n      emitSub = (function(_this) {\n        return function(type, data) {\n          if (type === 'process-error' && _this.listeners('process-error').length === 0) {\n            if (data.id && data.metadata && data.error) {\n              throw data.error;\n            }\n            throw data;\n          }\n          if (!data) {\n            data = {};\n          }\n          if (data.subgraph) {\n            if (!data.subgraph.unshift) {\n              data.subgraph = [data.subgraph];\n            }\n            data.subgraph = data.subgraph.unshift(node.id);\n          } else {\n            data.subgraph = [node.id];\n          }\n          return _this.bufferedEmit(type, data);\n        };\n      })(this);\n      node.component.network.on('connect', function(data) {\n        return emitSub('connect', data);\n      });\n      node.component.network.on('begingroup', function(data) {\n        return emitSub('begingroup', data);\n      });\n      node.component.network.on('data', function(data) {\n        return emitSub('data', data);\n      });\n      node.component.network.on('endgroup', function(data) {\n        return emitSub('endgroup', data);\n      });\n      node.component.network.on('disconnect', function(data) {\n        return emitSub('disconnect', data);\n      });\n      node.component.network.on('ip', function(data) {\n        return emitSub('ip', data);\n      });\n      return node.component.network.on('process-error', function(data) {\n        return emitSub('process-error', data);\n      });\n    };\n\n    Network.prototype.subscribeSocket = function(socket, source) {\n      socket.on('ip', (function(_this) {\n        return function(ip) {\n          return _this.bufferedEmit('ip', {\n            id: socket.getId(),\n            type: ip.type,\n            socket: socket,\n            data: ip.data,\n            metadata: socket.metadata\n          });\n        };\n      })(this));\n      socket.on('connect', (function(_this) {\n        return function() {\n          if (source && source.component.isLegacy()) {\n            if (!source.component.__openConnections) {\n              source.component.__openConnections = 0;\n            }\n            source.component.__openConnections++;\n          }\n          return _this.bufferedEmit('connect', {\n            id: socket.getId(),\n            socket: socket,\n            metadata: socket.metadata\n          });\n        };\n      })(this));\n      socket.on('begingroup', (function(_this) {\n        return function(group) {\n          return _this.bufferedEmit('begingroup', {\n            id: socket.getId(),\n            socket: socket,\n            group: group,\n            metadata: socket.metadata\n          });\n        };\n      })(this));\n      socket.on('data', (function(_this) {\n        return function(data) {\n          return _this.bufferedEmit('data', {\n            id: socket.getId(),\n            socket: socket,\n            data: data,\n            metadata: socket.metadata\n          });\n        };\n      })(this));\n      socket.on('endgroup', (function(_this) {\n        return function(group) {\n          return _this.bufferedEmit('endgroup', {\n            id: socket.getId(),\n            socket: socket,\n            group: group,\n            metadata: socket.metadata\n          });\n        };\n      })(this));\n      socket.on('disconnect', (function(_this) {\n        return function() {\n          _this.bufferedEmit('disconnect', {\n            id: socket.getId(),\n            socket: socket,\n            metadata: socket.metadata\n          });\n          if (source && source.component.isLegacy()) {\n            source.component.__openConnections--;\n            if (source.component.__openConnections < 0) {\n              source.component.__openConnections = 0;\n            }\n            if (source.component.__openConnections === 0) {\n              return _this.checkIfFinished();\n            }\n          }\n        };\n      })(this));\n      return socket.on('error', (function(_this) {\n        return function(event) {\n          if (_this.listeners('process-error').length === 0) {\n            if (event.id && event.metadata && event.error) {\n              throw event.error;\n            }\n            throw event;\n          }\n          return _this.bufferedEmit('process-error', event);\n        };\n      })(this));\n    };\n\n    Network.prototype.subscribeNode = function(node) {\n      node.component.on('deactivate', (function(_this) {\n        return function(load) {\n          if (load > 0) {\n            return;\n          }\n          return _this.checkIfFinished();\n        };\n      })(this));\n      if (!node.component.getIcon) {\n        return;\n      }\n      return node.component.on('icon', (function(_this) {\n        return function() {\n          return _this.bufferedEmit('icon', {\n            id: node.id,\n            icon: node.component.getIcon()\n          });\n        };\n      })(this));\n    };\n\n    Network.prototype.addEdge = function(edge, callback) {\n      var from, socket, to;\n      socket = internalSocket.createSocket(edge.metadata);\n      socket.setDebug(this.debug);\n      from = this.getNode(edge.from.node);\n      if (!from) {\n        return callback(new Error(\"No process defined for outbound node \" + edge.from.node));\n      }\n      if (!from.component) {\n        return callback(new Error(\"No component defined for outbound node \" + edge.from.node));\n      }\n      if (!from.component.isReady()) {\n        from.component.once(\"ready\", (function(_this) {\n          return function() {\n            return _this.addEdge(edge, callback);\n          };\n        })(this));\n        return;\n      }\n      to = this.getNode(edge.to.node);\n      if (!to) {\n        return callback(new Error(\"No process defined for inbound node \" + edge.to.node));\n      }\n      if (!to.component) {\n        return callback(new Error(\"No component defined for inbound node \" + edge.to.node));\n      }\n      if (!to.component.isReady()) {\n        to.component.once(\"ready\", (function(_this) {\n          return function() {\n            return _this.addEdge(edge, callback);\n          };\n        })(this));\n        return;\n      }\n      this.subscribeSocket(socket, from);\n      this.connectPort(socket, to, edge.to.port, edge.to.index, true);\n      this.connectPort(socket, from, edge.from.port, edge.from.index, false);\n      this.connections.push(socket);\n      return callback();\n    };\n\n    Network.prototype.removeEdge = function(edge, callback) {\n      var connection, i, len, ref, results;\n      ref = this.connections;\n      results = [];\n      for (i = 0, len = ref.length; i < len; i++) {\n        connection = ref[i];\n        if (!connection) {\n          continue;\n        }\n        if (!(edge.to.node === connection.to.process.id && edge.to.port === connection.to.port)) {\n          continue;\n        }\n        connection.to.process.component.inPorts[connection.to.port].detach(connection);\n        if (edge.from.node) {\n          if (connection.from && edge.from.node === connection.from.process.id && edge.from.port === connection.from.port) {\n            connection.from.process.component.outPorts[connection.from.port].detach(connection);\n          }\n        }\n        this.connections.splice(this.connections.indexOf(connection), 1);\n        results.push(callback());\n      }\n      return results;\n    };\n\n    Network.prototype.addDefaults = function(node, callback) {\n      var key, port, process, ref, socket;\n      process = this.processes[node.id];\n      if (!process.component.isReady()) {\n        if (process.component.setMaxListeners) {\n          process.component.setMaxListeners(0);\n        }\n        process.component.once(\"ready\", (function(_this) {\n          return function() {\n            return _this.addDefaults(process, callback);\n          };\n        })(this));\n        return;\n      }\n      ref = process.component.inPorts.ports;\n      for (key in ref) {\n        port = ref[key];\n        if (typeof port.hasDefault === 'function' && port.hasDefault() && !port.isAttached()) {\n          socket = internalSocket.createSocket();\n          socket.setDebug(this.debug);\n          this.subscribeSocket(socket);\n          this.connectPort(socket, process, key, void 0, true);\n          this.connections.push(socket);\n          this.defaults.push(socket);\n        }\n      }\n      return callback();\n    };\n\n    Network.prototype.addInitial = function(initializer, callback) {\n      var init, socket, to;\n      socket = internalSocket.createSocket(initializer.metadata);\n      socket.setDebug(this.debug);\n      this.subscribeSocket(socket);\n      to = this.getNode(initializer.to.node);\n      if (!to) {\n        return callback(new Error(\"No process defined for inbound node \" + initializer.to.node));\n      }\n      if (!(to.component.isReady() || to.component.inPorts[initializer.to.port])) {\n        if (to.component.setMaxListeners) {\n          to.component.setMaxListeners(0);\n        }\n        to.component.once(\"ready\", (function(_this) {\n          return function() {\n            return _this.addInitial(initializer, callback);\n          };\n        })(this));\n        return;\n      }\n      this.connectPort(socket, to, initializer.to.port, initializer.to.index, true);\n      this.connections.push(socket);\n      init = {\n        socket: socket,\n        data: initializer.from.data\n      };\n      this.initials.push(init);\n      this.nextInitials.push(init);\n      if (this.isStarted()) {\n        this.sendInitials();\n      }\n      return callback();\n    };\n\n    Network.prototype.removeInitial = function(initializer, callback) {\n      var connection, i, init, j, k, len, len1, len2, ref, ref1, ref2;\n      ref = this.connections;\n      for (i = 0, len = ref.length; i < len; i++) {\n        connection = ref[i];\n        if (!connection) {\n          continue;\n        }\n        if (!(initializer.to.node === connection.to.process.id && initializer.to.port === connection.to.port)) {\n          continue;\n        }\n        connection.to.process.component.inPorts[connection.to.port].detach(connection);\n        this.connections.splice(this.connections.indexOf(connection), 1);\n        ref1 = this.initials;\n        for (j = 0, len1 = ref1.length; j < len1; j++) {\n          init = ref1[j];\n          if (!init) {\n            continue;\n          }\n          if (init.socket !== connection) {\n            continue;\n          }\n          this.initials.splice(this.initials.indexOf(init), 1);\n        }\n        ref2 = this.nextInitials;\n        for (k = 0, len2 = ref2.length; k < len2; k++) {\n          init = ref2[k];\n          if (!init) {\n            continue;\n          }\n          if (init.socket !== connection) {\n            continue;\n          }\n          this.nextInitials.splice(this.nextInitials.indexOf(init), 1);\n        }\n      }\n      return callback();\n    };\n\n    Network.prototype.sendInitial = function(initial) {\n      return initial.socket.post(new IP('data', initial.data, {\n        initial: true\n      }));\n    };\n\n    Network.prototype.sendInitials = function(callback) {\n      var send;\n      if (!callback) {\n        callback = function() {};\n      }\n      send = (function(_this) {\n        return function() {\n          var i, initial, len, ref;\n          ref = _this.initials;\n          for (i = 0, len = ref.length; i < len; i++) {\n            initial = ref[i];\n            _this.sendInitial(initial);\n          }\n          _this.initials = [];\n          return callback();\n        };\n      })(this);\n      if (typeof process !== 'undefined' && process.execPath && process.execPath.indexOf('node') !== -1) {\n        return process.nextTick(send);\n      } else {\n        return setTimeout(send, 0);\n      }\n    };\n\n    Network.prototype.isStarted = function() {\n      return this.started;\n    };\n\n    Network.prototype.isRunning = function() {\n      if (!this.started) {\n        return false;\n      }\n      return this.getActiveProcesses().length > 0;\n    };\n\n    Network.prototype.startComponents = function(callback) {\n      var count, id, length, onProcessStart, process, ref, results;\n      if (!callback) {\n        callback = function() {};\n      }\n      count = 0;\n      length = this.processes ? Object.keys(this.processes).length : 0;\n      onProcessStart = function(err) {\n        if (err) {\n          return callback(err);\n        }\n        count++;\n        if (count === length) {\n          return callback();\n        }\n      };\n      if (!(this.processes && Object.keys(this.processes).length)) {\n        return callback();\n      }\n      ref = this.processes;\n      results = [];\n      for (id in ref) {\n        process = ref[id];\n        if (process.component.isStarted()) {\n          onProcessStart();\n          continue;\n        }\n        if (process.component.start.length === 0) {\n          platform.deprecated('component.start method without callback is deprecated');\n          process.component.start();\n          onProcessStart();\n          continue;\n        }\n        results.push(process.component.start(onProcessStart));\n      }\n      return results;\n    };\n\n    Network.prototype.sendDefaults = function(callback) {\n      var i, len, ref, socket;\n      if (!callback) {\n        callback = function() {};\n      }\n      if (!this.defaults.length) {\n        return callback();\n      }\n      ref = this.defaults;\n      for (i = 0, len = ref.length; i < len; i++) {\n        socket = ref[i];\n        if (socket.to.process.component.inPorts[socket.to.port].sockets.length !== 1) {\n          continue;\n        }\n        socket.connect();\n        socket.send();\n        socket.disconnect();\n      }\n      return callback();\n    };\n\n    Network.prototype.start = function(callback) {\n      if (!callback) {\n        platform.deprecated('Calling network.start() without callback is deprecated');\n        callback = function() {};\n      }\n      if (this.debouncedEnd) {\n        this.abortDebounce = true;\n      }\n      if (this.started) {\n        this.stop((function(_this) {\n          return function(err) {\n            if (err) {\n              return callback(err);\n            }\n            return _this.start(callback);\n          };\n        })(this));\n        return;\n      }\n      this.initials = this.nextInitials.slice(0);\n      this.eventBuffer = [];\n      return this.startComponents((function(_this) {\n        return function(err) {\n          if (err) {\n            return callback(err);\n          }\n          return _this.sendInitials(function(err) {\n            if (err) {\n              return callback(err);\n            }\n            return _this.sendDefaults(function(err) {\n              if (err) {\n                return callback(err);\n              }\n              _this.setStarted(true);\n              return callback(null);\n            });\n          });\n        };\n      })(this));\n    };\n\n    Network.prototype.stop = function(callback) {\n      var connection, count, i, id, len, length, onProcessEnd, process, ref, ref1, results;\n      if (!callback) {\n        platform.deprecated('Calling network.stop() without callback is deprecated');\n        callback = function() {};\n      }\n      if (this.debouncedEnd) {\n        this.abortDebounce = true;\n      }\n      if (!this.started) {\n        return callback(null);\n      }\n      ref = this.connections;\n      for (i = 0, len = ref.length; i < len; i++) {\n        connection = ref[i];\n        if (!connection.isConnected()) {\n          continue;\n        }\n        connection.disconnect();\n      }\n      count = 0;\n      length = this.processes ? Object.keys(this.processes).length : 0;\n      onProcessEnd = (function(_this) {\n        return function(err) {\n          if (err) {\n            return callback(err);\n          }\n          count++;\n          if (count === length) {\n            _this.setStarted(false);\n            return callback();\n          }\n        };\n      })(this);\n      if (!(this.processes && Object.keys(this.processes).length)) {\n        this.setStarted(false);\n        return callback();\n      }\n      ref1 = this.processes;\n      results = [];\n      for (id in ref1) {\n        process = ref1[id];\n        if (!process.component.isStarted()) {\n          onProcessEnd();\n          continue;\n        }\n        if (process.component.shutdown.length === 0) {\n          platform.deprecated('component.shutdown method without callback is deprecated');\n          process.component.shutdown();\n          onProcessEnd();\n          continue;\n        }\n        results.push(process.component.shutdown(onProcessEnd));\n      }\n      return results;\n    };\n\n    Network.prototype.setStarted = function(started) {\n      if (this.started === started) {\n        return;\n      }\n      if (!started) {\n        this.started = false;\n        this.bufferedEmit('end', {\n          start: this.startupDate,\n          end: new Date,\n          uptime: this.uptime()\n        });\n        return;\n      }\n      if (!this.startupDate) {\n        this.startupDate = new Date;\n      }\n      this.started = true;\n      return this.bufferedEmit('start', {\n        start: this.startupDate\n      });\n    };\n\n    Network.prototype.checkIfFinished = function() {\n      if (this.isRunning()) {\n        return;\n      }\n      delete this.abortDebounce;\n      if (!this.debouncedEnd) {\n        this.debouncedEnd = utils.debounce((function(_this) {\n          return function() {\n            if (_this.abortDebounce) {\n              return;\n            }\n            if (_this.isRunning()) {\n              return;\n            }\n            return _this.setStarted(false);\n          };\n        })(this), 50);\n      }\n      return this.debouncedEnd();\n    };\n\n    Network.prototype.getDebug = function() {\n      return this.debug;\n    };\n\n    Network.prototype.setDebug = function(active) {\n      var i, instance, len, process, processId, ref, ref1, results, socket;\n      if (active === this.debug) {\n        return;\n      }\n      this.debug = active;\n      ref = this.connections;\n      for (i = 0, len = ref.length; i < len; i++) {\n        socket = ref[i];\n        socket.setDebug(active);\n      }\n      ref1 = this.processes;\n      results = [];\n      for (processId in ref1) {\n        process = ref1[processId];\n        instance = process.component;\n        if (instance.isSubgraph()) {\n          results.push(instance.network.setDebug(active));\n        } else {\n          results.push(void 0);\n        }\n      }\n      return results;\n    };\n\n    return Network;\n\n  })(EventEmitter);\n\n  exports.Network = Network;\n\n}).call(this);\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n(function() {\n  var BasePort, IP, OutPort,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  BasePort = __webpack_require__(17);\n\n  IP = __webpack_require__(2);\n\n  OutPort = (function(superClass) {\n    extend(OutPort, superClass);\n\n    function OutPort(options) {\n      this.cache = {};\n      OutPort.__super__.constructor.call(this, options);\n    }\n\n    OutPort.prototype.attach = function(socket, index) {\n      if (index == null) {\n        index = null;\n      }\n      OutPort.__super__.attach.call(this, socket, index);\n      if (this.isCaching() && (this.cache[index] != null)) {\n        return this.send(this.cache[index], index);\n      }\n    };\n\n    OutPort.prototype.connect = function(socketId) {\n      var i, len, results, socket, sockets;\n      if (socketId == null) {\n        socketId = null;\n      }\n      sockets = this.getSockets(socketId);\n      this.checkRequired(sockets);\n      results = [];\n      for (i = 0, len = sockets.length; i < len; i++) {\n        socket = sockets[i];\n        if (!socket) {\n          continue;\n        }\n        results.push(socket.connect());\n      }\n      return results;\n    };\n\n    OutPort.prototype.beginGroup = function(group, socketId) {\n      var sockets;\n      if (socketId == null) {\n        socketId = null;\n      }\n      sockets = this.getSockets(socketId);\n      this.checkRequired(sockets);\n      return sockets.forEach(function(socket) {\n        if (!socket) {\n          return;\n        }\n        return socket.beginGroup(group);\n      });\n    };\n\n    OutPort.prototype.send = function(data, socketId) {\n      var sockets;\n      if (socketId == null) {\n        socketId = null;\n      }\n      sockets = this.getSockets(socketId);\n      this.checkRequired(sockets);\n      if (this.isCaching() && data !== this.cache[socketId]) {\n        this.cache[socketId] = data;\n      }\n      return sockets.forEach(function(socket) {\n        if (!socket) {\n          return;\n        }\n        return socket.send(data);\n      });\n    };\n\n    OutPort.prototype.endGroup = function(socketId) {\n      var i, len, results, socket, sockets;\n      if (socketId == null) {\n        socketId = null;\n      }\n      sockets = this.getSockets(socketId);\n      this.checkRequired(sockets);\n      results = [];\n      for (i = 0, len = sockets.length; i < len; i++) {\n        socket = sockets[i];\n        if (!socket) {\n          continue;\n        }\n        results.push(socket.endGroup());\n      }\n      return results;\n    };\n\n    OutPort.prototype.disconnect = function(socketId) {\n      var i, len, results, socket, sockets;\n      if (socketId == null) {\n        socketId = null;\n      }\n      sockets = this.getSockets(socketId);\n      this.checkRequired(sockets);\n      results = [];\n      for (i = 0, len = sockets.length; i < len; i++) {\n        socket = sockets[i];\n        if (!socket) {\n          continue;\n        }\n        results.push(socket.disconnect());\n      }\n      return results;\n    };\n\n    OutPort.prototype.sendIP = function(type, data, options, socketId, autoConnect) {\n      var i, ip, len, pristine, ref, socket, sockets;\n      if (autoConnect == null) {\n        autoConnect = true;\n      }\n      if (IP.isIP(type)) {\n        ip = type;\n        socketId = ip.index;\n      } else {\n        ip = new IP(type, data, options);\n      }\n      sockets = this.getSockets(socketId);\n      this.checkRequired(sockets);\n      if (this.isCaching() && data !== ((ref = this.cache[socketId]) != null ? ref.data : void 0)) {\n        this.cache[socketId] = ip;\n      }\n      pristine = true;\n      for (i = 0, len = sockets.length; i < len; i++) {\n        socket = sockets[i];\n        if (!socket) {\n          continue;\n        }\n        if (pristine) {\n          socket.post(ip, autoConnect);\n          pristine = false;\n        } else {\n          if (ip.clonable) {\n            ip = ip.clone();\n          }\n          socket.post(ip, autoConnect);\n        }\n      }\n      return this;\n    };\n\n    OutPort.prototype.openBracket = function(data, options, socketId) {\n      if (data == null) {\n        data = null;\n      }\n      if (options == null) {\n        options = {};\n      }\n      if (socketId == null) {\n        socketId = null;\n      }\n      return this.sendIP('openBracket', data, options, socketId);\n    };\n\n    OutPort.prototype.data = function(data, options, socketId) {\n      if (options == null) {\n        options = {};\n      }\n      if (socketId == null) {\n        socketId = null;\n      }\n      return this.sendIP('data', data, options, socketId);\n    };\n\n    OutPort.prototype.closeBracket = function(data, options, socketId) {\n      if (data == null) {\n        data = null;\n      }\n      if (options == null) {\n        options = {};\n      }\n      if (socketId == null) {\n        socketId = null;\n      }\n      return this.sendIP('closeBracket', data, options, socketId);\n    };\n\n    OutPort.prototype.checkRequired = function(sockets) {\n      if (sockets.length === 0 && this.isRequired()) {\n        throw new Error((this.getId()) + \": No connections available\");\n      }\n    };\n\n    OutPort.prototype.getSockets = function(socketId) {\n      if (this.isAddressable()) {\n        if (socketId === null) {\n          throw new Error((this.getId()) + \" Socket ID required\");\n        }\n        if (!this.sockets[socketId]) {\n          return [];\n        }\n        return [this.sockets[socketId]];\n      }\n      return this.sockets;\n    };\n\n    OutPort.prototype.isCaching = function() {\n      if (this.options.caching) {\n        return true;\n      }\n      return false;\n    };\n\n    return OutPort;\n\n  })(BasePort);\n\n  module.exports = OutPort;\n\n}).call(this);\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n(function() {\n  var EventEmitter, InPort, InPorts, OutPort, OutPorts, Ports,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  EventEmitter = __webpack_require__(0).EventEmitter;\n\n  InPort = __webpack_require__(19);\n\n  OutPort = __webpack_require__(21);\n\n  Ports = (function(superClass) {\n    extend(Ports, superClass);\n\n    Ports.prototype.model = InPort;\n\n    function Ports(ports) {\n      var name, options;\n      this.ports = {};\n      if (!ports) {\n        return;\n      }\n      for (name in ports) {\n        options = ports[name];\n        this.add(name, options);\n      }\n    }\n\n    Ports.prototype.add = function(name, options, process) {\n      if (name === 'add' || name === 'remove') {\n        throw new Error('Add and remove are restricted port names');\n      }\n      if (!name.match(/^[a-z0-9_\\.\\/]+$/)) {\n        throw new Error(\"Port names can only contain lowercase alphanumeric characters and underscores. '\" + name + \"' not allowed\");\n      }\n      if (this.ports[name]) {\n        this.remove(name);\n      }\n      if (typeof options === 'object' && options.canAttach) {\n        this.ports[name] = options;\n      } else {\n        this.ports[name] = new this.model(options, process);\n      }\n      this[name] = this.ports[name];\n      this.emit('add', name);\n      return this;\n    };\n\n    Ports.prototype.remove = function(name) {\n      if (!this.ports[name]) {\n        throw new Error(\"Port \" + name + \" not defined\");\n      }\n      delete this.ports[name];\n      delete this[name];\n      this.emit('remove', name);\n      return this;\n    };\n\n    return Ports;\n\n  })(EventEmitter);\n\n  exports.InPorts = InPorts = (function(superClass) {\n    extend(InPorts, superClass);\n\n    function InPorts() {\n      return InPorts.__super__.constructor.apply(this, arguments);\n    }\n\n    InPorts.prototype.on = function(name, event, callback) {\n      if (!this.ports[name]) {\n        throw new Error(\"Port \" + name + \" not available\");\n      }\n      return this.ports[name].on(event, callback);\n    };\n\n    InPorts.prototype.once = function(name, event, callback) {\n      if (!this.ports[name]) {\n        throw new Error(\"Port \" + name + \" not available\");\n      }\n      return this.ports[name].once(event, callback);\n    };\n\n    return InPorts;\n\n  })(Ports);\n\n  exports.OutPorts = OutPorts = (function(superClass) {\n    extend(OutPorts, superClass);\n\n    function OutPorts() {\n      return OutPorts.__super__.constructor.apply(this, arguments);\n    }\n\n    OutPorts.prototype.model = OutPort;\n\n    OutPorts.prototype.connect = function(name, socketId) {\n      if (!this.ports[name]) {\n        throw new Error(\"Port \" + name + \" not available\");\n      }\n      return this.ports[name].connect(socketId);\n    };\n\n    OutPorts.prototype.beginGroup = function(name, group, socketId) {\n      if (!this.ports[name]) {\n        throw new Error(\"Port \" + name + \" not available\");\n      }\n      return this.ports[name].beginGroup(group, socketId);\n    };\n\n    OutPorts.prototype.send = function(name, data, socketId) {\n      if (!this.ports[name]) {\n        throw new Error(\"Port \" + name + \" not available\");\n      }\n      return this.ports[name].send(data, socketId);\n    };\n\n    OutPorts.prototype.endGroup = function(name, socketId) {\n      if (!this.ports[name]) {\n        throw new Error(\"Port \" + name + \" not available\");\n      }\n      return this.ports[name].endGroup(socketId);\n    };\n\n    OutPorts.prototype.disconnect = function(name, socketId) {\n      if (!this.ports[name]) {\n        throw new Error(\"Port \" + name + \" not available\");\n      }\n      return this.ports[name].disconnect(socketId);\n    };\n\n    return OutPorts;\n\n  })(Ports);\n\n  exports.normalizePortName = function(name) {\n    var matched, port;\n    port = {\n      name: name\n    };\n    if (name.indexOf('[') === -1) {\n      return port;\n    }\n    matched = name.match(/(.*)\\[([0-9]+)\\]/);\n    if (!(matched != null ? matched.length : void 0)) {\n      return name;\n    }\n    port.name = matched[1];\n    port.index = matched[2];\n    return port;\n  };\n\n}).call(this);\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports) {\n\n(function() {\n  var clone, contains, createReduce, debounce, getKeys, getValues, guessLanguageFromFilename, intersection, isArray, isObject, optimizeCb, reduceRight, unique;\n\n  clone = function(obj) {\n    var flags, key, newInstance;\n    if ((obj == null) || typeof obj !== 'object') {\n      return obj;\n    }\n    if (obj instanceof Date) {\n      return new Date(obj.getTime());\n    }\n    if (obj instanceof RegExp) {\n      flags = '';\n      if (obj.global != null) {\n        flags += 'g';\n      }\n      if (obj.ignoreCase != null) {\n        flags += 'i';\n      }\n      if (obj.multiline != null) {\n        flags += 'm';\n      }\n      if (obj.sticky != null) {\n        flags += 'y';\n      }\n      return new RegExp(obj.source, flags);\n    }\n    newInstance = new obj.constructor();\n    for (key in obj) {\n      newInstance[key] = clone(obj[key]);\n    }\n    return newInstance;\n  };\n\n  guessLanguageFromFilename = function(filename) {\n    if (/.*\\.coffee$/.test(filename)) {\n      return 'coffeescript';\n    }\n    return 'javascript';\n  };\n\n  isArray = function(obj) {\n    if (Array.isArray) {\n      return Array.isArray(obj);\n    }\n    return Object.prototype.toString.call(arg) === '[object Array]';\n  };\n\n  isObject = function(obj) {\n    var type;\n    type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  };\n\n  unique = function(array) {\n    var k, key, output, ref, results, value;\n    output = {};\n    for (key = k = 0, ref = array.length; 0 <= ref ? k < ref : k > ref; key = 0 <= ref ? ++k : --k) {\n      output[array[key]] = array[key];\n    }\n    results = [];\n    for (key in output) {\n      value = output[key];\n      results.push(value);\n    }\n    return results;\n  };\n\n  optimizeCb = function(func, context, argCount) {\n    if (context === void 0) {\n      return func;\n    }\n    switch ((argCount === null ? 3 : argCount)) {\n      case 1:\n        return function(value) {\n          return func.call(context, value);\n        };\n      case 2:\n        return function(value, other) {\n          return func.call(context, value, other);\n        };\n      case 3:\n        return function(value, index, collection) {\n          return func.call(context, value, index, collection);\n        };\n      case 4:\n        return function(accumulator, value, index, collection) {\n          return func.call(context, accumulator, value, index, collection);\n        };\n    }\n    return function() {\n      return func.apply(context, arguments);\n    };\n  };\n\n  createReduce = function(dir) {\n    var iterator;\n    iterator = function(obj, iteratee, memo, keys, index, length) {\n      var currentKey;\n      while (index >= 0 && index < length) {\n        currentKey = keys ? keys[index] : index;\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\n        index += dir;\n      }\n      return memo;\n    };\n    return function(obj, iteratee, memo, context) {\n      var index, keys, length;\n      iteratee = optimizeCb(iteratee, context, 4);\n      keys = Object.keys(obj);\n      length = (keys || obj).length;\n      index = dir > 0 ? 0 : length - 1;\n      if (arguments.length < 3) {\n        memo = obj[keys ? keys[index] : index];\n        index += dir;\n      }\n      return iterator(obj, iteratee, memo, keys, index, length);\n    };\n  };\n\n  reduceRight = createReduce(-1);\n\n  debounce = function(func, wait, immediate) {\n    var args, context, later, result, timeout, timestamp;\n    timeout = void 0;\n    args = void 0;\n    context = void 0;\n    timestamp = void 0;\n    result = void 0;\n    later = function() {\n      var last;\n      last = Date.now - timestamp;\n      if (last < wait && last >= 0) {\n        timeout = setTimeout(later, wait - last);\n      } else {\n        timeout = null;\n        if (!immediate) {\n          result = func.apply(context, args);\n          if (!timeout) {\n            context = args = null;\n          }\n        }\n      }\n    };\n    return function() {\n      var callNow;\n      context = this;\n      args = arguments;\n      timestamp = Date.now;\n      callNow = immediate && !timeout;\n      if (!timeout) {\n        timeout = setTimeout(later, wait);\n      }\n      if (callNow) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n      return result;\n    };\n  };\n\n  getKeys = function(obj) {\n    var key, keys;\n    if (!isObject(obj)) {\n      return [];\n    }\n    if (Object.keys) {\n      return Object.keys(obj);\n    }\n    keys = [];\n    for (key in obj) {\n      if (obj.has(key)) {\n        keys.push(key);\n      }\n    }\n    return keys;\n  };\n\n  getValues = function(obj) {\n    var i, keys, length, values;\n    keys = getKeys(obj);\n    length = keys.length;\n    values = Array(length);\n    i = 0;\n    while (i < length) {\n      values[i] = obj[keys[i]];\n      i++;\n    }\n    return values;\n  };\n\n  contains = function(obj, item, fromIndex) {\n    if (!isArray(obj)) {\n      obj = getValues(obj);\n    }\n    if (typeof fromIndex !== 'number' || guard) {\n      fromIndex = 0;\n    }\n    return obj.indexOf(item) >= 0;\n  };\n\n  intersection = function(array) {\n    var argsLength, i, item, j, k, l, ref, ref1, result;\n    result = [];\n    argsLength = arguments.length;\n    for (i = k = 0, ref = array.length; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {\n      item = array[i];\n      if (contains(result, item)) {\n        continue;\n      }\n      for (j = l = 1, ref1 = argsLength; 1 <= ref1 ? l <= ref1 : l >= ref1; j = 1 <= ref1 ? ++l : --l) {\n        if (!contains(arguments[j], item)) {\n          break;\n        }\n      }\n      if (j === argsLength) {\n        result.push(item);\n      }\n    }\n    return result;\n  };\n\n  exports.clone = clone;\n\n  exports.guessLanguageFromFilename = guessLanguageFromFilename;\n\n  exports.optimizeCb = optimizeCb;\n\n  exports.reduceRight = reduceRight;\n\n  exports.debounce = debounce;\n\n  exports.unique = unique;\n\n  exports.intersection = intersection;\n\n  exports.getValues = getValues;\n\n}).call(this);\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar BasePort, EventEmitter, validTypes,\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nEventEmitter = __webpack_require__(0).EventEmitter;\n\nvalidTypes = ['all', 'string', 'number', 'int', 'object', 'array', 'boolean', 'color', 'date', 'bang', 'function', 'buffer', 'stream'];\n\nBasePort = (function(superClass) {\n  extend(BasePort, superClass);\n\n  function BasePort(options) {\n    this.handleOptions(options);\n    this.sockets = [];\n    this.node = null;\n    this.name = null;\n  }\n\n  BasePort.prototype.handleOptions = function(options) {\n    if (!options) {\n      options = {};\n    }\n    if (!options.datatype) {\n      options.datatype = 'all';\n    }\n    if (options.required === void 0) {\n      options.required = false;\n    }\n    if (options.datatype === 'integer') {\n      options.datatype = 'int';\n    }\n    if (validTypes.indexOf(options.datatype) === -1) {\n      throw new Error(\"Invalid port datatype '\" + options.datatype + \"' specified, valid are \" + (validTypes.join(', ')));\n    }\n    if (options.type && options.type.indexOf('/') === -1) {\n      throw new Error(\"Invalid port type '\" + options.type + \"' specified. Should be URL or MIME type\");\n    }\n    return this.options = options;\n  };\n\n  BasePort.prototype.getId = function() {\n    if (!(this.node && this.name)) {\n      return 'Port';\n    }\n    return this.node + \" \" + (this.name.toUpperCase());\n  };\n\n  BasePort.prototype.getDataType = function() {\n    return this.options.datatype;\n  };\n\n  BasePort.prototype.getDescription = function() {\n    return this.options.description;\n  };\n\n  BasePort.prototype.attach = function(socket, index) {\n    if (index == null) {\n      index = null;\n    }\n    if (!this.isAddressable() || index === null) {\n      index = this.sockets.length;\n    }\n    this.sockets[index] = socket;\n    this.attachSocket(socket, index);\n    if (this.isAddressable()) {\n      this.emit('attach', socket, index);\n      return;\n    }\n    return this.emit('attach', socket);\n  };\n\n  BasePort.prototype.attachSocket = function() {};\n\n  BasePort.prototype.detach = function(socket) {\n    var index;\n    index = this.sockets.indexOf(socket);\n    if (index === -1) {\n      return;\n    }\n    this.sockets[index] = void 0;\n    if (this.isAddressable()) {\n      this.emit('detach', socket, index);\n      return;\n    }\n    return this.emit('detach', socket);\n  };\n\n  BasePort.prototype.isAddressable = function() {\n    if (this.options.addressable) {\n      return true;\n    }\n    return false;\n  };\n\n  BasePort.prototype.isBuffered = function() {\n    if (this.options.buffered) {\n      return true;\n    }\n    return false;\n  };\n\n  BasePort.prototype.isRequired = function() {\n    if (this.options.required) {\n      return true;\n    }\n    return false;\n  };\n\n  BasePort.prototype.isAttached = function(socketId) {\n    if (socketId == null) {\n      socketId = null;\n    }\n    if (this.isAddressable() && socketId !== null) {\n      if (this.sockets[socketId]) {\n        return true;\n      }\n      return false;\n    }\n    if (this.sockets.length) {\n      return true;\n    }\n    return false;\n  };\n\n  BasePort.prototype.listAttached = function() {\n    var attached, i, idx, len, ref, socket;\n    attached = [];\n    ref = this.sockets;\n    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {\n      socket = ref[idx];\n      if (!socket) {\n        continue;\n      }\n      attached.push(idx);\n    }\n    return attached;\n  };\n\n  BasePort.prototype.isConnected = function(socketId) {\n    var connected;\n    if (socketId == null) {\n      socketId = null;\n    }\n    if (this.isAddressable()) {\n      if (socketId === null) {\n        throw new Error((this.getId()) + \": Socket ID required\");\n      }\n      if (!this.sockets[socketId]) {\n        throw new Error((this.getId()) + \": Socket \" + socketId + \" not available\");\n      }\n      return this.sockets[socketId].isConnected();\n    }\n    connected = false;\n    this.sockets.forEach(function(socket) {\n      if (!socket) {\n        return;\n      }\n      if (socket.isConnected()) {\n        return connected = true;\n      }\n    });\n    return connected;\n  };\n\n  BasePort.prototype.canAttach = function() {\n    return true;\n  };\n\n  return BasePort;\n\n})(EventEmitter);\n\nmodule.exports = BasePort;\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component, EventEmitter, IP, ProcessContext, ProcessInput, ProcessOutput, debug, debugBrackets, debugSend, ports,\n  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty,\n  slice = [].slice;\n\nEventEmitter = __webpack_require__(0).EventEmitter;\n\nports = __webpack_require__(29);\n\nIP = __webpack_require__(3);\n\ndebug = __webpack_require__(4)('noflo:component');\n\ndebugBrackets = __webpack_require__(4)('noflo:component:brackets');\n\ndebugSend = __webpack_require__(4)('noflo:component:send');\n\nComponent = (function(superClass) {\n  extend(Component, superClass);\n\n  Component.prototype.description = '';\n\n  Component.prototype.icon = null;\n\n  function Component(options) {\n    this.error = bind(this.error, this);\n    var ref, ref1, ref2;\n    if (!options) {\n      options = {};\n    }\n    if (!options.inPorts) {\n      options.inPorts = {};\n    }\n    if (options.inPorts instanceof ports.InPorts) {\n      this.inPorts = options.inPorts;\n    } else {\n      this.inPorts = new ports.InPorts(options.inPorts);\n    }\n    if (!options.outPorts) {\n      options.outPorts = {};\n    }\n    if (options.outPorts instanceof ports.OutPorts) {\n      this.outPorts = options.outPorts;\n    } else {\n      this.outPorts = new ports.OutPorts(options.outPorts);\n    }\n    if (options.icon) {\n      this.icon = options.icon;\n    }\n    if (options.description) {\n      this.description = options.description;\n    }\n    this.started = false;\n    this.load = 0;\n    this.ordered = (ref = options.ordered) != null ? ref : false;\n    this.autoOrdering = (ref1 = options.autoOrdering) != null ? ref1 : null;\n    this.outputQ = [];\n    this.bracketContext = {\n      \"in\": {},\n      out: {}\n    };\n    this.activateOnInput = (ref2 = options.activateOnInput) != null ? ref2 : true;\n    this.forwardBrackets = {\n      \"in\": ['out', 'error']\n    };\n    if ('forwardBrackets' in options) {\n      this.forwardBrackets = options.forwardBrackets;\n    }\n    if (typeof options.process === 'function') {\n      this.process(options.process);\n    }\n  }\n\n  Component.prototype.getDescription = function() {\n    return this.description;\n  };\n\n  Component.prototype.isReady = function() {\n    return true;\n  };\n\n  Component.prototype.isSubgraph = function() {\n    return false;\n  };\n\n  Component.prototype.setIcon = function(icon) {\n    this.icon = icon;\n    return this.emit('icon', this.icon);\n  };\n\n  Component.prototype.getIcon = function() {\n    return this.icon;\n  };\n\n  Component.prototype.error = function(e, groups, errorPort, scope) {\n    var group, i, j, len1, len2;\n    if (groups == null) {\n      groups = [];\n    }\n    if (errorPort == null) {\n      errorPort = 'error';\n    }\n    if (scope == null) {\n      scope = null;\n    }\n    if (this.outPorts[errorPort] && (this.outPorts[errorPort].isAttached() || !this.outPorts[errorPort].isRequired())) {\n      for (i = 0, len1 = groups.length; i < len1; i++) {\n        group = groups[i];\n        this.outPorts[errorPort].openBracket(group, {\n          scope: scope\n        });\n      }\n      this.outPorts[errorPort].data(e, {\n        scope: scope\n      });\n      for (j = 0, len2 = groups.length; j < len2; j++) {\n        group = groups[j];\n        this.outPorts[errorPort].closeBracket(group, {\n          scope: scope\n        });\n      }\n      return;\n    }\n    throw e;\n  };\n\n  Component.prototype.setUp = function(callback) {\n    return callback();\n  };\n\n  Component.prototype.tearDown = function(callback) {\n    return callback();\n  };\n\n  Component.prototype.start = function(callback) {\n    if (this.isStarted()) {\n      return callback();\n    }\n    return this.setUp((function(_this) {\n      return function(err) {\n        if (err) {\n          return callback(err);\n        }\n        _this.started = true;\n        _this.emit('start');\n        return callback(null);\n      };\n    })(this));\n  };\n\n  Component.prototype.shutdown = function(callback) {\n    var finalize;\n    finalize = (function(_this) {\n      return function() {\n        var inPort, inPorts, portName;\n        inPorts = _this.inPorts.ports || _this.inPorts;\n        for (portName in inPorts) {\n          inPort = inPorts[portName];\n          if (typeof inPort.clear !== 'function') {\n            continue;\n          }\n          inPort.clear();\n        }\n        _this.bracketContext = {\n          \"in\": {},\n          out: {}\n        };\n        if (!_this.isStarted()) {\n          return callback();\n        }\n        _this.started = false;\n        _this.emit('end');\n        return callback();\n      };\n    })(this);\n    return this.tearDown((function(_this) {\n      return function(err) {\n        var checkLoad;\n        if (err) {\n          return callback(err);\n        }\n        if (_this.load > 0) {\n          checkLoad = function(load) {\n            if (load > 0) {\n              return;\n            }\n            this.removeListener('deactivate', checkLoad);\n            return finalize();\n          };\n          _this.on('deactivate', checkLoad);\n          return;\n        }\n        return finalize();\n      };\n    })(this));\n  };\n\n  Component.prototype.isStarted = function() {\n    return this.started;\n  };\n\n  Component.prototype.prepareForwarding = function() {\n    var i, inPort, len1, outPort, outPorts, ref, results, tmp;\n    ref = this.forwardBrackets;\n    results = [];\n    for (inPort in ref) {\n      outPorts = ref[inPort];\n      if (!(inPort in this.inPorts.ports)) {\n        delete this.forwardBrackets[inPort];\n        continue;\n      }\n      tmp = [];\n      for (i = 0, len1 = outPorts.length; i < len1; i++) {\n        outPort = outPorts[i];\n        if (outPort in this.outPorts.ports) {\n          tmp.push(outPort);\n        }\n      }\n      if (tmp.length === 0) {\n        results.push(delete this.forwardBrackets[inPort]);\n      } else {\n        results.push(this.forwardBrackets[inPort] = tmp);\n      }\n    }\n    return results;\n  };\n\n  Component.prototype.isLegacy = function() {\n    if (this.handle) {\n      return false;\n    }\n    if (this._wpData) {\n      return false;\n    }\n    return true;\n  };\n\n  Component.prototype.process = function(handle) {\n    var fn, name, port, ref;\n    if (typeof handle !== 'function') {\n      throw new Error(\"Process handler must be a function\");\n    }\n    if (!this.inPorts) {\n      throw new Error(\"Component ports must be defined before process function\");\n    }\n    this.prepareForwarding();\n    this.handle = handle;\n    ref = this.inPorts.ports;\n    fn = (function(_this) {\n      return function(name, port) {\n        if (!port.name) {\n          port.name = name;\n        }\n        return port.on('ip', function(ip) {\n          return _this.handleIP(ip, port);\n        });\n      };\n    })(this);\n    for (name in ref) {\n      port = ref[name];\n      fn(name, port);\n    }\n    return this;\n  };\n\n  Component.prototype.isForwardingInport = function(port) {\n    var portName;\n    if (typeof port === 'string') {\n      portName = port;\n    } else {\n      portName = port.name;\n    }\n    if (portName in this.forwardBrackets) {\n      return true;\n    }\n    return false;\n  };\n\n  Component.prototype.isForwardingOutport = function(inport, outport) {\n    var inportName, outportName;\n    if (typeof inport === 'string') {\n      inportName = inport;\n    } else {\n      inportName = inport.name;\n    }\n    if (typeof outport === 'string') {\n      outportName = outport;\n    } else {\n      outportName = outport.name;\n    }\n    if (!this.forwardBrackets[inportName]) {\n      return false;\n    }\n    if (this.forwardBrackets[inportName].indexOf(outportName) !== -1) {\n      return true;\n    }\n    return false;\n  };\n\n  Component.prototype.isOrdered = function() {\n    if (this.ordered) {\n      return true;\n    }\n    if (this.autoOrdering) {\n      return true;\n    }\n    return false;\n  };\n\n  Component.prototype.handleIP = function(ip, port) {\n    var buf, context, dataPackets, e, input, output, result;\n    if (!port.options.triggering) {\n      return;\n    }\n    if (ip.type === 'openBracket' && this.autoOrdering === null && !this.ordered) {\n      debug(this.nodeId + \" port '\" + port.name + \"' entered auto-ordering mode\");\n      this.autoOrdering = true;\n    }\n    result = {};\n    if (this.isForwardingInport(port)) {\n      if (ip.type === 'openBracket') {\n        return;\n      }\n      if (ip.type === 'closeBracket') {\n        buf = port.getBuffer(ip.scope, ip.index);\n        dataPackets = buf.filter(function(ip) {\n          return ip.type === 'data';\n        });\n        if (this.outputQ.length >= this.load && dataPackets.length === 0) {\n          if (buf[0] !== ip) {\n            return;\n          }\n          port.get(ip.scope, ip.index);\n          context = this.getBracketContext('in', port.name, ip.scope, ip.index).pop();\n          context.closeIp = ip;\n          debugBrackets(this.nodeId + \" closeBracket-C from '\" + context.source + \"' to \" + context.ports + \": '\" + ip.data + \"'\");\n          result = {\n            __resolved: true,\n            __bracketClosingAfter: [context]\n          };\n          this.outputQ.push(result);\n          this.processOutputQueue();\n        }\n        if (!dataPackets.length) {\n          return;\n        }\n      }\n    }\n    context = new ProcessContext(ip, this, port, result);\n    input = new ProcessInput(this.inPorts, context);\n    output = new ProcessOutput(this.outPorts, context);\n    try {\n      this.handle(input, output, context);\n    } catch (error1) {\n      e = error1;\n      this.deactivate(context);\n      output.sendDone(e);\n    }\n    if (context.activated) {\n      return;\n    }\n    if (port.isAddressable()) {\n      debug(this.nodeId + \" packet on '\" + port.name + \"[\" + ip.index + \"]' didn't match preconditions: \" + ip.type);\n      return;\n    }\n    debug(this.nodeId + \" packet on '\" + port.name + \"' didn't match preconditions: \" + ip.type);\n  };\n\n  Component.prototype.getBracketContext = function(type, port, scope, idx) {\n    var index, name, portsList, ref;\n    ref = ports.normalizePortName(port), name = ref.name, index = ref.index;\n    if (idx != null) {\n      index = idx;\n    }\n    portsList = type === 'in' ? this.inPorts : this.outPorts;\n    if (portsList[name].isAddressable()) {\n      port = name + \"[\" + index + \"]\";\n    }\n    if (!this.bracketContext[type][port]) {\n      this.bracketContext[type][port] = {};\n    }\n    if (!this.bracketContext[type][port][scope]) {\n      this.bracketContext[type][port][scope] = [];\n    }\n    return this.bracketContext[type][port][scope];\n  };\n\n  Component.prototype.addToResult = function(result, port, ip, before) {\n    var idx, index, method, name, ref;\n    if (before == null) {\n      before = false;\n    }\n    ref = ports.normalizePortName(port), name = ref.name, index = ref.index;\n    method = before ? 'unshift' : 'push';\n    if (this.outPorts[name].isAddressable()) {\n      idx = index ? parseInt(index) : ip.index;\n      if (!result[name]) {\n        result[name] = {};\n      }\n      if (!result[name][idx]) {\n        result[name][idx] = [];\n      }\n      ip.index = idx;\n      result[name][idx][method](ip);\n      return;\n    }\n    if (!result[name]) {\n      result[name] = [];\n    }\n    return result[name][method](ip);\n  };\n\n  Component.prototype.getForwardableContexts = function(inport, outport, contexts) {\n    var forwardable, index, name, ref;\n    ref = ports.normalizePortName(outport), name = ref.name, index = ref.index;\n    forwardable = [];\n    contexts.forEach((function(_this) {\n      return function(ctx, idx) {\n        var outContext;\n        if (!_this.isForwardingOutport(inport, name)) {\n          return;\n        }\n        if (ctx.ports.indexOf(outport) !== -1) {\n          return;\n        }\n        outContext = _this.getBracketContext('out', name, ctx.ip.scope, index)[idx];\n        if (outContext) {\n          if (outContext.ip.data === ctx.ip.data && outContext.ports.indexOf(outport) !== -1) {\n            return;\n          }\n        }\n        return forwardable.push(ctx);\n      };\n    })(this));\n    return forwardable;\n  };\n\n  Component.prototype.addBracketForwards = function(result) {\n    var context, i, ipClone, j, k, l, len1, len2, len3, len4, port, ref, ref1, ref2, ref3, ref4, ref5;\n    if ((ref = result.__bracketClosingBefore) != null ? ref.length : void 0) {\n      ref1 = result.__bracketClosingBefore;\n      for (i = 0, len1 = ref1.length; i < len1; i++) {\n        context = ref1[i];\n        debugBrackets(this.nodeId + \" closeBracket-A from '\" + context.source + \"' to \" + context.ports + \": '\" + context.closeIp.data + \"'\");\n        if (!context.ports.length) {\n          continue;\n        }\n        ref2 = context.ports;\n        for (j = 0, len2 = ref2.length; j < len2; j++) {\n          port = ref2[j];\n          ipClone = context.closeIp.clone();\n          this.addToResult(result, port, ipClone, true);\n          this.getBracketContext('out', port, ipClone.scope).pop();\n        }\n      }\n    }\n    if (result.__bracketContext) {\n      Object.keys(result.__bracketContext).reverse().forEach((function(_this) {\n        return function(inport) {\n          var ctx, datas, forwardedOpens, idx, idxIps, ip, ips, k, l, len3, len4, len5, m, outport, portIdentifier, results, unforwarded;\n          context = result.__bracketContext[inport];\n          if (!context.length) {\n            return;\n          }\n          results = [];\n          for (outport in result) {\n            ips = result[outport];\n            if (outport.indexOf('__') === 0) {\n              continue;\n            }\n            if (_this.outPorts[outport].isAddressable()) {\n              for (idx in ips) {\n                idxIps = ips[idx];\n                datas = idxIps.filter(function(ip) {\n                  return ip.type === 'data';\n                });\n                if (!datas.length) {\n                  continue;\n                }\n                portIdentifier = outport + \"[\" + idx + \"]\";\n                unforwarded = _this.getForwardableContexts(inport, portIdentifier, context);\n                if (!unforwarded.length) {\n                  continue;\n                }\n                forwardedOpens = [];\n                for (k = 0, len3 = unforwarded.length; k < len3; k++) {\n                  ctx = unforwarded[k];\n                  debugBrackets(_this.nodeId + \" openBracket from '\" + inport + \"' to '\" + portIdentifier + \"': '\" + ctx.ip.data + \"'\");\n                  ipClone = ctx.ip.clone();\n                  ipClone.index = parseInt(idx);\n                  forwardedOpens.push(ipClone);\n                  ctx.ports.push(portIdentifier);\n                  _this.getBracketContext('out', outport, ctx.ip.scope, idx).push(ctx);\n                }\n                forwardedOpens.reverse();\n                for (l = 0, len4 = forwardedOpens.length; l < len4; l++) {\n                  ip = forwardedOpens[l];\n                  _this.addToResult(result, outport, ip, true);\n                }\n              }\n              continue;\n            }\n            datas = ips.filter(function(ip) {\n              return ip.type === 'data';\n            });\n            if (!datas.length) {\n              continue;\n            }\n            unforwarded = _this.getForwardableContexts(inport, outport, context);\n            if (!unforwarded.length) {\n              continue;\n            }\n            forwardedOpens = [];\n            for (m = 0, len5 = unforwarded.length; m < len5; m++) {\n              ctx = unforwarded[m];\n              debugBrackets(_this.nodeId + \" openBracket from '\" + inport + \"' to '\" + outport + \"': '\" + ctx.ip.data + \"'\");\n              forwardedOpens.push(ctx.ip.clone());\n              ctx.ports.push(outport);\n              _this.getBracketContext('out', outport, ctx.ip.scope).push(ctx);\n            }\n            forwardedOpens.reverse();\n            results.push((function() {\n              var len6, n, results1;\n              results1 = [];\n              for (n = 0, len6 = forwardedOpens.length; n < len6; n++) {\n                ip = forwardedOpens[n];\n                results1.push(this.addToResult(result, outport, ip, true));\n              }\n              return results1;\n            }).call(_this));\n          }\n          return results;\n        };\n      })(this));\n    }\n    if ((ref3 = result.__bracketClosingAfter) != null ? ref3.length : void 0) {\n      ref4 = result.__bracketClosingAfter;\n      for (k = 0, len3 = ref4.length; k < len3; k++) {\n        context = ref4[k];\n        debugBrackets(this.nodeId + \" closeBracket-B from '\" + context.source + \"' to \" + context.ports + \": '\" + context.closeIp.data + \"'\");\n        if (!context.ports.length) {\n          continue;\n        }\n        ref5 = context.ports;\n        for (l = 0, len4 = ref5.length; l < len4; l++) {\n          port = ref5[l];\n          ipClone = context.closeIp.clone();\n          this.addToResult(result, port, ipClone, false);\n          this.getBracketContext('out', port, ipClone.scope).pop();\n        }\n      }\n    }\n    delete result.__bracketClosingBefore;\n    delete result.__bracketContext;\n    return delete result.__bracketClosingAfter;\n  };\n\n  Component.prototype.processOutputQueue = function() {\n    var i, idx, idxIps, ip, ips, j, len1, len2, port, portIdentifier, result, results;\n    results = [];\n    while (this.outputQ.length > 0) {\n      result = this.outputQ[0];\n      if (!result.__resolved) {\n        break;\n      }\n      this.addBracketForwards(result);\n      for (port in result) {\n        ips = result[port];\n        if (port.indexOf('__') === 0) {\n          continue;\n        }\n        if (this.outPorts.ports[port].isAddressable()) {\n          for (idx in ips) {\n            idxIps = ips[idx];\n            idx = parseInt(idx);\n            if (!this.outPorts.ports[port].isAttached(idx)) {\n              continue;\n            }\n            for (i = 0, len1 = idxIps.length; i < len1; i++) {\n              ip = idxIps[i];\n              portIdentifier = port + \"[\" + ip.index + \"]\";\n              if (ip.type === 'openBracket') {\n                debugSend(this.nodeId + \" sending \" + portIdentifier + \" < '\" + ip.data + \"'\");\n              } else if (ip.type === 'closeBracket') {\n                debugSend(this.nodeId + \" sending \" + portIdentifier + \" > '\" + ip.data + \"'\");\n              } else {\n                debugSend(this.nodeId + \" sending \" + portIdentifier + \" DATA\");\n              }\n              this.outPorts[port].sendIP(ip);\n            }\n          }\n          continue;\n        }\n        if (!this.outPorts.ports[port].isAttached()) {\n          continue;\n        }\n        for (j = 0, len2 = ips.length; j < len2; j++) {\n          ip = ips[j];\n          portIdentifier = port;\n          if (ip.type === 'openBracket') {\n            debugSend(this.nodeId + \" sending \" + portIdentifier + \" < '\" + ip.data + \"'\");\n          } else if (ip.type === 'closeBracket') {\n            debugSend(this.nodeId + \" sending \" + portIdentifier + \" > '\" + ip.data + \"'\");\n          } else {\n            debugSend(this.nodeId + \" sending \" + portIdentifier + \" DATA\");\n          }\n          this.outPorts[port].sendIP(ip);\n        }\n      }\n      results.push(this.outputQ.shift());\n    }\n    return results;\n  };\n\n  Component.prototype.activate = function(context) {\n    if (context.activated) {\n      return;\n    }\n    context.activated = true;\n    context.deactivated = false;\n    this.load++;\n    this.emit('activate', this.load);\n    if (this.ordered || this.autoOrdering) {\n      return this.outputQ.push(context.result);\n    }\n  };\n\n  Component.prototype.deactivate = function(context) {\n    if (context.deactivated) {\n      return;\n    }\n    context.deactivated = true;\n    context.activated = false;\n    if (this.isOrdered()) {\n      this.processOutputQueue();\n    }\n    this.load--;\n    return this.emit('deactivate', this.load);\n  };\n\n  return Component;\n\n})(EventEmitter);\n\nexports.Component = Component;\n\nProcessContext = (function() {\n  function ProcessContext(ip1, nodeInstance, port1, result1) {\n    this.ip = ip1;\n    this.nodeInstance = nodeInstance;\n    this.port = port1;\n    this.result = result1;\n    this.scope = this.ip.scope;\n    this.activated = false;\n    this.deactivated = false;\n  }\n\n  ProcessContext.prototype.activate = function() {\n    if (this.result.__resolved || this.nodeInstance.outputQ.indexOf(this.result) === -1) {\n      this.result = {};\n    }\n    return this.nodeInstance.activate(this);\n  };\n\n  ProcessContext.prototype.deactivate = function() {\n    if (!this.result.__resolved) {\n      this.result.__resolved = true;\n    }\n    return this.nodeInstance.deactivate(this);\n  };\n\n  return ProcessContext;\n\n})();\n\nProcessInput = (function() {\n  function ProcessInput(ports1, context1) {\n    this.ports = ports1;\n    this.context = context1;\n    this.nodeInstance = this.context.nodeInstance;\n    this.ip = this.context.ip;\n    this.port = this.context.port;\n    this.result = this.context.result;\n    this.scope = this.context.scope;\n  }\n\n  ProcessInput.prototype.activate = function() {\n    if (this.context.activated) {\n      return;\n    }\n    if (this.nodeInstance.isOrdered()) {\n      this.result.__resolved = false;\n    }\n    this.nodeInstance.activate(this.context);\n    if (this.port.isAddressable()) {\n      return debug(this.nodeInstance.nodeId + \" packet on '\" + this.port.name + \"[\" + this.ip.index + \"]' caused activation \" + this.nodeInstance.load + \": \" + this.ip.type);\n    } else {\n      return debug(this.nodeInstance.nodeId + \" packet on '\" + this.port.name + \"' caused activation \" + this.nodeInstance.load + \": \" + this.ip.type);\n    }\n  };\n\n  ProcessInput.prototype.attached = function() {\n    var args, i, len1, port, res;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    if (!args.length) {\n      args = ['in'];\n    }\n    res = [];\n    for (i = 0, len1 = args.length; i < len1; i++) {\n      port = args[i];\n      res.push(this.ports[port].listAttached());\n    }\n    if (args.length === 1) {\n      return res.pop();\n    }\n    return res;\n  };\n\n  ProcessInput.prototype.has = function() {\n    var args, i, len1, port, validate;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    if (!args.length) {\n      args = ['in'];\n    }\n    if (typeof args[args.length - 1] === 'function') {\n      validate = args.pop();\n    } else {\n      validate = function() {\n        return true;\n      };\n    }\n    for (i = 0, len1 = args.length; i < len1; i++) {\n      port = args[i];\n      if (Array.isArray(port)) {\n        if (!this.ports[port[0]].isAddressable()) {\n          throw new Error(\"Non-addressable ports, access must be with string \" + port[0]);\n        }\n        if (!this.ports[port[0]].has(this.scope, port[1], validate)) {\n          return false;\n        }\n        continue;\n      }\n      if (this.ports[port].isAddressable()) {\n        throw new Error(\"For addressable ports, access must be with array [\" + port + \", idx]\");\n      }\n      if (!this.ports[port].has(this.scope, validate)) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  ProcessInput.prototype.hasData = function() {\n    var args;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    if (!args.length) {\n      args = ['in'];\n    }\n    args.push(function(ip) {\n      return ip.type === 'data';\n    });\n    return this.has.apply(this, args);\n  };\n\n  ProcessInput.prototype.hasStream = function() {\n    var args, dataBrackets, hasData, i, len1, port, portBrackets, validate, validateStream;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    if (!args.length) {\n      args = ['in'];\n    }\n    if (typeof args[args.length - 1] === 'function') {\n      validateStream = args.pop();\n    } else {\n      validateStream = function() {\n        return true;\n      };\n    }\n    for (i = 0, len1 = args.length; i < len1; i++) {\n      port = args[i];\n      portBrackets = [];\n      dataBrackets = [];\n      hasData = false;\n      validate = function(ip) {\n        if (ip.type === 'openBracket') {\n          portBrackets.push(ip.data);\n          return false;\n        }\n        if (ip.type === 'data') {\n          hasData = validateStream(ip, portBrackets);\n          if (!portBrackets.length) {\n            return hasData;\n          }\n          return false;\n        }\n        if (ip.type === 'closeBracket') {\n          portBrackets.pop();\n          if (portBrackets.length) {\n            return false;\n          }\n          if (!hasData) {\n            return false;\n          }\n          return true;\n        }\n      };\n      if (!this.has(port, validate)) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  ProcessInput.prototype.get = function() {\n    var args, i, idx, ip, len1, port, portname, res;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    this.activate();\n    if (!args.length) {\n      args = ['in'];\n    }\n    res = [];\n    for (i = 0, len1 = args.length; i < len1; i++) {\n      port = args[i];\n      if (Array.isArray(port)) {\n        portname = port[0], idx = port[1];\n        if (!this.ports[portname].isAddressable()) {\n          throw new Error('Non-addressable ports, access must be with string portname');\n        }\n      } else {\n        portname = port;\n        if (this.ports[portname].isAddressable()) {\n          throw new Error('For addressable ports, access must be with array [portname, idx]');\n        }\n      }\n      if (this.nodeInstance.isForwardingInport(portname)) {\n        ip = this.__getForForwarding(portname, idx);\n        res.push(ip);\n        continue;\n      }\n      ip = this.ports[portname].get(this.scope, idx);\n      res.push(ip);\n    }\n    if (args.length === 1) {\n      return res[0];\n    } else {\n      return res;\n    }\n  };\n\n  ProcessInput.prototype.__getForForwarding = function(port, idx) {\n    var context, dataIp, i, ip, len1, prefix;\n    prefix = [];\n    dataIp = null;\n    while (true) {\n      ip = this.ports[port].get(this.scope, idx);\n      if (!ip) {\n        break;\n      }\n      if (ip.type === 'data') {\n        dataIp = ip;\n        break;\n      }\n      prefix.push(ip);\n    }\n    for (i = 0, len1 = prefix.length; i < len1; i++) {\n      ip = prefix[i];\n      if (ip.type === 'closeBracket') {\n        if (!this.result.__bracketClosingBefore) {\n          this.result.__bracketClosingBefore = [];\n        }\n        context = this.nodeInstance.getBracketContext('in', port, this.scope, idx).pop();\n        context.closeIp = ip;\n        this.result.__bracketClosingBefore.push(context);\n        continue;\n      }\n      if (ip.type === 'openBracket') {\n        this.nodeInstance.getBracketContext('in', port, this.scope, idx).push({\n          ip: ip,\n          ports: [],\n          source: port\n        });\n        continue;\n      }\n    }\n    if (!this.result.__bracketContext) {\n      this.result.__bracketContext = {};\n    }\n    this.result.__bracketContext[port] = this.nodeInstance.getBracketContext('in', port, this.scope, idx).slice(0);\n    return dataIp;\n  };\n\n  ProcessInput.prototype.getData = function() {\n    var args, datas, i, len1, packet, port;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    if (!args.length) {\n      args = ['in'];\n    }\n    datas = [];\n    for (i = 0, len1 = args.length; i < len1; i++) {\n      port = args[i];\n      packet = this.get(port);\n      if (packet == null) {\n        datas.push(packet);\n        continue;\n      }\n      while (packet.type !== 'data') {\n        packet = this.get(port);\n        if (!packet) {\n          break;\n        }\n      }\n      datas.push(packet.data);\n    }\n    if (args.length === 1) {\n      return datas.pop();\n    }\n    return datas;\n  };\n\n  ProcessInput.prototype.getStream = function() {\n    var args, datas, hasData, i, ip, len1, port, portBrackets, portPackets;\n    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    if (!args.length) {\n      args = ['in'];\n    }\n    datas = [];\n    for (i = 0, len1 = args.length; i < len1; i++) {\n      port = args[i];\n      portBrackets = [];\n      portPackets = [];\n      hasData = false;\n      ip = this.get(port);\n      if (!ip) {\n        datas.push(void 0);\n      }\n      while (ip) {\n        if (ip.type === 'openBracket') {\n          if (!portBrackets.length) {\n            portPackets = [];\n            hasData = false;\n          }\n          portBrackets.push(ip.data);\n          portPackets.push(ip);\n        }\n        if (ip.type === 'data') {\n          portPackets.push(ip);\n          hasData = true;\n          if (!portBrackets.length) {\n            break;\n          }\n        }\n        if (ip.type === 'closeBracket') {\n          portPackets.push(ip);\n          portBrackets.pop();\n          if (hasData && !portBrackets.length) {\n            break;\n          }\n        }\n        ip = this.get(port);\n      }\n      datas.push(portPackets);\n    }\n    if (args.length === 1) {\n      return datas.pop();\n    }\n    return datas;\n  };\n\n  return ProcessInput;\n\n})();\n\nProcessOutput = (function() {\n  function ProcessOutput(ports1, context1) {\n    this.ports = ports1;\n    this.context = context1;\n    this.nodeInstance = this.context.nodeInstance;\n    this.ip = this.context.ip;\n    this.result = this.context.result;\n    this.scope = this.context.scope;\n  }\n\n  ProcessOutput.prototype.isError = function(err) {\n    return err instanceof Error || Array.isArray(err) && err.length > 0 && err[0] instanceof Error;\n  };\n\n  ProcessOutput.prototype.error = function(err) {\n    var e, i, j, len1, len2, multiple, results;\n    multiple = Array.isArray(err);\n    if (!multiple) {\n      err = [err];\n    }\n    if ('error' in this.ports && (this.ports.error.isAttached() || !this.ports.error.isRequired())) {\n      if (multiple) {\n        this.sendIP('error', new IP('openBracket'));\n      }\n      for (i = 0, len1 = err.length; i < len1; i++) {\n        e = err[i];\n        this.sendIP('error', e);\n      }\n      if (multiple) {\n        return this.sendIP('error', new IP('closeBracket'));\n      }\n    } else {\n      results = [];\n      for (j = 0, len2 = err.length; j < len2; j++) {\n        e = err[j];\n        throw e;\n      }\n      return results;\n    }\n  };\n\n  ProcessOutput.prototype.sendIP = function(port, packet) {\n    var ip;\n    if (!IP.isIP(packet)) {\n      ip = new IP('data', packet);\n    } else {\n      ip = packet;\n    }\n    if (this.scope !== null && ip.scope === null) {\n      ip.scope = this.scope;\n    }\n    if (this.nodeInstance.outPorts[port].isAddressable() && ip.index === null) {\n      throw new Error('Sending packets to addressable ports requires specifying index');\n    }\n    if (this.nodeInstance.isOrdered()) {\n      this.nodeInstance.addToResult(this.result, port, ip);\n      return;\n    }\n    return this.nodeInstance.outPorts[port].sendIP(ip);\n  };\n\n  ProcessOutput.prototype.send = function(outputMap) {\n    var componentPorts, i, len1, mapIsInPorts, packet, port, ref, results;\n    if (this.isError(outputMap)) {\n      return this.error(outputMap);\n    }\n    componentPorts = [];\n    mapIsInPorts = false;\n    ref = Object.keys(this.ports.ports);\n    for (i = 0, len1 = ref.length; i < len1; i++) {\n      port = ref[i];\n      if (port !== 'error' && port !== 'ports' && port !== '_callbacks') {\n        componentPorts.push(port);\n      }\n      if (!mapIsInPorts && (outputMap != null) && typeof outputMap === 'object' && Object.keys(outputMap).indexOf(port) !== -1) {\n        mapIsInPorts = true;\n      }\n    }\n    if (componentPorts.length === 1 && !mapIsInPorts) {\n      this.sendIP(componentPorts[0], outputMap);\n      return;\n    }\n    if (componentPorts.length > 1 && !mapIsInPorts) {\n      throw new Error('Port must be specified for sending output');\n    }\n    results = [];\n    for (port in outputMap) {\n      packet = outputMap[port];\n      results.push(this.sendIP(port, packet));\n    }\n    return results;\n  };\n\n  ProcessOutput.prototype.sendDone = function(outputMap) {\n    this.send(outputMap);\n    return this.done();\n  };\n\n  ProcessOutput.prototype.pass = function(data, options) {\n    var key, val;\n    if (options == null) {\n      options = {};\n    }\n    if (!('out' in this.ports)) {\n      throw new Error('output.pass() requires port \"out\" to be present');\n    }\n    for (key in options) {\n      val = options[key];\n      this.ip[key] = val;\n    }\n    this.ip.data = data;\n    this.sendIP('out', this.ip);\n    return this.done();\n  };\n\n  ProcessOutput.prototype.done = function(error) {\n    var buf, context, contexts, ctx, ip, isLast, nodeContext, port, ref;\n    this.result.__resolved = true;\n    this.nodeInstance.activate(this.context);\n    if (error) {\n      this.error(error);\n    }\n    isLast = (function(_this) {\n      return function() {\n        var len, load, pos, resultsOnly;\n        resultsOnly = _this.nodeInstance.outputQ.filter(function(q) {\n          if (!q.__resolved) {\n            return true;\n          }\n          if (Object.keys(q).length === 2 && q.__bracketClosingAfter) {\n            return false;\n          }\n          return true;\n        });\n        pos = resultsOnly.indexOf(_this.result);\n        len = resultsOnly.length;\n        load = _this.nodeInstance.load;\n        if (pos === len - 1) {\n          return true;\n        }\n        if (pos === -1 && load === len + 1) {\n          return true;\n        }\n        if (len <= 1 && load === 1) {\n          return true;\n        }\n        return false;\n      };\n    })(this);\n    if (this.nodeInstance.isOrdered() && isLast()) {\n      ref = this.nodeInstance.bracketContext[\"in\"];\n      for (port in ref) {\n        contexts = ref[port];\n        if (!contexts[this.scope]) {\n          continue;\n        }\n        nodeContext = contexts[this.scope];\n        if (!nodeContext.length) {\n          continue;\n        }\n        context = nodeContext[nodeContext.length - 1];\n        buf = this.nodeInstance.inPorts[context.source].getBuffer(context.ip.scope, context.ip.index);\n        while (true) {\n          if (!buf.length) {\n            break;\n          }\n          if (buf[0].type !== 'closeBracket') {\n            break;\n          }\n          ip = this.nodeInstance.inPorts[context.source].get(context.ip.scope, context.ip.index);\n          ctx = nodeContext.pop();\n          ctx.closeIp = ip;\n          if (!this.result.__bracketClosingAfter) {\n            this.result.__bracketClosingAfter = [];\n          }\n          this.result.__bracketClosingAfter.push(ctx);\n        }\n      }\n    }\n    debug(this.nodeInstance.nodeId + \" finished processing \" + this.nodeInstance.load);\n    return this.nodeInstance.deactivate(this.context);\n  };\n\n  return ProcessOutput;\n\n})();\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar BasePort, IP, InPort, platform,\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nBasePort = __webpack_require__(24);\n\nIP = __webpack_require__(3);\n\nplatform = __webpack_require__(7);\n\nInPort = (function(superClass) {\n  extend(InPort, superClass);\n\n  function InPort(options, process) {\n    this.process = null;\n    if (!process && typeof options === 'function') {\n      process = options;\n      options = {};\n    }\n    if (options == null) {\n      options = {};\n    }\n    if (options.buffered == null) {\n      options.buffered = false;\n    }\n    if (options.control == null) {\n      options.control = false;\n    }\n    if (options.triggering == null) {\n      options.triggering = true;\n    }\n    if (!process && options && options.process) {\n      process = options.process;\n      delete options.process;\n    }\n    if (process) {\n      platform.deprecated('InPort process callback is deprecated. Please use Process API or the InPort handle option');\n      if (typeof process !== 'function') {\n        throw new Error('process must be a function');\n      }\n      this.process = process;\n    }\n    if (options.handle) {\n      platform.deprecated('InPort handle callback is deprecated. Please use Process API');\n      if (typeof options.handle !== 'function') {\n        throw new Error('handle must be a function');\n      }\n      this.handle = options.handle;\n      delete options.handle;\n    }\n    InPort.__super__.constructor.call(this, options);\n    this.prepareBuffer();\n  }\n\n  InPort.prototype.attachSocket = function(socket, localId) {\n    if (localId == null) {\n      localId = null;\n    }\n    if (this.hasDefault()) {\n      if (this.handle) {\n        socket.setDataDelegate((function(_this) {\n          return function() {\n            return new IP('data', _this.options[\"default\"]);\n          };\n        })(this));\n      } else {\n        socket.setDataDelegate((function(_this) {\n          return function() {\n            return _this.options[\"default\"];\n          };\n        })(this));\n      }\n    }\n    socket.on('connect', (function(_this) {\n      return function() {\n        return _this.handleSocketEvent('connect', socket, localId);\n      };\n    })(this));\n    socket.on('begingroup', (function(_this) {\n      return function(group) {\n        return _this.handleSocketEvent('begingroup', group, localId);\n      };\n    })(this));\n    socket.on('data', (function(_this) {\n      return function(data) {\n        _this.validateData(data);\n        return _this.handleSocketEvent('data', data, localId);\n      };\n    })(this));\n    socket.on('endgroup', (function(_this) {\n      return function(group) {\n        return _this.handleSocketEvent('endgroup', group, localId);\n      };\n    })(this));\n    socket.on('disconnect', (function(_this) {\n      return function() {\n        return _this.handleSocketEvent('disconnect', socket, localId);\n      };\n    })(this));\n    return socket.on('ip', (function(_this) {\n      return function(ip) {\n        return _this.handleIP(ip, localId);\n      };\n    })(this));\n  };\n\n  InPort.prototype.handleIP = function(ip, id) {\n    var buf;\n    if (this.process) {\n      return;\n    }\n    if (this.options.control && ip.type !== 'data') {\n      return;\n    }\n    ip.owner = this.nodeInstance;\n    if (this.isAddressable()) {\n      ip.index = id;\n    }\n    buf = this.prepareBufferForIP(ip);\n    buf.push(ip);\n    if (this.options.control && buf.length > 1) {\n      buf.shift();\n    }\n    if (this.handle) {\n      this.handle(ip, this.nodeInstance);\n    }\n    return this.emit('ip', ip, id);\n  };\n\n  InPort.prototype.handleSocketEvent = function(event, payload, id) {\n    if (this.isBuffered()) {\n      this.buffer.push({\n        event: event,\n        payload: payload,\n        id: id\n      });\n      if (this.isAddressable()) {\n        if (this.process) {\n          this.process(event, id, this.nodeInstance);\n        }\n        this.emit(event, id);\n      } else {\n        if (this.process) {\n          this.process(event, this.nodeInstance);\n        }\n        this.emit(event);\n      }\n      return;\n    }\n    if (this.process) {\n      if (this.isAddressable()) {\n        this.process(event, payload, id, this.nodeInstance);\n      } else {\n        this.process(event, payload, this.nodeInstance);\n      }\n    }\n    if (this.isAddressable()) {\n      return this.emit(event, payload, id);\n    }\n    return this.emit(event, payload);\n  };\n\n  InPort.prototype.hasDefault = function() {\n    return this.options[\"default\"] !== void 0;\n  };\n\n  InPort.prototype.prepareBuffer = function() {\n    this.buffer = [];\n    if (this.isAddressable()) {\n      this.indexedBuffer = {};\n    }\n    this.scopedBuffer = {};\n    return this.iipBuffer = this.isAddressable() ? {} : [];\n  };\n\n  InPort.prototype.prepareBufferForIP = function(ip) {\n    if (this.isAddressable()) {\n      if (ip.scope != null) {\n        if (!(ip.scope in this.scopedBuffer)) {\n          this.scopedBuffer[ip.scope] = [];\n        }\n        if (!(ip.index in this.scopedBuffer[ip.scope])) {\n          this.scopedBuffer[ip.scope][ip.index] = [];\n        }\n        return this.scopedBuffer[ip.scope][ip.index];\n      }\n      if (ip.initial) {\n        if (!(ip.index in this.iipBuffer)) {\n          this.iipBuffer[ip.index] = [];\n        }\n        return this.iipBuffer[ip.index];\n      }\n      if (!(ip.index in this.indexedBuffer)) {\n        this.indexedBuffer[ip.index] = [];\n      }\n      return this.indexedBuffer[ip.index];\n    }\n    if (ip.scope != null) {\n      if (!(ip.scope in this.scopedBuffer)) {\n        this.scopedBuffer[ip.scope] = [];\n      }\n      return this.scopedBuffer[ip.scope];\n    }\n    if (ip.initial) {\n      return this.iipBuffer;\n    }\n    return this.buffer;\n  };\n\n  InPort.prototype.validateData = function(data) {\n    if (!this.options.values) {\n      return;\n    }\n    if (this.options.values.indexOf(data) === -1) {\n      throw new Error(\"Invalid data='\" + data + \"' received, not in [\" + this.options.values + \"]\");\n    }\n  };\n\n  InPort.prototype.receive = function() {\n    platform.deprecated('InPort.receive is deprecated. Use InPort.get instead');\n    if (!this.isBuffered()) {\n      throw new Error('Receive is only possible on buffered ports');\n    }\n    return this.buffer.shift();\n  };\n\n  InPort.prototype.contains = function() {\n    platform.deprecated('InPort.contains is deprecated. Use InPort.has instead');\n    if (!this.isBuffered()) {\n      throw new Error('Contains query is only possible on buffered ports');\n    }\n    return this.buffer.filter(function(packet) {\n      if (packet.event === 'data') {\n        return true;\n      }\n    }).length;\n  };\n\n  InPort.prototype.getBuffer = function(scope, idx, initial) {\n    if (initial == null) {\n      initial = false;\n    }\n    if (this.isAddressable()) {\n      if (scope != null) {\n        if (!(scope in this.scopedBuffer)) {\n          return void 0;\n        }\n        if (!(idx in this.scopedBuffer[scope])) {\n          return void 0;\n        }\n        return this.scopedBuffer[scope][idx];\n      }\n      if (initial) {\n        if (!(idx in this.iipBuffer)) {\n          return void 0;\n        }\n        return this.iipBuffer[idx];\n      }\n      if (!(idx in this.indexedBuffer)) {\n        return void 0;\n      }\n      return this.indexedBuffer[idx];\n    }\n    if (scope != null) {\n      if (!(scope in this.scopedBuffer)) {\n        return void 0;\n      }\n      return this.scopedBuffer[scope];\n    }\n    if (initial) {\n      return this.iipBuffer;\n    }\n    return this.buffer;\n  };\n\n  InPort.prototype.getFromBuffer = function(scope, idx, initial) {\n    var buf;\n    if (initial == null) {\n      initial = false;\n    }\n    buf = this.getBuffer(scope, idx, initial);\n    if (!(buf != null ? buf.length : void 0)) {\n      return void 0;\n    }\n    if (this.options.control) {\n      return buf[buf.length - 1];\n    } else {\n      return buf.shift();\n    }\n  };\n\n  InPort.prototype.get = function(scope, idx) {\n    var res;\n    res = this.getFromBuffer(scope, idx);\n    if (res !== void 0) {\n      return res;\n    }\n    return this.getFromBuffer(null, idx, true);\n  };\n\n  InPort.prototype.hasIPinBuffer = function(scope, idx, validate, initial) {\n    var buf, i, len, packet;\n    if (initial == null) {\n      initial = false;\n    }\n    buf = this.getBuffer(scope, idx, initial);\n    if (!(buf != null ? buf.length : void 0)) {\n      return false;\n    }\n    for (i = 0, len = buf.length; i < len; i++) {\n      packet = buf[i];\n      if (validate(packet)) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  InPort.prototype.hasIIP = function(idx, validate) {\n    return this.hasIPinBuffer(null, idx, validate, true);\n  };\n\n  InPort.prototype.has = function(scope, idx, validate) {\n    if (!this.isAddressable()) {\n      validate = idx;\n      idx = null;\n    }\n    if (this.hasIPinBuffer(scope, idx, validate)) {\n      return true;\n    }\n    if (this.hasIIP(idx, validate)) {\n      return true;\n    }\n    return false;\n  };\n\n  InPort.prototype.length = function(scope, idx) {\n    var buf;\n    buf = this.getBuffer(scope, idx);\n    if (!buf) {\n      return 0;\n    }\n    return buf.length;\n  };\n\n  InPort.prototype.ready = function(scope, idx) {\n    return this.length(scope) > 0;\n  };\n\n  InPort.prototype.clear = function() {\n    return this.prepareBuffer();\n  };\n\n  return InPort;\n\n})(BasePort);\n\nmodule.exports = InPort;\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(process) {var EventEmitter, IP, Network, componentLoader, graph, internalSocket, platform, utils,\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\ninternalSocket = __webpack_require__(9);\n\ngraph = __webpack_require__(5);\n\nEventEmitter = __webpack_require__(0).EventEmitter;\n\nplatform = __webpack_require__(7);\n\ncomponentLoader = __webpack_require__(13);\n\nutils = __webpack_require__(30);\n\nIP = __webpack_require__(3);\n\nNetwork = (function(superClass) {\n  extend(Network, superClass);\n\n  Network.prototype.processes = {};\n\n  Network.prototype.connections = [];\n\n  Network.prototype.initials = [];\n\n  Network.prototype.defaults = [];\n\n  Network.prototype.graph = null;\n\n  Network.prototype.startupDate = null;\n\n  function Network(graph, options) {\n    this.options = options != null ? options : {};\n    this.processes = {};\n    this.connections = [];\n    this.initials = [];\n    this.nextInitials = [];\n    this.defaults = [];\n    this.graph = graph;\n    this.started = false;\n    this.debug = true;\n    this.eventBuffer = [];\n    if (!platform.isBrowser()) {\n      this.baseDir = graph.baseDir || process.cwd();\n    } else {\n      this.baseDir = graph.baseDir || '/';\n    }\n    this.startupDate = null;\n    if (graph.componentLoader) {\n      this.loader = graph.componentLoader;\n    } else {\n      this.loader = new componentLoader.ComponentLoader(this.baseDir, this.options);\n    }\n  }\n\n  Network.prototype.uptime = function() {\n    if (!this.startupDate) {\n      return 0;\n    }\n    return new Date() - this.startupDate;\n  };\n\n  Network.prototype.getActiveProcesses = function() {\n    var active, name, process, ref;\n    active = [];\n    if (!this.started) {\n      return active;\n    }\n    ref = this.processes;\n    for (name in ref) {\n      process = ref[name];\n      if (process.component.load > 0) {\n        active.push(name);\n      }\n      if (process.component.__openConnections > 0) {\n        active.push(name);\n      }\n    }\n    return active;\n  };\n\n  Network.prototype.bufferedEmit = function(event, payload) {\n    var ev, i, len, ref;\n    if (event === 'error' || event === 'process-error' || event === 'end') {\n      this.emit(event, payload);\n      return;\n    }\n    if (!this.isStarted() && event !== 'end') {\n      this.eventBuffer.push({\n        type: event,\n        payload: payload\n      });\n      return;\n    }\n    this.emit(event, payload);\n    if (event === 'start') {\n      ref = this.eventBuffer;\n      for (i = 0, len = ref.length; i < len; i++) {\n        ev = ref[i];\n        this.emit(ev.type, ev.payload);\n      }\n      return this.eventBuffer = [];\n    }\n  };\n\n  Network.prototype.load = function(component, metadata, callback) {\n    return this.loader.load(component, callback, metadata);\n  };\n\n  Network.prototype.addNode = function(node, callback) {\n    var process;\n    if (this.processes[node.id]) {\n      callback(null, this.processes[node.id]);\n      return;\n    }\n    process = {\n      id: node.id\n    };\n    if (!node.component) {\n      this.processes[process.id] = process;\n      callback(null, process);\n      return;\n    }\n    return this.load(node.component, node.metadata, (function(_this) {\n      return function(err, instance) {\n        var inPorts, name, outPorts, port;\n        if (err) {\n          return callback(err);\n        }\n        instance.nodeId = node.id;\n        process.component = instance;\n        process.componentName = node.component;\n        inPorts = process.component.inPorts.ports || process.component.inPorts;\n        outPorts = process.component.outPorts.ports || process.component.outPorts;\n        for (name in inPorts) {\n          port = inPorts[name];\n          port.node = node.id;\n          port.nodeInstance = instance;\n          port.name = name;\n        }\n        for (name in outPorts) {\n          port = outPorts[name];\n          port.node = node.id;\n          port.nodeInstance = instance;\n          port.name = name;\n        }\n        if (instance.isSubgraph()) {\n          _this.subscribeSubgraph(process);\n        }\n        _this.subscribeNode(process);\n        _this.processes[process.id] = process;\n        return callback(null, process);\n      };\n    })(this));\n  };\n\n  Network.prototype.removeNode = function(node, callback) {\n    if (!this.processes[node.id]) {\n      return callback(new Error(\"Node \" + node.id + \" not found\"));\n    }\n    return this.processes[node.id].component.shutdown((function(_this) {\n      return function(err) {\n        if (err) {\n          return callback(err);\n        }\n        delete _this.processes[node.id];\n        return callback(null);\n      };\n    })(this));\n  };\n\n  Network.prototype.renameNode = function(oldId, newId, callback) {\n    var inPorts, name, outPorts, port, process;\n    process = this.getNode(oldId);\n    if (!process) {\n      return callback(new Error(\"Process \" + oldId + \" not found\"));\n    }\n    process.id = newId;\n    inPorts = process.component.inPorts.ports || process.component.inPorts;\n    outPorts = process.component.outPorts.ports || process.component.outPorts;\n    for (name in inPorts) {\n      port = inPorts[name];\n      if (!port) {\n        continue;\n      }\n      port.node = newId;\n    }\n    for (name in outPorts) {\n      port = outPorts[name];\n      if (!port) {\n        continue;\n      }\n      port.node = newId;\n    }\n    this.processes[newId] = process;\n    delete this.processes[oldId];\n    return callback(null);\n  };\n\n  Network.prototype.getNode = function(id) {\n    return this.processes[id];\n  };\n\n  Network.prototype.connect = function(done) {\n    var callStack, edges, initializers, nodes, serialize, setDefaults, subscribeGraph;\n    if (done == null) {\n      done = function() {};\n    }\n    callStack = 0;\n    serialize = (function(_this) {\n      return function(next, add) {\n        return function(type) {\n          return _this[\"add\" + type](add, function(err) {\n            if (err) {\n              return done(err);\n            }\n            callStack++;\n            if (callStack % 100 === 0) {\n              setTimeout(function() {\n                return next(type);\n              }, 0);\n              return;\n            }\n            return next(type);\n          });\n        };\n      };\n    })(this);\n    subscribeGraph = (function(_this) {\n      return function() {\n        _this.subscribeGraph();\n        return done();\n      };\n    })(this);\n    setDefaults = utils.reduceRight(this.graph.nodes, serialize, subscribeGraph);\n    initializers = utils.reduceRight(this.graph.initializers, serialize, function() {\n      return setDefaults(\"Defaults\");\n    });\n    edges = utils.reduceRight(this.graph.edges, serialize, function() {\n      return initializers(\"Initial\");\n    });\n    nodes = utils.reduceRight(this.graph.nodes, serialize, function() {\n      return edges(\"Edge\");\n    });\n    return nodes(\"Node\");\n  };\n\n  Network.prototype.connectPort = function(socket, process, port, index, inbound) {\n    if (inbound) {\n      socket.to = {\n        process: process,\n        port: port,\n        index: index\n      };\n      if (!(process.component.inPorts && process.component.inPorts[port])) {\n        throw new Error(\"No inport '\" + port + \"' defined in process \" + process.id + \" (\" + (socket.getId()) + \")\");\n        return;\n      }\n      if (process.component.inPorts[port].isAddressable()) {\n        return process.component.inPorts[port].attach(socket, index);\n      }\n      return process.component.inPorts[port].attach(socket);\n    }\n    socket.from = {\n      process: process,\n      port: port,\n      index: index\n    };\n    if (!(process.component.outPorts && process.component.outPorts[port])) {\n      throw new Error(\"No outport '\" + port + \"' defined in process \" + process.id + \" (\" + (socket.getId()) + \")\");\n      return;\n    }\n    if (process.component.outPorts[port].isAddressable()) {\n      return process.component.outPorts[port].attach(socket, index);\n    }\n    return process.component.outPorts[port].attach(socket);\n  };\n\n  Network.prototype.subscribeGraph = function() {\n    var graphOps, processOps, processing, registerOp;\n    graphOps = [];\n    processing = false;\n    registerOp = function(op, details) {\n      return graphOps.push({\n        op: op,\n        details: details\n      });\n    };\n    processOps = (function(_this) {\n      return function(err) {\n        var cb, op;\n        if (err) {\n          if (_this.listeners('process-error').length === 0) {\n            throw err;\n          }\n          _this.bufferedEmit('process-error', err);\n        }\n        if (!graphOps.length) {\n          processing = false;\n          return;\n        }\n        processing = true;\n        op = graphOps.shift();\n        cb = processOps;\n        switch (op.op) {\n          case 'renameNode':\n            return _this.renameNode(op.details.from, op.details.to, cb);\n          default:\n            return _this[op.op](op.details, cb);\n        }\n      };\n    })(this);\n    this.graph.on('addNode', function(node) {\n      registerOp('addNode', node);\n      if (!processing) {\n        return processOps();\n      }\n    });\n    this.graph.on('removeNode', function(node) {\n      registerOp('removeNode', node);\n      if (!processing) {\n        return processOps();\n      }\n    });\n    this.graph.on('renameNode', function(oldId, newId) {\n      registerOp('renameNode', {\n        from: oldId,\n        to: newId\n      });\n      if (!processing) {\n        return processOps();\n      }\n    });\n    this.graph.on('addEdge', function(edge) {\n      registerOp('addEdge', edge);\n      if (!processing) {\n        return processOps();\n      }\n    });\n    this.graph.on('removeEdge', function(edge) {\n      registerOp('removeEdge', edge);\n      if (!processing) {\n        return processOps();\n      }\n    });\n    this.graph.on('addInitial', function(iip) {\n      registerOp('addInitial', iip);\n      if (!processing) {\n        return processOps();\n      }\n    });\n    return this.graph.on('removeInitial', function(iip) {\n      registerOp('removeInitial', iip);\n      if (!processing) {\n        return processOps();\n      }\n    });\n  };\n\n  Network.prototype.subscribeSubgraph = function(node) {\n    var emitSub;\n    if (!node.component.isReady()) {\n      node.component.once('ready', (function(_this) {\n        return function() {\n          return _this.subscribeSubgraph(node);\n        };\n      })(this));\n      return;\n    }\n    if (!node.component.network) {\n      return;\n    }\n    node.component.network.setDebug(this.debug);\n    emitSub = (function(_this) {\n      return function(type, data) {\n        if (type === 'process-error' && _this.listeners('process-error').length === 0) {\n          if (data.id && data.metadata && data.error) {\n            throw data.error;\n          }\n          throw data;\n        }\n        if (!data) {\n          data = {};\n        }\n        if (data.subgraph) {\n          if (!data.subgraph.unshift) {\n            data.subgraph = [data.subgraph];\n          }\n          data.subgraph = data.subgraph.unshift(node.id);\n        } else {\n          data.subgraph = [node.id];\n        }\n        return _this.bufferedEmit(type, data);\n      };\n    })(this);\n    node.component.network.on('connect', function(data) {\n      return emitSub('connect', data);\n    });\n    node.component.network.on('begingroup', function(data) {\n      return emitSub('begingroup', data);\n    });\n    node.component.network.on('data', function(data) {\n      return emitSub('data', data);\n    });\n    node.component.network.on('endgroup', function(data) {\n      return emitSub('endgroup', data);\n    });\n    node.component.network.on('disconnect', function(data) {\n      return emitSub('disconnect', data);\n    });\n    node.component.network.on('ip', function(data) {\n      return emitSub('ip', data);\n    });\n    return node.component.network.on('process-error', function(data) {\n      return emitSub('process-error', data);\n    });\n  };\n\n  Network.prototype.subscribeSocket = function(socket, source) {\n    socket.on('ip', (function(_this) {\n      return function(ip) {\n        return _this.bufferedEmit('ip', {\n          id: socket.getId(),\n          type: ip.type,\n          socket: socket,\n          data: ip.data,\n          metadata: socket.metadata\n        });\n      };\n    })(this));\n    socket.on('connect', (function(_this) {\n      return function() {\n        if (source && source.component.isLegacy()) {\n          if (!source.component.__openConnections) {\n            source.component.__openConnections = 0;\n          }\n          source.component.__openConnections++;\n        }\n        return _this.bufferedEmit('connect', {\n          id: socket.getId(),\n          socket: socket,\n          metadata: socket.metadata\n        });\n      };\n    })(this));\n    socket.on('begingroup', (function(_this) {\n      return function(group) {\n        return _this.bufferedEmit('begingroup', {\n          id: socket.getId(),\n          socket: socket,\n          group: group,\n          metadata: socket.metadata\n        });\n      };\n    })(this));\n    socket.on('data', (function(_this) {\n      return function(data) {\n        return _this.bufferedEmit('data', {\n          id: socket.getId(),\n          socket: socket,\n          data: data,\n          metadata: socket.metadata\n        });\n      };\n    })(this));\n    socket.on('endgroup', (function(_this) {\n      return function(group) {\n        return _this.bufferedEmit('endgroup', {\n          id: socket.getId(),\n          socket: socket,\n          group: group,\n          metadata: socket.metadata\n        });\n      };\n    })(this));\n    socket.on('disconnect', (function(_this) {\n      return function() {\n        _this.bufferedEmit('disconnect', {\n          id: socket.getId(),\n          socket: socket,\n          metadata: socket.metadata\n        });\n        if (source && source.component.isLegacy()) {\n          source.component.__openConnections--;\n          if (source.component.__openConnections < 0) {\n            source.component.__openConnections = 0;\n          }\n          if (source.component.__openConnections === 0) {\n            return _this.checkIfFinished();\n          }\n        }\n      };\n    })(this));\n    return socket.on('error', (function(_this) {\n      return function(event) {\n        if (_this.listeners('process-error').length === 0) {\n          if (event.id && event.metadata && event.error) {\n            throw event.error;\n          }\n          throw event;\n        }\n        return _this.bufferedEmit('process-error', event);\n      };\n    })(this));\n  };\n\n  Network.prototype.subscribeNode = function(node) {\n    node.component.on('deactivate', (function(_this) {\n      return function(load) {\n        if (load > 0) {\n          return;\n        }\n        return _this.checkIfFinished();\n      };\n    })(this));\n    if (!node.component.getIcon) {\n      return;\n    }\n    return node.component.on('icon', (function(_this) {\n      return function() {\n        return _this.bufferedEmit('icon', {\n          id: node.id,\n          icon: node.component.getIcon()\n        });\n      };\n    })(this));\n  };\n\n  Network.prototype.addEdge = function(edge, callback) {\n    var from, socket, to;\n    socket = internalSocket.createSocket(edge.metadata);\n    socket.setDebug(this.debug);\n    from = this.getNode(edge.from.node);\n    if (!from) {\n      return callback(new Error(\"No process defined for outbound node \" + edge.from.node));\n    }\n    if (!from.component) {\n      return callback(new Error(\"No component defined for outbound node \" + edge.from.node));\n    }\n    if (!from.component.isReady()) {\n      from.component.once(\"ready\", (function(_this) {\n        return function() {\n          return _this.addEdge(edge, callback);\n        };\n      })(this));\n      return;\n    }\n    to = this.getNode(edge.to.node);\n    if (!to) {\n      return callback(new Error(\"No process defined for inbound node \" + edge.to.node));\n    }\n    if (!to.component) {\n      return callback(new Error(\"No component defined for inbound node \" + edge.to.node));\n    }\n    if (!to.component.isReady()) {\n      to.component.once(\"ready\", (function(_this) {\n        return function() {\n          return _this.addEdge(edge, callback);\n        };\n      })(this));\n      return;\n    }\n    this.subscribeSocket(socket, from);\n    this.connectPort(socket, to, edge.to.port, edge.to.index, true);\n    this.connectPort(socket, from, edge.from.port, edge.from.index, false);\n    this.connections.push(socket);\n    return callback();\n  };\n\n  Network.prototype.removeEdge = function(edge, callback) {\n    var connection, i, len, ref, results;\n    ref = this.connections;\n    results = [];\n    for (i = 0, len = ref.length; i < len; i++) {\n      connection = ref[i];\n      if (!connection) {\n        continue;\n      }\n      if (!(edge.to.node === connection.to.process.id && edge.to.port === connection.to.port)) {\n        continue;\n      }\n      connection.to.process.component.inPorts[connection.to.port].detach(connection);\n      if (edge.from.node) {\n        if (connection.from && edge.from.node === connection.from.process.id && edge.from.port === connection.from.port) {\n          connection.from.process.component.outPorts[connection.from.port].detach(connection);\n        }\n      }\n      this.connections.splice(this.connections.indexOf(connection), 1);\n      results.push(callback());\n    }\n    return results;\n  };\n\n  Network.prototype.addDefaults = function(node, callback) {\n    var key, port, process, ref, socket;\n    process = this.processes[node.id];\n    if (!process.component.isReady()) {\n      if (process.component.setMaxListeners) {\n        process.component.setMaxListeners(0);\n      }\n      process.component.once(\"ready\", (function(_this) {\n        return function() {\n          return _this.addDefaults(process, callback);\n        };\n      })(this));\n      return;\n    }\n    ref = process.component.inPorts.ports;\n    for (key in ref) {\n      port = ref[key];\n      if (typeof port.hasDefault === 'function' && port.hasDefault() && !port.isAttached()) {\n        socket = internalSocket.createSocket();\n        socket.setDebug(this.debug);\n        this.subscribeSocket(socket);\n        this.connectPort(socket, process, key, void 0, true);\n        this.connections.push(socket);\n        this.defaults.push(socket);\n      }\n    }\n    return callback();\n  };\n\n  Network.prototype.addInitial = function(initializer, callback) {\n    var init, socket, to;\n    socket = internalSocket.createSocket(initializer.metadata);\n    socket.setDebug(this.debug);\n    this.subscribeSocket(socket);\n    to = this.getNode(initializer.to.node);\n    if (!to) {\n      return callback(new Error(\"No process defined for inbound node \" + initializer.to.node));\n    }\n    if (!(to.component.isReady() || to.component.inPorts[initializer.to.port])) {\n      if (to.component.setMaxListeners) {\n        to.component.setMaxListeners(0);\n      }\n      to.component.once(\"ready\", (function(_this) {\n        return function() {\n          return _this.addInitial(initializer, callback);\n        };\n      })(this));\n      return;\n    }\n    this.connectPort(socket, to, initializer.to.port, initializer.to.index, true);\n    this.connections.push(socket);\n    init = {\n      socket: socket,\n      data: initializer.from.data\n    };\n    this.initials.push(init);\n    this.nextInitials.push(init);\n    if (this.isStarted()) {\n      this.sendInitials();\n    }\n    return callback();\n  };\n\n  Network.prototype.removeInitial = function(initializer, callback) {\n    var connection, i, init, j, k, len, len1, len2, ref, ref1, ref2;\n    ref = this.connections;\n    for (i = 0, len = ref.length; i < len; i++) {\n      connection = ref[i];\n      if (!connection) {\n        continue;\n      }\n      if (!(initializer.to.node === connection.to.process.id && initializer.to.port === connection.to.port)) {\n        continue;\n      }\n      connection.to.process.component.inPorts[connection.to.port].detach(connection);\n      this.connections.splice(this.connections.indexOf(connection), 1);\n      ref1 = this.initials;\n      for (j = 0, len1 = ref1.length; j < len1; j++) {\n        init = ref1[j];\n        if (!init) {\n          continue;\n        }\n        if (init.socket !== connection) {\n          continue;\n        }\n        this.initials.splice(this.initials.indexOf(init), 1);\n      }\n      ref2 = this.nextInitials;\n      for (k = 0, len2 = ref2.length; k < len2; k++) {\n        init = ref2[k];\n        if (!init) {\n          continue;\n        }\n        if (init.socket !== connection) {\n          continue;\n        }\n        this.nextInitials.splice(this.nextInitials.indexOf(init), 1);\n      }\n    }\n    return callback();\n  };\n\n  Network.prototype.sendInitial = function(initial) {\n    return initial.socket.post(new IP('data', initial.data, {\n      initial: true\n    }));\n  };\n\n  Network.prototype.sendInitials = function(callback) {\n    var send;\n    if (!callback) {\n      callback = function() {};\n    }\n    send = (function(_this) {\n      return function() {\n        var i, initial, len, ref;\n        ref = _this.initials;\n        for (i = 0, len = ref.length; i < len; i++) {\n          initial = ref[i];\n          _this.sendInitial(initial);\n        }\n        _this.initials = [];\n        return callback();\n      };\n    })(this);\n    if (typeof process !== 'undefined' && process.execPath && process.execPath.indexOf('node') !== -1) {\n      return process.nextTick(send);\n    } else {\n      return setTimeout(send, 0);\n    }\n  };\n\n  Network.prototype.isStarted = function() {\n    return this.started;\n  };\n\n  Network.prototype.isRunning = function() {\n    if (!this.started) {\n      return false;\n    }\n    return this.getActiveProcesses().length > 0;\n  };\n\n  Network.prototype.startComponents = function(callback) {\n    var count, id, length, onProcessStart, process, ref, results;\n    if (!callback) {\n      callback = function() {};\n    }\n    count = 0;\n    length = this.processes ? Object.keys(this.processes).length : 0;\n    onProcessStart = function(err) {\n      if (err) {\n        return callback(err);\n      }\n      count++;\n      if (count === length) {\n        return callback();\n      }\n    };\n    if (!(this.processes && Object.keys(this.processes).length)) {\n      return callback();\n    }\n    ref = this.processes;\n    results = [];\n    for (id in ref) {\n      process = ref[id];\n      if (process.component.isStarted()) {\n        onProcessStart();\n        continue;\n      }\n      if (process.component.start.length === 0) {\n        platform.deprecated('component.start method without callback is deprecated');\n        process.component.start();\n        onProcessStart();\n        continue;\n      }\n      results.push(process.component.start(onProcessStart));\n    }\n    return results;\n  };\n\n  Network.prototype.sendDefaults = function(callback) {\n    var i, len, ref, socket;\n    if (!callback) {\n      callback = function() {};\n    }\n    if (!this.defaults.length) {\n      return callback();\n    }\n    ref = this.defaults;\n    for (i = 0, len = ref.length; i < len; i++) {\n      socket = ref[i];\n      if (socket.to.process.component.inPorts[socket.to.port].sockets.length !== 1) {\n        continue;\n      }\n      socket.connect();\n      socket.send();\n      socket.disconnect();\n    }\n    return callback();\n  };\n\n  Network.prototype.start = function(callback) {\n    if (!callback) {\n      platform.deprecated('Calling network.start() without callback is deprecated');\n      callback = function() {};\n    }\n    if (this.debouncedEnd) {\n      this.abortDebounce = true;\n    }\n    if (this.started) {\n      this.stop((function(_this) {\n        return function(err) {\n          if (err) {\n            return callback(err);\n          }\n          return _this.start(callback);\n        };\n      })(this));\n      return;\n    }\n    this.initials = this.nextInitials.slice(0);\n    this.eventBuffer = [];\n    return this.startComponents((function(_this) {\n      return function(err) {\n        if (err) {\n          return callback(err);\n        }\n        return _this.sendInitials(function(err) {\n          if (err) {\n            return callback(err);\n          }\n          return _this.sendDefaults(function(err) {\n            if (err) {\n              return callback(err);\n            }\n            _this.setStarted(true);\n            return callback(null);\n          });\n        });\n      };\n    })(this));\n  };\n\n  Network.prototype.stop = function(callback) {\n    var connection, count, i, id, len, length, onProcessEnd, process, ref, ref1, results;\n    if (!callback) {\n      platform.deprecated('Calling network.stop() without callback is deprecated');\n      callback = function() {};\n    }\n    if (this.debouncedEnd) {\n      this.abortDebounce = true;\n    }\n    if (!this.started) {\n      return callback(null);\n    }\n    ref = this.connections;\n    for (i = 0, len = ref.length; i < len; i++) {\n      connection = ref[i];\n      if (!connection.isConnected()) {\n        continue;\n      }\n      connection.disconnect();\n    }\n    count = 0;\n    length = this.processes ? Object.keys(this.processes).length : 0;\n    onProcessEnd = (function(_this) {\n      return function(err) {\n        if (err) {\n          return callback(err);\n        }\n        count++;\n        if (count === length) {\n          _this.setStarted(false);\n          return callback();\n        }\n      };\n    })(this);\n    if (!(this.processes && Object.keys(this.processes).length)) {\n      this.setStarted(false);\n      return callback();\n    }\n    ref1 = this.processes;\n    results = [];\n    for (id in ref1) {\n      process = ref1[id];\n      if (!process.component.isStarted()) {\n        onProcessEnd();\n        continue;\n      }\n      if (process.component.shutdown.length === 0) {\n        platform.deprecated('component.shutdown method without callback is deprecated');\n        process.component.shutdown();\n        onProcessEnd();\n        continue;\n      }\n      results.push(process.component.shutdown(onProcessEnd));\n    }\n    return results;\n  };\n\n  Network.prototype.setStarted = function(started) {\n    if (this.started === started) {\n      return;\n    }\n    if (!started) {\n      this.started = false;\n      this.bufferedEmit('end', {\n        start: this.startupDate,\n        end: new Date,\n        uptime: this.uptime()\n      });\n      return;\n    }\n    if (!this.startupDate) {\n      this.startupDate = new Date;\n    }\n    this.started = true;\n    return this.bufferedEmit('start', {\n      start: this.startupDate\n    });\n  };\n\n  Network.prototype.checkIfFinished = function() {\n    if (this.isRunning()) {\n      return;\n    }\n    delete this.abortDebounce;\n    if (!this.debouncedEnd) {\n      this.debouncedEnd = utils.debounce((function(_this) {\n        return function() {\n          if (_this.abortDebounce) {\n            return;\n          }\n          if (_this.isRunning()) {\n            return;\n          }\n          return _this.setStarted(false);\n        };\n      })(this), 50);\n    }\n    return this.debouncedEnd();\n  };\n\n  Network.prototype.getDebug = function() {\n    return this.debug;\n  };\n\n  Network.prototype.setDebug = function(active) {\n    var i, instance, len, process, processId, ref, ref1, results, socket;\n    if (active === this.debug) {\n      return;\n    }\n    this.debug = active;\n    ref = this.connections;\n    for (i = 0, len = ref.length; i < len; i++) {\n      socket = ref[i];\n      socket.setDebug(active);\n    }\n    ref1 = this.processes;\n    results = [];\n    for (processId in ref1) {\n      process = ref1[processId];\n      instance = process.component;\n      if (instance.isSubgraph()) {\n        results.push(instance.network.setDebug(active));\n      } else {\n        results.push(void 0);\n      }\n    }\n    return results;\n  };\n\n  return Network;\n\n})(EventEmitter);\n\nexports.Network = Network;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar BasePort, IP, OutPort,\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nBasePort = __webpack_require__(24);\n\nIP = __webpack_require__(3);\n\nOutPort = (function(superClass) {\n  extend(OutPort, superClass);\n\n  function OutPort(options) {\n    this.cache = {};\n    OutPort.__super__.constructor.call(this, options);\n  }\n\n  OutPort.prototype.attach = function(socket, index) {\n    if (index == null) {\n      index = null;\n    }\n    OutPort.__super__.attach.call(this, socket, index);\n    if (this.isCaching() && (this.cache[index] != null)) {\n      return this.send(this.cache[index], index);\n    }\n  };\n\n  OutPort.prototype.connect = function(socketId) {\n    var i, len, results, socket, sockets;\n    if (socketId == null) {\n      socketId = null;\n    }\n    sockets = this.getSockets(socketId);\n    this.checkRequired(sockets);\n    results = [];\n    for (i = 0, len = sockets.length; i < len; i++) {\n      socket = sockets[i];\n      if (!socket) {\n        continue;\n      }\n      results.push(socket.connect());\n    }\n    return results;\n  };\n\n  OutPort.prototype.beginGroup = function(group, socketId) {\n    var sockets;\n    if (socketId == null) {\n      socketId = null;\n    }\n    sockets = this.getSockets(socketId);\n    this.checkRequired(sockets);\n    return sockets.forEach(function(socket) {\n      if (!socket) {\n        return;\n      }\n      return socket.beginGroup(group);\n    });\n  };\n\n  OutPort.prototype.send = function(data, socketId) {\n    var sockets;\n    if (socketId == null) {\n      socketId = null;\n    }\n    sockets = this.getSockets(socketId);\n    this.checkRequired(sockets);\n    if (this.isCaching() && data !== this.cache[socketId]) {\n      this.cache[socketId] = data;\n    }\n    return sockets.forEach(function(socket) {\n      if (!socket) {\n        return;\n      }\n      return socket.send(data);\n    });\n  };\n\n  OutPort.prototype.endGroup = function(socketId) {\n    var i, len, results, socket, sockets;\n    if (socketId == null) {\n      socketId = null;\n    }\n    sockets = this.getSockets(socketId);\n    this.checkRequired(sockets);\n    results = [];\n    for (i = 0, len = sockets.length; i < len; i++) {\n      socket = sockets[i];\n      if (!socket) {\n        continue;\n      }\n      results.push(socket.endGroup());\n    }\n    return results;\n  };\n\n  OutPort.prototype.disconnect = function(socketId) {\n    var i, len, results, socket, sockets;\n    if (socketId == null) {\n      socketId = null;\n    }\n    sockets = this.getSockets(socketId);\n    this.checkRequired(sockets);\n    results = [];\n    for (i = 0, len = sockets.length; i < len; i++) {\n      socket = sockets[i];\n      if (!socket) {\n        continue;\n      }\n      results.push(socket.disconnect());\n    }\n    return results;\n  };\n\n  OutPort.prototype.sendIP = function(type, data, options, socketId, autoConnect) {\n    var i, ip, len, pristine, ref, socket, sockets;\n    if (autoConnect == null) {\n      autoConnect = true;\n    }\n    if (IP.isIP(type)) {\n      ip = type;\n      socketId = ip.index;\n    } else {\n      ip = new IP(type, data, options);\n    }\n    sockets = this.getSockets(socketId);\n    this.checkRequired(sockets);\n    if (this.isCaching() && data !== ((ref = this.cache[socketId]) != null ? ref.data : void 0)) {\n      this.cache[socketId] = ip;\n    }\n    pristine = true;\n    for (i = 0, len = sockets.length; i < len; i++) {\n      socket = sockets[i];\n      if (!socket) {\n        continue;\n      }\n      if (pristine) {\n        socket.post(ip, autoConnect);\n        pristine = false;\n      } else {\n        if (ip.clonable) {\n          ip = ip.clone();\n        }\n        socket.post(ip, autoConnect);\n      }\n    }\n    return this;\n  };\n\n  OutPort.prototype.openBracket = function(data, options, socketId) {\n    if (data == null) {\n      data = null;\n    }\n    if (options == null) {\n      options = {};\n    }\n    if (socketId == null) {\n      socketId = null;\n    }\n    return this.sendIP('openBracket', data, options, socketId);\n  };\n\n  OutPort.prototype.data = function(data, options, socketId) {\n    if (options == null) {\n      options = {};\n    }\n    if (socketId == null) {\n      socketId = null;\n    }\n    return this.sendIP('data', data, options, socketId);\n  };\n\n  OutPort.prototype.closeBracket = function(data, options, socketId) {\n    if (data == null) {\n      data = null;\n    }\n    if (options == null) {\n      options = {};\n    }\n    if (socketId == null) {\n      socketId = null;\n    }\n    return this.sendIP('closeBracket', data, options, socketId);\n  };\n\n  OutPort.prototype.checkRequired = function(sockets) {\n    if (sockets.length === 0 && this.isRequired()) {\n      throw new Error((this.getId()) + \": No connections available\");\n    }\n  };\n\n  OutPort.prototype.getSockets = function(socketId) {\n    if (this.isAddressable()) {\n      if (socketId === null) {\n        throw new Error((this.getId()) + \" Socket ID required\");\n      }\n      if (!this.sockets[socketId]) {\n        return [];\n      }\n      return [this.sockets[socketId]];\n    }\n    return this.sockets;\n  };\n\n  OutPort.prototype.isCaching = function() {\n    if (this.options.caching) {\n      return true;\n    }\n    return false;\n  };\n\n  return OutPort;\n\n})(BasePort);\n\nmodule.exports = OutPort;\n\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar EventEmitter, InPort, InPorts, OutPort, OutPorts, Ports,\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nEventEmitter = __webpack_require__(0).EventEmitter;\n\nInPort = __webpack_require__(26);\n\nOutPort = __webpack_require__(28);\n\nPorts = (function(superClass) {\n  extend(Ports, superClass);\n\n  Ports.prototype.model = InPort;\n\n  function Ports(ports) {\n    var name, options;\n    this.ports = {};\n    if (!ports) {\n      return;\n    }\n    for (name in ports) {\n      options = ports[name];\n      this.add(name, options);\n    }\n  }\n\n  Ports.prototype.add = function(name, options, process) {\n    if (name === 'add' || name === 'remove') {\n      throw new Error('Add and remove are restricted port names');\n    }\n    if (!name.match(/^[a-z0-9_\\.\\/]+$/)) {\n      throw new Error(\"Port names can only contain lowercase alphanumeric characters and underscores. '\" + name + \"' not allowed\");\n    }\n    if (this.ports[name]) {\n      this.remove(name);\n    }\n    if (typeof options === 'object' && options.canAttach) {\n      this.ports[name] = options;\n    } else {\n      this.ports[name] = new this.model(options, process);\n    }\n    this[name] = this.ports[name];\n    this.emit('add', name);\n    return this;\n  };\n\n  Ports.prototype.remove = function(name) {\n    if (!this.ports[name]) {\n      throw new Error(\"Port \" + name + \" not defined\");\n    }\n    delete this.ports[name];\n    delete this[name];\n    this.emit('remove', name);\n    return this;\n  };\n\n  return Ports;\n\n})(EventEmitter);\n\nexports.InPorts = InPorts = (function(superClass) {\n  extend(InPorts, superClass);\n\n  function InPorts() {\n    return InPorts.__super__.constructor.apply(this, arguments);\n  }\n\n  InPorts.prototype.on = function(name, event, callback) {\n    if (!this.ports[name]) {\n      throw new Error(\"Port \" + name + \" not available\");\n    }\n    return this.ports[name].on(event, callback);\n  };\n\n  InPorts.prototype.once = function(name, event, callback) {\n    if (!this.ports[name]) {\n      throw new Error(\"Port \" + name + \" not available\");\n    }\n    return this.ports[name].once(event, callback);\n  };\n\n  return InPorts;\n\n})(Ports);\n\nexports.OutPorts = OutPorts = (function(superClass) {\n  extend(OutPorts, superClass);\n\n  function OutPorts() {\n    return OutPorts.__super__.constructor.apply(this, arguments);\n  }\n\n  OutPorts.prototype.model = OutPort;\n\n  OutPorts.prototype.connect = function(name, socketId) {\n    if (!this.ports[name]) {\n      throw new Error(\"Port \" + name + \" not available\");\n    }\n    return this.ports[name].connect(socketId);\n  };\n\n  OutPorts.prototype.beginGroup = function(name, group, socketId) {\n    if (!this.ports[name]) {\n      throw new Error(\"Port \" + name + \" not available\");\n    }\n    return this.ports[name].beginGroup(group, socketId);\n  };\n\n  OutPorts.prototype.send = function(name, data, socketId) {\n    if (!this.ports[name]) {\n      throw new Error(\"Port \" + name + \" not available\");\n    }\n    return this.ports[name].send(data, socketId);\n  };\n\n  OutPorts.prototype.endGroup = function(name, socketId) {\n    if (!this.ports[name]) {\n      throw new Error(\"Port \" + name + \" not available\");\n    }\n    return this.ports[name].endGroup(socketId);\n  };\n\n  OutPorts.prototype.disconnect = function(name, socketId) {\n    if (!this.ports[name]) {\n      throw new Error(\"Port \" + name + \" not available\");\n    }\n    return this.ports[name].disconnect(socketId);\n  };\n\n  return OutPorts;\n\n})(Ports);\n\nexports.normalizePortName = function(name) {\n  var matched, port;\n  port = {\n    name: name\n  };\n  if (name.indexOf('[') === -1) {\n    return port;\n  }\n  matched = name.match(/(.*)\\[([0-9]+)\\]/);\n  if (!(matched != null ? matched.length : void 0)) {\n    return name;\n  }\n  port.name = matched[1];\n  port.index = matched[2];\n  return port;\n};\n\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports) {\n\nvar clone, contains, createReduce, debounce, getKeys, getValues, guessLanguageFromFilename, intersection, isArray, isObject, optimizeCb, reduceRight, unique;\n\nclone = function(obj) {\n  var flags, key, newInstance;\n  if ((obj == null) || typeof obj !== 'object') {\n    return obj;\n  }\n  if (obj instanceof Date) {\n    return new Date(obj.getTime());\n  }\n  if (obj instanceof RegExp) {\n    flags = '';\n    if (obj.global != null) {\n      flags += 'g';\n    }\n    if (obj.ignoreCase != null) {\n      flags += 'i';\n    }\n    if (obj.multiline != null) {\n      flags += 'm';\n    }\n    if (obj.sticky != null) {\n      flags += 'y';\n    }\n    return new RegExp(obj.source, flags);\n  }\n  newInstance = new obj.constructor();\n  for (key in obj) {\n    newInstance[key] = clone(obj[key]);\n  }\n  return newInstance;\n};\n\nguessLanguageFromFilename = function(filename) {\n  if (/.*\\.coffee$/.test(filename)) {\n    return 'coffeescript';\n  }\n  return 'javascript';\n};\n\nisArray = function(obj) {\n  if (Array.isArray) {\n    return Array.isArray(obj);\n  }\n  return Object.prototype.toString.call(arg) === '[object Array]';\n};\n\nisObject = function(obj) {\n  var type;\n  type = typeof obj;\n  return type === 'function' || type === 'object' && !!obj;\n};\n\nunique = function(array) {\n  var k, key, output, ref, results, value;\n  output = {};\n  for (key = k = 0, ref = array.length; 0 <= ref ? k < ref : k > ref; key = 0 <= ref ? ++k : --k) {\n    output[array[key]] = array[key];\n  }\n  results = [];\n  for (key in output) {\n    value = output[key];\n    results.push(value);\n  }\n  return results;\n};\n\noptimizeCb = function(func, context, argCount) {\n  if (context === void 0) {\n    return func;\n  }\n  switch ((argCount === null ? 3 : argCount)) {\n    case 1:\n      return function(value) {\n        return func.call(context, value);\n      };\n    case 2:\n      return function(value, other) {\n        return func.call(context, value, other);\n      };\n    case 3:\n      return function(value, index, collection) {\n        return func.call(context, value, index, collection);\n      };\n    case 4:\n      return function(accumulator, value, index, collection) {\n        return func.call(context, accumulator, value, index, collection);\n      };\n  }\n  return function() {\n    return func.apply(context, arguments);\n  };\n};\n\ncreateReduce = function(dir) {\n  var iterator;\n  iterator = function(obj, iteratee, memo, keys, index, length) {\n    var currentKey;\n    while (index >= 0 && index < length) {\n      currentKey = keys ? keys[index] : index;\n      memo = iteratee(memo, obj[currentKey], currentKey, obj);\n      index += dir;\n    }\n    return memo;\n  };\n  return function(obj, iteratee, memo, context) {\n    var index, keys, length;\n    iteratee = optimizeCb(iteratee, context, 4);\n    keys = Object.keys(obj);\n    length = (keys || obj).length;\n    index = dir > 0 ? 0 : length - 1;\n    if (arguments.length < 3) {\n      memo = obj[keys ? keys[index] : index];\n      index += dir;\n    }\n    return iterator(obj, iteratee, memo, keys, index, length);\n  };\n};\n\nreduceRight = createReduce(-1);\n\ndebounce = function(func, wait, immediate) {\n  var args, context, later, result, timeout, timestamp;\n  timeout = void 0;\n  args = void 0;\n  context = void 0;\n  timestamp = void 0;\n  result = void 0;\n  later = function() {\n    var last;\n    last = Date.now - timestamp;\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        if (!timeout) {\n          context = args = null;\n        }\n      }\n    }\n  };\n  return function() {\n    var callNow;\n    context = this;\n    args = arguments;\n    timestamp = Date.now;\n    callNow = immediate && !timeout;\n    if (!timeout) {\n      timeout = setTimeout(later, wait);\n    }\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n    return result;\n  };\n};\n\ngetKeys = function(obj) {\n  var key, keys;\n  if (!isObject(obj)) {\n    return [];\n  }\n  if (Object.keys) {\n    return Object.keys(obj);\n  }\n  keys = [];\n  for (key in obj) {\n    if (obj.has(key)) {\n      keys.push(key);\n    }\n  }\n  return keys;\n};\n\ngetValues = function(obj) {\n  var i, keys, length, values;\n  keys = getKeys(obj);\n  length = keys.length;\n  values = Array(length);\n  i = 0;\n  while (i < length) {\n    values[i] = obj[keys[i]];\n    i++;\n  }\n  return values;\n};\n\ncontains = function(obj, item, fromIndex) {\n  if (!isArray(obj)) {\n    obj = getValues(obj);\n  }\n  if (typeof fromIndex !== 'number' || guard) {\n    fromIndex = 0;\n  }\n  return obj.indexOf(item) >= 0;\n};\n\nintersection = function(array) {\n  var argsLength, i, item, j, k, l, ref, ref1, result;\n  result = [];\n  argsLength = arguments.length;\n  for (i = k = 0, ref = array.length; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {\n    item = array[i];\n    if (contains(result, item)) {\n      continue;\n    }\n    for (j = l = 1, ref1 = argsLength; 1 <= ref1 ? l <= ref1 : l >= ref1; j = 1 <= ref1 ? ++l : --l) {\n      if (!contains(arguments[j], item)) {\n        break;\n      }\n    }\n    if (j === argsLength) {\n      result.push(item);\n    }\n  }\n  return result;\n};\n\nexports.clone = clone;\n\nexports.guessLanguageFromFilename = guessLanguageFromFilename;\n\nexports.optimizeCb = optimizeCb;\n\nexports.reduceRight = reduceRight;\n\nexports.debounce = debounce;\n\nexports.unique = unique;\n\nexports.intersection = intersection;\n\nexports.getValues = getValues;\n\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(Buffer) {var clone = (function() {\n'use strict';\n\nvar nativeMap;\ntry {\n  nativeMap = Map;\n} catch(_) {\n  // maybe a reference error because no `Map`. Give it a dummy value that no\n  // value will ever be an instanceof.\n  nativeMap = function() {};\n}\n\nvar nativeSet;\ntry {\n  nativeSet = Set;\n} catch(_) {\n  nativeSet = function() {};\n}\n\nvar nativePromise;\ntry {\n  nativePromise = Promise;\n} catch(_) {\n  nativePromise = function() {};\n}\n\n/**\n * Clones (copies) an Object using deep copying.\n *\n * This function supports circular references by default, but if you are certain\n * there are no circular references in your object, you can save some CPU time\n * by calling clone(obj, false).\n *\n * Caution: if `circular` is false and `parent` contains circular references,\n * your program may enter an infinite loop and crash.\n *\n * @param `parent` - the object to be cloned\n * @param `circular` - set to true if the object to be cloned may contain\n *    circular references. (optional - true by default)\n * @param `depth` - set to a number if the object is only to be cloned to\n *    a particular depth. (optional - defaults to Infinity)\n * @param `prototype` - sets the prototype to be used when cloning an object.\n *    (optional - defaults to parent prototype).\n * @param `includeNonEnumerable` - set to true if the non-enumerable properties\n *    should be cloned as well. Non-enumerable properties on the prototype\n *    chain will be ignored. (optional - false by default)\n*/\nfunction clone(parent, circular, depth, prototype, includeNonEnumerable) {\n  if (typeof circular === 'object') {\n    depth = circular.depth;\n    prototype = circular.prototype;\n    includeNonEnumerable = circular.includeNonEnumerable;\n    circular = circular.circular;\n  }\n  // maintain two arrays for circular references, where corresponding parents\n  // and children have the same index\n  var allParents = [];\n  var allChildren = [];\n\n  var useBuffer = typeof Buffer != 'undefined';\n\n  if (typeof circular == 'undefined')\n    circular = true;\n\n  if (typeof depth == 'undefined')\n    depth = Infinity;\n\n  // recurse this function so we don't reset allParents and allChildren\n  function _clone(parent, depth) {\n    // cloning null always returns null\n    if (parent === null)\n      return null;\n\n    if (depth === 0)\n      return parent;\n\n    var child;\n    var proto;\n    if (typeof parent != 'object') {\n      return parent;\n    }\n\n    if (parent instanceof nativeMap) {\n      child = new nativeMap();\n    } else if (parent instanceof nativeSet) {\n      child = new nativeSet();\n    } else if (parent instanceof nativePromise) {\n      child = new nativePromise(function (resolve, reject) {\n        parent.then(function(value) {\n          resolve(_clone(value, depth - 1));\n        }, function(err) {\n          reject(_clone(err, depth - 1));\n        });\n      });\n    } else if (clone.__isArray(parent)) {\n      child = [];\n    } else if (clone.__isRegExp(parent)) {\n      child = new RegExp(parent.source, __getRegExpFlags(parent));\n      if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n    } else if (clone.__isDate(parent)) {\n      child = new Date(parent.getTime());\n    } else if (useBuffer && Buffer.isBuffer(parent)) {\n      child = new Buffer(parent.length);\n      parent.copy(child);\n      return child;\n    } else if (parent instanceof Error) {\n      child = Object.create(parent);\n    } else {\n      if (typeof prototype == 'undefined') {\n        proto = Object.getPrototypeOf(parent);\n        child = Object.create(proto);\n      }\n      else {\n        child = Object.create(prototype);\n        proto = prototype;\n      }\n    }\n\n    if (circular) {\n      var index = allParents.indexOf(parent);\n\n      if (index != -1) {\n        return allChildren[index];\n      }\n      allParents.push(parent);\n      allChildren.push(child);\n    }\n\n    if (parent instanceof nativeMap) {\n      var keyIterator = parent.keys();\n      while(true) {\n        var next = keyIterator.next();\n        if (next.done) {\n          break;\n        }\n        var keyChild = _clone(next.value, depth - 1);\n        var valueChild = _clone(parent.get(next.value), depth - 1);\n        child.set(keyChild, valueChild);\n      }\n    }\n    if (parent instanceof nativeSet) {\n      var iterator = parent.keys();\n      while(true) {\n        var next = iterator.next();\n        if (next.done) {\n          break;\n        }\n        var entryChild = _clone(next.value, depth - 1);\n        child.add(entryChild);\n      }\n    }\n\n    for (var i in parent) {\n      var attrs;\n      if (proto) {\n        attrs = Object.getOwnPropertyDescriptor(proto, i);\n      }\n\n      if (attrs && attrs.set == null) {\n        continue;\n      }\n      child[i] = _clone(parent[i], depth - 1);\n    }\n\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(parent);\n      for (var i = 0; i < symbols.length; i++) {\n        // Don't need to worry about cloning a symbol because it is a primitive,\n        // like a number or string.\n        var symbol = symbols[i];\n        var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);\n        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {\n          continue;\n        }\n        child[symbol] = _clone(parent[symbol], depth - 1);\n        if (!descriptor.enumerable) {\n          Object.defineProperty(child, symbol, {\n            enumerable: false\n          });\n        }\n      }\n    }\n\n    if (includeNonEnumerable) {\n      var allPropertyNames = Object.getOwnPropertyNames(parent);\n      for (var i = 0; i < allPropertyNames.length; i++) {\n        var propertyName = allPropertyNames[i];\n        var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);\n        if (descriptor && descriptor.enumerable) {\n          continue;\n        }\n        child[propertyName] = _clone(parent[propertyName], depth - 1);\n        Object.defineProperty(child, propertyName, {\n          enumerable: false\n        });\n      }\n    }\n\n    return child;\n  }\n\n  return _clone(parent, depth);\n}\n\n/**\n * Simple flat clone using prototype, accepts only objects, usefull for property\n * override on FLAT configuration object (no nested props).\n *\n * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n * works.\n */\nclone.clonePrototype = function clonePrototype(parent) {\n  if (parent === null)\n    return null;\n\n  var c = function () {};\n  c.prototype = parent;\n  return new c();\n};\n\n// private utility functions\n\nfunction __objToStr(o) {\n  return Object.prototype.toString.call(o);\n}\nclone.__objToStr = __objToStr;\n\nfunction __isDate(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Date]';\n}\nclone.__isDate = __isDate;\n\nfunction __isArray(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Array]';\n}\nclone.__isArray = __isArray;\n\nfunction __isRegExp(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';\n}\nclone.__isRegExp = __isRegExp;\n\nfunction __getRegExpFlags(re) {\n  var flags = '';\n  if (re.global) flags += 'g';\n  if (re.ignoreCase) flags += 'i';\n  if (re.multiline) flags += 'm';\n  return flags;\n}\nclone.__getRegExpFlags = __getRegExpFlags;\n\nreturn clone;\n})();\n\nif (typeof module === 'object' && module.exports) {\n  module.exports = clone;\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(52).Buffer))\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar registerCustomLoaders = function (loader, loaders, callback) {\n  if (!loaders.length) {\n    return callback();\n  }\n  var customLoader = loaders.shift();\n  loader.registerLoader(customLoader, function (err) {\n    if (err) {\n      return callback(err);\n    }\n    registerCustomLoaders(loader, loaders, callback);\n  });\n};\n\nexports.setSource = function (loader, packageId, name, source, language, callback) {\n  var implementation;\n  // Transpiling\n  if (language === 'coffeescript') {\n    if (!window.CoffeeScript) {\n      return callback(new Error('CoffeeScript compiler not available'));\n    }\n    try {\n      source = window.CoffeeScript.compile(source, {\n        bare: true\n      });\n    } catch (e) {\n      return callback(e);\n    }\n  }\n  if (language === 'es6' || language === 'es2015') {\n    if (!window.babel) {\n      return callback(new Error('Babel compiler not available'));\n    }\n    try {\n      source = window.babel.transform(source).code;\n    } catch (e) {\n      return callback(e);\n    }\n  }\n  // Eval the contents to get a runnable component\n  try {\n    var withExports = '(function () { var exports = {}; ' + source + '; return exports; })();';\n    implementation = eval(withExports);\n  } catch (e) {\n    return callback(e);\n  }\n\n  if (!implementation && !implementation.getComponent) {\n    return callback(new Error('Provided source failed to create a runnable component'));\n  }\n\n  loader.registerComponent(packageId, name, implementation, callback);\n};\n\nexports.getSource = function (loader, name, callback) {\n  if (!loader.components[name]) {\n    return callback(new Error('Component ' + name + ' not available'));\n  }\n  var component = loader.components[name];\n  var nameParts = name.split('/');\n  var componentData = {\n    name: nameParts[1],\n    library: nameParts[0]\n  };\n  if (loader.isGraph(component)) {\n    componentData.code = JSON.stringify(component, null, 2);\n    componentData.language = 'json';\n    return callback(null, componentData);\n  } else if (typeof component === 'function') {\n    componentData.code = component.toString();\n    componentData.language = 'javascript';\n    return callback(null, componentData);\n  } else if (typeof component.getComponent === 'function') {\n    componentData.code = component.getComponent.toString();\n    componentData.language = 'javascript';\n    return callback(null, componentData);\n  }\n  return callback(new Error('Unable to get sources for ' + name));\n};\n\nexports.register = function (loader, callback) {\n  var components = {\n    'Graph': __webpack_require__(34)\n  };\n  var loaders = [\n\n  ];\n  var names = Object.keys(components);\n\n  names.forEach(function (fullname) {\n    var mod = components[fullname];\n    var tok = fullname.split('/');\n    if (tok.length == 2) {\n      var modulename = tok[0];\n      var componentname = tok[1];\n      loader.registerComponent(modulename, componentname, mod);\n    } else {\n      loader.registerComponent(null, fullname, mod);\n    }\n  });\n\n  if (!loaders.length) {\n    return callback();\n  }\n\n  registerCustomLoaders(loader, loaders, callback);\n};\n\n\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar fbpGraph, ports;\n\nfbpGraph = __webpack_require__(5);\n\nexports.graph = fbpGraph.graph;\n\nexports.Graph = fbpGraph.Graph;\n\nexports.journal = fbpGraph.journal;\n\nexports.Journal = fbpGraph.Journal;\n\nexports.Network = __webpack_require__(27).Network;\n\nexports.isBrowser = __webpack_require__(7).isBrowser;\n\nexports.ComponentLoader = __webpack_require__(13).ComponentLoader;\n\nexports.Component = __webpack_require__(25).Component;\n\nexports.AsyncComponent = __webpack_require__(42).AsyncComponent;\n\nexports.helpers = __webpack_require__(43);\n\nexports.streams = __webpack_require__(15);\n\nports = __webpack_require__(29);\n\nexports.InPorts = ports.InPorts;\n\nexports.OutPorts = ports.OutPorts;\n\nexports.InPort = __webpack_require__(26);\n\nexports.OutPort = __webpack_require__(28);\n\nexports.Port = __webpack_require__(14).Port;\n\nexports.ArrayPort = __webpack_require__(40).ArrayPort;\n\nexports.internalSocket = __webpack_require__(9);\n\nexports.IP = __webpack_require__(3);\n\nexports.createNetwork = function(graph, callback, options) {\n  var network, networkReady;\n  if (typeof options !== 'object') {\n    options = {\n      delay: options\n    };\n  }\n  if (typeof callback !== 'function') {\n    callback = function(err) {\n      if (err) {\n        throw err;\n      }\n    };\n  }\n  network = new exports.Network(graph, options);\n  networkReady = function(network) {\n    return network.start(function(err) {\n      if (err) {\n        return callback(err);\n      }\n      return callback(null, network);\n    });\n  };\n  network.loader.listComponents(function(err) {\n    if (err) {\n      return callback(err);\n    }\n    if (graph.nodes.length === 0) {\n      return networkReady(network);\n    }\n    if (options.delay) {\n      callback(null, network);\n      return;\n    }\n    return network.connect(function(err) {\n      if (err) {\n        return callback(err);\n      }\n      return networkReady(network);\n    });\n  });\n  return network;\n};\n\nexports.loadFile = function(file, options, callback) {\n  var baseDir;\n  if (!callback) {\n    callback = options;\n    baseDir = null;\n  }\n  if (callback && typeof options !== 'object') {\n    options = {\n      baseDir: options\n    };\n  }\n  return exports.graph.loadFile(file, function(err, net) {\n    if (err) {\n      return callback(err);\n    }\n    if (options.baseDir) {\n      net.baseDir = options.baseDir;\n    }\n    return exports.createNetwork(net, callback, options);\n  });\n};\n\nexports.saveFile = function(graph, file, callback) {\n  return exports.graph.save(file, callback);\n};\n\nexports.asCallback = __webpack_require__(41).asCallback;\n\n\n/***/ }),\n/* 34 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(process) {(function() {\n  var Graph, noflo,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  noflo = __webpack_require__(39);\n\n  Graph = (function(superClass) {\n    extend(Graph, superClass);\n\n    function Graph(metadata1) {\n      this.metadata = metadata1;\n      this.network = null;\n      this.ready = true;\n      this.started = false;\n      this.starting = false;\n      this.baseDir = null;\n      this.loader = null;\n      this.load = 0;\n      this.inPorts = new noflo.InPorts({\n        graph: {\n          datatype: 'all',\n          description: 'NoFlo graph definition to be used with the subgraph component',\n          required: true\n        }\n      });\n      this.outPorts = new noflo.OutPorts;\n      this.inPorts.graph.on('ip', (function(_this) {\n        return function(packet) {\n          if (packet.type !== 'data') {\n            return;\n          }\n          return _this.setGraph(packet.data, function(err) {\n            if (err) {\n              return _this.error(err);\n            }\n          });\n        };\n      })(this));\n    }\n\n    Graph.prototype.setGraph = function(graph, callback) {\n      this.ready = false;\n      if (typeof graph === 'object') {\n        if (typeof graph.addNode === 'function') {\n          this.createNetwork(graph, callback);\n          return;\n        }\n        noflo.graph.loadJSON(graph, (function(_this) {\n          return function(err, instance) {\n            if (err) {\n              return callback(err);\n            }\n            instance.baseDir = _this.baseDir;\n            return _this.createNetwork(instance, callback);\n          };\n        })(this));\n        return;\n      }\n      if (graph.substr(0, 1) !== \"/\" && graph.substr(1, 1) !== \":\" && process && process.cwd) {\n        graph = (process.cwd()) + \"/\" + graph;\n      }\n      return noflo.graph.loadFile(graph, (function(_this) {\n        return function(err, instance) {\n          if (err) {\n            return callback(err);\n          }\n          instance.baseDir = _this.baseDir;\n          return _this.createNetwork(instance, callback);\n        };\n      })(this));\n    };\n\n    Graph.prototype.createNetwork = function(graph, callback) {\n      this.description = graph.properties.description || '';\n      this.icon = graph.properties.icon || this.icon;\n      if (!graph.name) {\n        graph.name = this.nodeId;\n      }\n      graph.componentLoader = this.loader;\n      return noflo.createNetwork(graph, (function(_this) {\n        return function(err, network1) {\n          _this.network = network1;\n          if (err) {\n            return callback(err);\n          }\n          _this.emit('network', _this.network);\n          _this.subscribeNetwork(_this.network);\n          return _this.network.connect(function(err) {\n            var name, node, ref;\n            if (err) {\n              return callback(err);\n            }\n            ref = _this.network.processes;\n            for (name in ref) {\n              node = ref[name];\n              _this.findEdgePorts(name, node);\n            }\n            _this.setToReady();\n            return callback();\n          });\n        };\n      })(this), true);\n    };\n\n    Graph.prototype.subscribeNetwork = function(network) {\n      var contexts;\n      contexts = [];\n      this.network.on('start', (function(_this) {\n        return function() {\n          var ctx;\n          ctx = {};\n          contexts.push(ctx);\n          return _this.activate(ctx);\n        };\n      })(this));\n      return this.network.on('end', (function(_this) {\n        return function() {\n          var ctx;\n          ctx = contexts.pop();\n          if (!ctx) {\n            return;\n          }\n          return _this.deactivate(ctx);\n        };\n      })(this));\n    };\n\n    Graph.prototype.isExportedInport = function(port, nodeName, portName) {\n      var exported, i, len, priv, pub, ref, ref1;\n      ref = this.network.graph.inports;\n      for (pub in ref) {\n        priv = ref[pub];\n        if (!(priv.process === nodeName && priv.port === portName)) {\n          continue;\n        }\n        return pub;\n      }\n      ref1 = this.network.graph.exports;\n      for (i = 0, len = ref1.length; i < len; i++) {\n        exported = ref1[i];\n        if (!(exported.process === nodeName && exported.port === portName)) {\n          continue;\n        }\n        this.network.graph.checkTransactionStart();\n        this.network.graph.removeExport(exported[\"public\"]);\n        this.network.graph.addInport(exported[\"public\"], exported.process, exported.port, exported.metadata);\n        this.network.graph.checkTransactionEnd();\n        return exported[\"public\"];\n      }\n      return false;\n    };\n\n    Graph.prototype.isExportedOutport = function(port, nodeName, portName) {\n      var exported, i, len, priv, pub, ref, ref1;\n      ref = this.network.graph.outports;\n      for (pub in ref) {\n        priv = ref[pub];\n        if (!(priv.process === nodeName && priv.port === portName)) {\n          continue;\n        }\n        return pub;\n      }\n      ref1 = this.network.graph.exports;\n      for (i = 0, len = ref1.length; i < len; i++) {\n        exported = ref1[i];\n        if (!(exported.process === nodeName && exported.port === portName)) {\n          continue;\n        }\n        this.network.graph.checkTransactionStart();\n        this.network.graph.removeExport(exported[\"public\"]);\n        this.network.graph.addOutport(exported[\"public\"], exported.process, exported.port, exported.metadata);\n        this.network.graph.checkTransactionEnd();\n        return exported[\"public\"];\n      }\n      return false;\n    };\n\n    Graph.prototype.setToReady = function() {\n      if (typeof process !== 'undefined' && process.execPath && process.execPath.indexOf('node') !== -1) {\n        return process.nextTick((function(_this) {\n          return function() {\n            _this.ready = true;\n            return _this.emit('ready');\n          };\n        })(this));\n      } else {\n        return setTimeout((function(_this) {\n          return function() {\n            _this.ready = true;\n            return _this.emit('ready');\n          };\n        })(this), 0);\n      }\n    };\n\n    Graph.prototype.findEdgePorts = function(name, process) {\n      var inPorts, outPorts, port, portName, targetPortName;\n      inPorts = process.component.inPorts.ports || process.component.inPorts;\n      outPorts = process.component.outPorts.ports || process.component.outPorts;\n      for (portName in inPorts) {\n        port = inPorts[portName];\n        targetPortName = this.isExportedInport(port, name, portName);\n        if (targetPortName === false) {\n          continue;\n        }\n        this.inPorts.add(targetPortName, port);\n        this.inPorts[targetPortName].once('connect', (function(_this) {\n          return function() {\n            if (_this.starting) {\n              return;\n            }\n            if (_this.isStarted()) {\n              return;\n            }\n            return _this.start(function() {});\n          };\n        })(this));\n      }\n      for (portName in outPorts) {\n        port = outPorts[portName];\n        targetPortName = this.isExportedOutport(port, name, portName);\n        if (targetPortName === false) {\n          continue;\n        }\n        this.outPorts.add(targetPortName, port);\n      }\n      return true;\n    };\n\n    Graph.prototype.isReady = function() {\n      return this.ready;\n    };\n\n    Graph.prototype.isSubgraph = function() {\n      return true;\n    };\n\n    Graph.prototype.setUp = function(callback) {\n      this.starting = true;\n      if (!this.isReady()) {\n        this.once('ready', (function(_this) {\n          return function() {\n            return _this.setUp(callback);\n          };\n        })(this));\n        return;\n      }\n      if (!this.network) {\n        return callback(null);\n      }\n      return this.network.start(function(err) {\n        if (err) {\n          return callback(err);\n        }\n        this.starting = false;\n        return callback();\n      });\n    };\n\n    Graph.prototype.tearDown = function(callback) {\n      this.starting = false;\n      if (!this.network) {\n        return callback(null);\n      }\n      return this.network.stop(function(err) {\n        if (err) {\n          return callback(err);\n        }\n        return callback();\n      });\n    };\n\n    return Graph;\n\n  })(noflo.Component);\n\n  exports.getComponent = function(metadata) {\n    return new Graph(metadata);\n  };\n\n}).call(this);\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n/* 35 */\n/***/ (function(module, exports, __webpack_require__) {\n\n(function() {\n  var ArrayPort, platform, port,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  port = __webpack_require__(11);\n\n  platform = __webpack_require__(6);\n\n  ArrayPort = (function(superClass) {\n    extend(ArrayPort, superClass);\n\n    function ArrayPort(type) {\n      this.type = type;\n      platform.deprecated('noflo.ArrayPort is deprecated. Please port to noflo.InPort/noflo.OutPort and use addressable: true');\n      ArrayPort.__super__.constructor.call(this, this.type);\n    }\n\n    ArrayPort.prototype.attach = function(socket, socketId) {\n      if (socketId == null) {\n        socketId = null;\n      }\n      if (socketId === null) {\n        socketId = this.sockets.length;\n      }\n      this.sockets[socketId] = socket;\n      return this.attachSocket(socket, socketId);\n    };\n\n    ArrayPort.prototype.connect = function(socketId) {\n      if (socketId == null) {\n        socketId = null;\n      }\n      if (socketId === null) {\n        if (!this.sockets.length) {\n          throw new Error((this.getId()) + \": No connections available\");\n        }\n        this.sockets.forEach(function(socket) {\n          if (!socket) {\n            return;\n          }\n          return socket.connect();\n        });\n        return;\n      }\n      if (!this.sockets[socketId]) {\n        throw new Error((this.getId()) + \": No connection '\" + socketId + \"' available\");\n      }\n      return this.sockets[socketId].connect();\n    };\n\n    ArrayPort.prototype.beginGroup = function(group, socketId) {\n      if (socketId == null) {\n        socketId = null;\n      }\n      if (socketId === null) {\n        if (!this.sockets.length) {\n          throw new Error((this.getId()) + \": No connections available\");\n        }\n        this.sockets.forEach((function(_this) {\n          return function(socket, index) {\n            if (!socket) {\n              return;\n            }\n            return _this.beginGroup(group, index);\n          };\n        })(this));\n        return;\n      }\n      if (!this.sockets[socketId]) {\n        throw new Error((this.getId()) + \": No connection '\" + socketId + \"' available\");\n      }\n      if (this.isConnected(socketId)) {\n        return this.sockets[socketId].beginGroup(group);\n      }\n      this.sockets[socketId].once(\"connect\", (function(_this) {\n        return function() {\n          return _this.sockets[socketId].beginGroup(group);\n        };\n      })(this));\n      return this.sockets[socketId].connect();\n    };\n\n    ArrayPort.prototype.send = function(data, socketId) {\n      if (socketId == null) {\n        socketId = null;\n      }\n      if (socketId === null) {\n        if (!this.sockets.length) {\n          throw new Error((this.getId()) + \": No connections available\");\n        }\n        this.sockets.forEach((function(_this) {\n          return function(socket, index) {\n            if (!socket) {\n              return;\n            }\n            return _this.send(data, index);\n          };\n        })(this));\n        return;\n      }\n      if (!this.sockets[socketId]) {\n        throw new Error((this.getId()) + \": No connection '\" + socketId + \"' available\");\n      }\n      if (this.isConnected(socketId)) {\n        return this.sockets[socketId].send(data);\n      }\n      this.sockets[socketId].once(\"connect\", (function(_this) {\n        return function() {\n          return _this.sockets[socketId].send(data);\n        };\n      })(this));\n      return this.sockets[socketId].connect();\n    };\n\n    ArrayPort.prototype.endGroup = function(socketId) {\n      if (socketId == null) {\n        socketId = null;\n      }\n      if (socketId === null) {\n        if (!this.sockets.length) {\n          throw new Error((this.getId()) + \": No connections available\");\n        }\n        this.sockets.forEach((function(_this) {\n          return function(socket, index) {\n            if (!socket) {\n              return;\n            }\n            return _this.endGroup(index);\n          };\n        })(this));\n        return;\n      }\n      if (!this.sockets[socketId]) {\n        throw new Error((this.getId()) + \": No connection '\" + socketId + \"' available\");\n      }\n      return this.sockets[socketId].endGroup();\n    };\n\n    ArrayPort.prototype.disconnect = function(socketId) {\n      var i, len, ref, socket;\n      if (socketId == null) {\n        socketId = null;\n      }\n      if (socketId === null) {\n        if (!this.sockets.length) {\n          throw new Error((this.getId()) + \": No connections available\");\n        }\n        ref = this.sockets;\n        for (i = 0, len = ref.length; i < len; i++) {\n          socket = ref[i];\n          if (!socket) {\n            return;\n          }\n          socket.disconnect();\n        }\n        return;\n      }\n      if (!this.sockets[socketId]) {\n        return;\n      }\n      return this.sockets[socketId].disconnect();\n    };\n\n    ArrayPort.prototype.isConnected = function(socketId) {\n      var connected;\n      if (socketId == null) {\n        socketId = null;\n      }\n      if (socketId === null) {\n        connected = false;\n        this.sockets.forEach(function(socket) {\n          if (!socket) {\n            return;\n          }\n          if (socket.isConnected()) {\n            return connected = true;\n          }\n        });\n        return connected;\n      }\n      if (!this.sockets[socketId]) {\n        return false;\n      }\n      return this.sockets[socketId].isConnected();\n    };\n\n    ArrayPort.prototype.isAddressable = function() {\n      return true;\n    };\n\n    ArrayPort.prototype.isAttached = function(socketId) {\n      var i, len, ref, socket;\n      if (socketId === void 0) {\n        ref = this.sockets;\n        for (i = 0, len = ref.length; i < len; i++) {\n          socket = ref[i];\n          if (socket) {\n            return true;\n          }\n        }\n        return false;\n      }\n      if (this.sockets[socketId]) {\n        return true;\n      }\n      return false;\n    };\n\n    return ArrayPort;\n\n  })(port.Port);\n\n  exports.ArrayPort = ArrayPort;\n\n}).call(this);\n\n\n/***/ }),\n/* 36 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(process) {(function() {\n  var ComponentLoader, Graph, IP, Network, getType, internalSocket, normalizeOptions, normalizeOutput, prepareInputMap, prepareNetwork, runNetwork, sendOutputMap;\n\n  ComponentLoader = __webpack_require__(10).ComponentLoader;\n\n  Network = __webpack_require__(20).Network;\n\n  IP = __webpack_require__(2);\n\n  internalSocket = __webpack_require__(8);\n\n  Graph = __webpack_require__(5).Graph;\n\n  normalizeOptions = function(options, component) {\n    if (!options) {\n      options = {};\n    }\n    if (!options.name) {\n      options.name = component;\n    }\n    if (options.loader) {\n      options.baseDir = options.loader.baseDir;\n    }\n    if (!options.baseDir && process && process.cwd) {\n      options.baseDir = process.cwd();\n    }\n    if (!options.loader) {\n      options.loader = new ComponentLoader(options.baseDir);\n    }\n    if (!options.raw) {\n      options.raw = false;\n    }\n    return options;\n  };\n\n  prepareNetwork = function(component, options, callback) {\n    return options.loader.load(component, function(err, instance) {\n      var def, graph, inPorts, network, nodeName, outPorts, port;\n      if (err) {\n        return callback(err);\n      }\n      graph = new Graph(options.name);\n      nodeName = options.name;\n      graph.addNode(nodeName, component);\n      inPorts = instance.inPorts.ports || instance.inPorts;\n      outPorts = instance.outPorts.ports || instance.outPorts;\n      for (port in inPorts) {\n        def = inPorts[port];\n        graph.addInport(port, nodeName, port);\n      }\n      for (port in outPorts) {\n        def = outPorts[port];\n        graph.addOutport(port, nodeName, port);\n      }\n      graph.componentLoader = options.loader;\n      network = new Network(graph, options);\n      return network.connect(function(err) {\n        if (err) {\n          return callback(err);\n        }\n        return callback(null, network);\n      });\n    });\n  };\n\n  runNetwork = function(network, inputs, options, callback) {\n    var inPorts, inSockets, outPorts, outSockets, process, received;\n    process = network.getNode(options.name);\n    inPorts = Object.keys(network.graph.inports);\n    inSockets = {};\n    inPorts.forEach(function(inport) {\n      inSockets[inport] = internalSocket.createSocket();\n      return process.component.inPorts[inport].attach(inSockets[inport]);\n    });\n    received = [];\n    outPorts = Object.keys(network.graph.outports);\n    outSockets = {};\n    outPorts.forEach(function(outport) {\n      outSockets[outport] = internalSocket.createSocket();\n      process.component.outPorts[outport].attach(outSockets[outport]);\n      return outSockets[outport].on('ip', function(ip) {\n        var res;\n        res = {};\n        res[outport] = ip;\n        return received.push(res);\n      });\n    });\n    network.once('end', function() {\n      var port, socket;\n      for (port in outSockets) {\n        socket = outSockets[port];\n        process.component.outPorts[port].detach(socket);\n      }\n      outSockets = {};\n      inSockets = {};\n      return callback(null, received);\n    });\n    return network.start(function(err) {\n      var i, inputMap, len, port, results, value;\n      if (err) {\n        return callback(err);\n      }\n      results = [];\n      for (i = 0, len = inputs.length; i < len; i++) {\n        inputMap = inputs[i];\n        results.push((function() {\n          var results1;\n          results1 = [];\n          for (port in inputMap) {\n            value = inputMap[port];\n            if (IP.isIP(value)) {\n              inSockets[port].post(value);\n              continue;\n            }\n            results1.push(inSockets[port].post(new IP('data', value)));\n          }\n          return results1;\n        })());\n      }\n      return results;\n    });\n  };\n\n  getType = function(inputs, network) {\n    var key, maps, value;\n    if (typeof inputs !== 'object') {\n      return 'simple';\n    }\n    if (Array.isArray(inputs)) {\n      maps = inputs.filter(function(entry) {\n        return getType(entry, network) === 'map';\n      });\n      if (maps.length === inputs.length) {\n        return 'sequence';\n      }\n      return 'simple';\n    }\n    if (!Object.keys(inputs).length) {\n      return 'simple';\n    }\n    for (key in inputs) {\n      value = inputs[key];\n      if (!network.graph.inports[key]) {\n        return 'simple';\n      }\n    }\n    return 'map';\n  };\n\n  prepareInputMap = function(inputs, inputType, network) {\n    var inPort, map;\n    if (inputType === 'sequence') {\n      return inputs;\n    }\n    if (inputType === 'map') {\n      return [inputs];\n    }\n    inPort = Object.keys(network.graph.inports)[0];\n    if (network.graph.inports[\"in\"]) {\n      inPort = 'in';\n    }\n    map = {};\n    map[inPort] = inputs;\n    return [map];\n  };\n\n  normalizeOutput = function(values, options) {\n    var current, i, len, packet, previous, result;\n    if (options.raw) {\n      return values;\n    }\n    result = [];\n    previous = null;\n    current = result;\n    for (i = 0, len = values.length; i < len; i++) {\n      packet = values[i];\n      if (packet.type === 'openBracket') {\n        previous = current;\n        current = [];\n        previous.push(current);\n      }\n      if (packet.type === 'data') {\n        current.push(packet.data);\n      }\n      if (packet.type === 'closeBracket') {\n        current = previous;\n      }\n    }\n    if (result.length === 1) {\n      return result[0];\n    }\n    return result;\n  };\n\n  sendOutputMap = function(outputs, resultType, options, callback) {\n    var errors, i, key, len, map, mappedOutputs, outputKeys, packets, port, result, val, withValue;\n    errors = outputs.filter(function(map) {\n      return map.error != null;\n    }).map(function(map) {\n      return map.error;\n    });\n    if (errors.length) {\n      return callback(normalizeOutput(errors, options));\n    }\n    if (resultType === 'sequence') {\n      return callback(null, outputs.map(function(map) {\n        var key, res, val;\n        res = {};\n        for (key in map) {\n          val = map[key];\n          if (options.raw) {\n            res[key] = val;\n            continue;\n          }\n          res[key] = normalizeOutput([val], options);\n        }\n        return res;\n      }));\n    }\n    mappedOutputs = {};\n    for (i = 0, len = outputs.length; i < len; i++) {\n      map = outputs[i];\n      for (key in map) {\n        val = map[key];\n        if (!mappedOutputs[key]) {\n          mappedOutputs[key] = [];\n        }\n        mappedOutputs[key].push(val);\n      }\n    }\n    outputKeys = Object.keys(mappedOutputs);\n    withValue = outputKeys.filter(function(outport) {\n      return mappedOutputs[outport].length > 0;\n    });\n    if (withValue.length === 0) {\n      return callback(null);\n    }\n    if (withValue.length === 1 && resultType === 'simple') {\n      return callback(null, normalizeOutput(mappedOutputs[withValue[0]], options));\n    }\n    result = {};\n    for (port in mappedOutputs) {\n      packets = mappedOutputs[port];\n      result[port] = normalizeOutput(packets, options);\n    }\n    return callback(null, result);\n  };\n\n  exports.asCallback = function(component, options) {\n    options = normalizeOptions(options, component);\n    return function(inputs, callback) {\n      return prepareNetwork(component, options, function(err, network) {\n        var inputMap, resultType;\n        if (err) {\n          return callback(err);\n        }\n        resultType = getType(inputs, network);\n        inputMap = prepareInputMap(inputs, resultType, network);\n        return runNetwork(network, inputMap, options, function(err, outputMap) {\n          if (err) {\n            return callback(err);\n          }\n          return sendOutputMap(outputMap, resultType, options, callback);\n        });\n      });\n    };\n  };\n\n}).call(this);\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n/* 37 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(process) {(function() {\n  var AsyncComponent, component, platform, port,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  port = __webpack_require__(11);\n\n  component = __webpack_require__(18);\n\n  platform = __webpack_require__(6);\n\n  AsyncComponent = (function(superClass) {\n    extend(AsyncComponent, superClass);\n\n    function AsyncComponent(inPortName, outPortName, errPortName) {\n      this.inPortName = inPortName != null ? inPortName : \"in\";\n      this.outPortName = outPortName != null ? outPortName : \"out\";\n      this.errPortName = errPortName != null ? errPortName : \"error\";\n      this.error = bind(this.error, this);\n      platform.deprecated('noflo.AsyncComponent is deprecated. Please port to Process API');\n      if (!this.inPorts[this.inPortName]) {\n        throw new Error(\"no inPort named '\" + this.inPortName + \"'\");\n      }\n      if (!this.outPorts[this.outPortName]) {\n        throw new Error(\"no outPort named '\" + this.outPortName + \"'\");\n      }\n      this.load = 0;\n      this.q = [];\n      this.errorGroups = [];\n      this.outPorts.load = new port.Port();\n      this.inPorts[this.inPortName].on(\"begingroup\", (function(_this) {\n        return function(group) {\n          if (_this.load > 0) {\n            return _this.q.push({\n              name: \"begingroup\",\n              data: group\n            });\n          }\n          _this.errorGroups.push(group);\n          return _this.outPorts[_this.outPortName].beginGroup(group);\n        };\n      })(this));\n      this.inPorts[this.inPortName].on(\"endgroup\", (function(_this) {\n        return function() {\n          if (_this.load > 0) {\n            return _this.q.push({\n              name: \"endgroup\"\n            });\n          }\n          _this.errorGroups.pop();\n          return _this.outPorts[_this.outPortName].endGroup();\n        };\n      })(this));\n      this.inPorts[this.inPortName].on(\"disconnect\", (function(_this) {\n        return function() {\n          if (_this.load > 0) {\n            return _this.q.push({\n              name: \"disconnect\"\n            });\n          }\n          _this.outPorts[_this.outPortName].disconnect();\n          _this.errorGroups = [];\n          if (_this.outPorts.load.isAttached()) {\n            return _this.outPorts.load.disconnect();\n          }\n        };\n      })(this));\n      this.inPorts[this.inPortName].on(\"data\", (function(_this) {\n        return function(data) {\n          if (_this.q.length > 0) {\n            return _this.q.push({\n              name: \"data\",\n              data: data\n            });\n          }\n          return _this.processData(data);\n        };\n      })(this));\n    }\n\n    AsyncComponent.prototype.processData = function(data) {\n      this.incrementLoad();\n      return this.doAsync(data, (function(_this) {\n        return function(err) {\n          if (err) {\n            _this.error(err, _this.errorGroups, _this.errPortName);\n          }\n          return _this.decrementLoad();\n        };\n      })(this));\n    };\n\n    AsyncComponent.prototype.incrementLoad = function() {\n      this.load++;\n      if (this.outPorts.load.isAttached()) {\n        this.outPorts.load.send(this.load);\n      }\n      if (this.outPorts.load.isAttached()) {\n        return this.outPorts.load.disconnect();\n      }\n    };\n\n    AsyncComponent.prototype.doAsync = function(data, callback) {\n      return callback(new Error(\"AsyncComponents must implement doAsync\"));\n    };\n\n    AsyncComponent.prototype.decrementLoad = function() {\n      if (this.load === 0) {\n        throw new Error(\"load cannot be negative\");\n      }\n      this.load--;\n      if (this.outPorts.load.isAttached()) {\n        this.outPorts.load.send(this.load);\n      }\n      if (this.outPorts.load.isAttached()) {\n        this.outPorts.load.disconnect();\n      }\n      if (typeof process !== 'undefined' && process.execPath && process.execPath.indexOf('node') !== -1) {\n        return process.nextTick((function(_this) {\n          return function() {\n            return _this.processQueue();\n          };\n        })(this));\n      } else {\n        return setTimeout((function(_this) {\n          return function() {\n            return _this.processQueue();\n          };\n        })(this), 0);\n      }\n    };\n\n    AsyncComponent.prototype.processQueue = function() {\n      var event, processedData;\n      if (this.load > 0) {\n        return;\n      }\n      processedData = false;\n      while (this.q.length > 0) {\n        event = this.q[0];\n        switch (event.name) {\n          case \"begingroup\":\n            if (processedData) {\n              return;\n            }\n            this.outPorts[this.outPortName].beginGroup(event.data);\n            this.errorGroups.push(event.data);\n            this.q.shift();\n            break;\n          case \"endgroup\":\n            if (processedData) {\n              return;\n            }\n            this.outPorts[this.outPortName].endGroup();\n            this.errorGroups.pop();\n            this.q.shift();\n            break;\n          case \"disconnect\":\n            if (processedData) {\n              return;\n            }\n            this.outPorts[this.outPortName].disconnect();\n            if (this.outPorts.load.isAttached()) {\n              this.outPorts.load.disconnect();\n            }\n            this.errorGroups = [];\n            this.q.shift();\n            break;\n          case \"data\":\n            this.processData(event.data);\n            this.q.shift();\n            processedData = true;\n        }\n      }\n    };\n\n    AsyncComponent.prototype.tearDown = function(callback) {\n      this.q = [];\n      this.errorGroups = [];\n      return callback();\n    };\n\n    AsyncComponent.prototype.error = function(e, groups, errorPort) {\n      var group, i, j, len, len1;\n      if (groups == null) {\n        groups = [];\n      }\n      if (errorPort == null) {\n        errorPort = 'error';\n      }\n      if (this.outPorts[errorPort] && (this.outPorts[errorPort].isAttached() || !this.outPorts[errorPort].isRequired())) {\n        for (i = 0, len = groups.length; i < len; i++) {\n          group = groups[i];\n          this.outPorts[errorPort].beginGroup(group);\n        }\n        this.outPorts[errorPort].send(e);\n        for (j = 0, len1 = groups.length; j < len1; j++) {\n          group = groups[j];\n          this.outPorts[errorPort].endGroup();\n        }\n        this.outPorts[errorPort].disconnect();\n        return;\n      }\n      throw e;\n    };\n\n    return AsyncComponent;\n\n  })(component.Component);\n\n  exports.AsyncComponent = AsyncComponent;\n\n}).call(this);\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n/* 38 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(process) {(function() {\n  var IP, InternalSocket, OutPortWrapper, StreamReceiver, StreamSender, checkDeprecation, checkWirePatternPreconditions, checkWirePatternPreconditionsInput, checkWirePatternPreconditionsParams, debug, getGroupContext, getInputData, getOutputProxy, handleInputCollation, isArray, legacyWirePattern, platform, populateParams, processApiWirePattern, reorderBuffer, setupBracketForwarding, setupControlPorts, setupErrorHandler, setupSendDefaults, utils,\n    slice = [].slice,\n    hasProp = {}.hasOwnProperty;\n\n  StreamSender = __webpack_require__(12).StreamSender;\n\n  StreamReceiver = __webpack_require__(12).StreamReceiver;\n\n  InternalSocket = __webpack_require__(8);\n\n  IP = __webpack_require__(2);\n\n  platform = __webpack_require__(6);\n\n  utils = __webpack_require__(23);\n\n  debug = __webpack_require__(4)('noflo:helpers');\n\n  isArray = function(obj) {\n    if (Array.isArray) {\n      return Array.isArray(obj);\n    }\n    return Object.prototype.toString.call(arg) === '[object Array]';\n  };\n\n  exports.MapComponent = function(component, func, config) {\n    platform.deprecated('noflo.helpers.MapComponent is deprecated. Please port to Process API');\n    if (!config) {\n      config = {};\n    }\n    if (!config.inPort) {\n      config.inPort = 'in';\n    }\n    if (!config.outPort) {\n      config.outPort = 'out';\n    }\n    if (!component.forwardBrackets) {\n      component.forwardBrackets = {};\n    }\n    component.forwardBrackets[config.inPort] = [config.outPort];\n    return component.process(function(input, output) {\n      var data, groups, outProxy;\n      if (!input.hasData(config.inPort)) {\n        return;\n      }\n      data = input.getData(config.inPort);\n      groups = getGroupContext(component, config.inPort, input);\n      outProxy = getOutputProxy([config.outPort], output);\n      func(data, groups, outProxy);\n      return output.done();\n    });\n  };\n\n  exports.WirePattern = function(component, config, proc) {\n    var inPorts, outPorts, ref, setup;\n    inPorts = 'in' in config ? config[\"in\"] : 'in';\n    if (!isArray(inPorts)) {\n      inPorts = [inPorts];\n    }\n    outPorts = 'out' in config ? config.out : 'out';\n    if (!isArray(outPorts)) {\n      outPorts = [outPorts];\n    }\n    if (!('error' in config)) {\n      config.error = 'error';\n    }\n    if (!('async' in config)) {\n      config.async = false;\n    }\n    if (!('ordered' in config)) {\n      config.ordered = true;\n    }\n    if (!('group' in config)) {\n      config.group = false;\n    }\n    if (!('field' in config)) {\n      config.field = null;\n    }\n    if (!('forwardGroups' in config)) {\n      config.forwardGroups = false;\n    }\n    if (config.forwardGroups) {\n      if (typeof config.forwardGroups === 'string') {\n        config.forwardGroups = [config.forwardGroups];\n      }\n      if (typeof config.forwardGroups === 'boolean') {\n        config.forwardGroups = inPorts;\n      }\n    }\n    if (!('receiveStreams' in config)) {\n      config.receiveStreams = false;\n    }\n    if (config.receiveStreams) {\n      throw new Error('WirePattern receiveStreams is deprecated');\n    }\n    if (!('sendStreams' in config)) {\n      config.sendStreams = false;\n    }\n    if (config.sendStreams) {\n      throw new Error('WirePattern sendStreams is deprecated');\n    }\n    if (config.async) {\n      config.sendStreams = outPorts;\n    }\n    if (!('params' in config)) {\n      config.params = [];\n    }\n    if (typeof config.params === 'string') {\n      config.params = [config.params];\n    }\n    if (!('name' in config)) {\n      config.name = '';\n    }\n    if (!('dropInput' in config)) {\n      config.dropInput = false;\n    }\n    if (!('arrayPolicy' in config)) {\n      config.arrayPolicy = {\n        \"in\": 'any',\n        params: 'all'\n      };\n    }\n    config.inPorts = inPorts;\n    config.outPorts = outPorts;\n    checkDeprecation(config, proc);\n    if (config.legacy || (typeof process !== \"undefined\" && process !== null ? (ref = process.env) != null ? ref.NOFLO_WIREPATTERN_LEGACY : void 0 : void 0)) {\n      platform.deprecated('noflo.helpers.WirePattern legacy mode is deprecated');\n      setup = legacyWirePattern;\n    } else {\n      setup = processApiWirePattern;\n    }\n    return setup(component, config, proc);\n  };\n\n  processApiWirePattern = function(component, config, func) {\n    setupControlPorts(component, config);\n    setupSendDefaults(component);\n    setupBracketForwarding(component, config);\n    component.ordered = config.ordered;\n    return component.process(function(input, output, context) {\n      var data, errorHandler, groups, outProxy, postpone, resume;\n      if (!checkWirePatternPreconditions(config, input, output)) {\n        return;\n      }\n      component.params = populateParams(config, input);\n      data = getInputData(config, input);\n      groups = getGroupContext(component, config.inPorts[0], input);\n      outProxy = getOutputProxy(config.outPorts, output);\n      debug(\"WirePattern Process API call with\", data, groups, component.params, context.scope);\n      postpone = function() {\n        throw new Error('noflo.helpers.WirePattern postpone is deprecated');\n      };\n      resume = function() {\n        throw new Error('noflo.helpers.WirePattern resume is deprecated');\n      };\n      if (!config.async) {\n        errorHandler = setupErrorHandler(component, config, output);\n        func.call(component, data, groups, outProxy, postpone, resume, input.scope);\n        if (output.result.__resolved) {\n          return;\n        }\n        errorHandler();\n        output.done();\n        return;\n      }\n      errorHandler = setupErrorHandler(component, config, output);\n      return func.call(component, data, groups, outProxy, function(err) {\n        errorHandler();\n        return output.done(err);\n      }, postpone, resume, input.scope);\n    });\n  };\n\n  checkDeprecation = function(config, func) {\n    if (config.group) {\n      platform.deprecated('noflo.helpers.WirePattern group option is deprecated. Please port to Process API');\n    }\n    if (config.field) {\n      platform.deprecated('noflo.helpers.WirePattern field option is deprecated. Please port to Process API');\n    }\n    if (func.length > 4) {\n      platform.deprecated('noflo.helpers.WirePattern postpone and resume are deprecated. Please port to Process API');\n    }\n    if (!config.async) {\n      platform.deprecated('noflo.helpers.WirePattern synchronous is deprecated. Please port to Process API');\n    }\n    if (config.error !== 'error') {\n      platform.deprecated('noflo.helpers.WirePattern custom error port name is deprecated. Please switch to \"error\" or port to WirePattern');\n    }\n  };\n\n  setupControlPorts = function(component, config) {\n    var j, len, param, ref, results;\n    ref = config.params;\n    results = [];\n    for (j = 0, len = ref.length; j < len; j++) {\n      param = ref[j];\n      results.push(component.inPorts[param].options.control = true);\n    }\n    return results;\n  };\n\n  setupBracketForwarding = function(component, config) {\n    var inPort, inPorts, j, k, len, len1, outPort, ref;\n    component.forwardBrackets = {};\n    if (!config.forwardGroups) {\n      return;\n    }\n    inPorts = config.inPorts;\n    if (isArray(config.forwardGroups)) {\n      inPorts = config.forwardGroups;\n    }\n    for (j = 0, len = inPorts.length; j < len; j++) {\n      inPort = inPorts[j];\n      component.forwardBrackets[inPort] = [];\n      ref = config.outPorts;\n      for (k = 0, len1 = ref.length; k < len1; k++) {\n        outPort = ref[k];\n        component.forwardBrackets[inPort].push(outPort);\n      }\n      if (component.outPorts.error) {\n        component.forwardBrackets[inPort].push('error');\n      }\n    }\n  };\n\n  setupErrorHandler = function(component, config, output) {\n    var errorHandler, errors, failHandler, sendErrors;\n    errors = [];\n    errorHandler = function(e, groups) {\n      if (groups == null) {\n        groups = [];\n      }\n      platform.deprecated('noflo.helpers.WirePattern error method is deprecated. Please send error to callback instead');\n      errors.push({\n        err: e,\n        groups: groups\n      });\n      return component.hasErrors = true;\n    };\n    failHandler = function(e, groups) {\n      if (e == null) {\n        e = null;\n      }\n      if (groups == null) {\n        groups = [];\n      }\n      platform.deprecated('noflo.helpers.WirePattern fail method is deprecated. Please send error to callback instead');\n      if (e) {\n        errorHandler(e, groups);\n      }\n      sendErrors();\n      return output.done();\n    };\n    sendErrors = function() {\n      if (!errors.length) {\n        return;\n      }\n      if (config.name) {\n        output.sendIP('error', new IP('openBracket', config.name));\n      }\n      errors.forEach(function(e) {\n        var grp, j, k, len, len1, ref, ref1, results;\n        ref = e.groups;\n        for (j = 0, len = ref.length; j < len; j++) {\n          grp = ref[j];\n          output.sendIP('error', new IP('openBracket', grp));\n        }\n        output.sendIP('error', new IP('data', e.err));\n        ref1 = e.groups;\n        results = [];\n        for (k = 0, len1 = ref1.length; k < len1; k++) {\n          grp = ref1[k];\n          results.push(output.sendIP('error', new IP('closeBracket', grp)));\n        }\n        return results;\n      });\n      if (config.name) {\n        output.sendIP('error', new IP('closeBracket', config.name));\n      }\n      component.hasErrors = false;\n      return errors = [];\n    };\n    component.hasErrors = false;\n    component.error = errorHandler;\n    component.fail = failHandler;\n    return sendErrors;\n  };\n\n  setupSendDefaults = function(component) {\n    var portsWithDefaults;\n    portsWithDefaults = Object.keys(component.inPorts.ports).filter(function(p) {\n      if (!component.inPorts[p].options.control) {\n        return false;\n      }\n      if (!component.inPorts[p].hasDefault()) {\n        return false;\n      }\n      return true;\n    });\n    return component.sendDefaults = function() {\n      platform.deprecated('noflo.helpers.WirePattern sendDefaults method is deprecated. Please start with a Network');\n      return portsWithDefaults.forEach(function(port) {\n        var tempSocket;\n        tempSocket = InternalSocket.createSocket();\n        component.inPorts[port].attach(tempSocket);\n        tempSocket.send();\n        tempSocket.disconnect();\n        return component.inPorts[port].detach(tempSocket);\n      });\n    };\n  };\n\n  populateParams = function(config, input) {\n    var idx, j, k, len, len1, paramPort, params, ref, ref1;\n    if (!config.params.length) {\n      return {};\n    }\n    params = {};\n    ref = config.params;\n    for (j = 0, len = ref.length; j < len; j++) {\n      paramPort = ref[j];\n      if (input.ports[paramPort].isAddressable()) {\n        params[paramPort] = {};\n        ref1 = input.attached(paramPort);\n        for (k = 0, len1 = ref1.length; k < len1; k++) {\n          idx = ref1[k];\n          if (!input.hasData([paramPort, idx])) {\n            continue;\n          }\n          params[paramPort][idx] = input.getData([paramPort, idx]);\n        }\n        continue;\n      }\n      params[paramPort] = input.getData(paramPort);\n    }\n    return params;\n  };\n\n  reorderBuffer = function(buffer, matcher) {\n    var brackets, idx, ip, j, k, len, len1, results, substream, substreamBrackets, substreamIdx;\n    substream = null;\n    brackets = [];\n    substreamBrackets = [];\n    for (idx = j = 0, len = buffer.length; j < len; idx = ++j) {\n      ip = buffer[idx];\n      if (ip.type === 'openBracket') {\n        brackets.push(ip.data);\n        substreamBrackets.push(ip);\n        continue;\n      }\n      if (ip.type === 'closeBracket') {\n        brackets.pop();\n        if (substream) {\n          substream.push(ip);\n        }\n        if (substreamBrackets.length) {\n          substreamBrackets.pop();\n        }\n        if (substream && !substreamBrackets.length) {\n          break;\n        }\n        continue;\n      }\n      if (!matcher(ip, brackets)) {\n        substreamBrackets = [];\n        continue;\n      }\n      substream = substreamBrackets.slice(0);\n      substream.push(ip);\n    }\n    substreamIdx = buffer.indexOf(substream[0]);\n    if (substreamIdx === 0) {\n      return;\n    }\n    buffer.splice(substreamIdx, substream.length);\n    substream.reverse();\n    results = [];\n    for (k = 0, len1 = substream.length; k < len1; k++) {\n      ip = substream[k];\n      results.push(buffer.unshift(ip));\n    }\n    return results;\n  };\n\n  handleInputCollation = function(data, config, input, port, idx) {\n    var buf;\n    if (!config.group && !config.field) {\n      return;\n    }\n    if (config.group) {\n      buf = input.ports[port].getBuffer(input.scope, idx);\n      reorderBuffer(buf, function(ip, brackets) {\n        var grp, j, len, ref;\n        ref = input.collatedBy.brackets;\n        for (idx = j = 0, len = ref.length; j < len; idx = ++j) {\n          grp = ref[idx];\n          if (brackets[idx] !== grp) {\n            return false;\n          }\n        }\n        return true;\n      });\n    }\n    if (config.field) {\n      data[config.field] = input.collatedBy.field;\n      buf = input.ports[port].getBuffer(input.scope, idx);\n      return reorderBuffer(buf, function(ip) {\n        return ip.data[config.field] === data[config.field];\n      });\n    }\n  };\n\n  getInputData = function(config, input) {\n    var data, idx, j, k, len, len1, port, ref, ref1;\n    data = {};\n    ref = config.inPorts;\n    for (j = 0, len = ref.length; j < len; j++) {\n      port = ref[j];\n      if (input.ports[port].isAddressable()) {\n        data[port] = {};\n        ref1 = input.attached(port);\n        for (k = 0, len1 = ref1.length; k < len1; k++) {\n          idx = ref1[k];\n          if (!input.hasData([port, idx])) {\n            continue;\n          }\n          handleInputCollation(data, config, input, port, idx);\n          data[port][idx] = input.getData([port, idx]);\n        }\n        continue;\n      }\n      if (!input.hasData(port)) {\n        continue;\n      }\n      handleInputCollation(data, config, input, port);\n      data[port] = input.getData(port);\n    }\n    if (config.inPorts.length === 1) {\n      return data[config.inPorts[0]];\n    }\n    return data;\n  };\n\n  getGroupContext = function(component, port, input) {\n    var ref, ref1;\n    if (((ref = input.result.__bracketContext) != null ? ref[port] : void 0) == null) {\n      return [];\n    }\n    if ((ref1 = input.collatedBy) != null ? ref1.brackets : void 0) {\n      return input.collatedBy.brackets;\n    }\n    return input.result.__bracketContext[port].filter(function(c) {\n      return c.source === port;\n    }).map(function(c) {\n      return c.ip.data;\n    });\n  };\n\n  getOutputProxy = function(ports, output) {\n    var outProxy;\n    outProxy = {};\n    ports.forEach(function(port) {\n      return outProxy[port] = {\n        connect: function() {},\n        beginGroup: function(group, idx) {\n          var ip;\n          ip = new IP('openBracket', group);\n          ip.index = idx;\n          return output.sendIP(port, ip);\n        },\n        send: function(data, idx) {\n          var ip;\n          ip = new IP('data', data);\n          ip.index = idx;\n          return output.sendIP(port, ip);\n        },\n        endGroup: function(group, idx) {\n          var ip;\n          ip = new IP('closeBracket', group);\n          ip.index = idx;\n          return output.sendIP(port, ip);\n        },\n        disconnect: function() {}\n      };\n    });\n    if (ports.length === 1) {\n      return outProxy[ports[0]];\n    }\n    return outProxy;\n  };\n\n  checkWirePatternPreconditions = function(config, input, output) {\n    var attached, idx, inputsOk, j, k, len, len1, packetsDropped, paramsOk, port, ref;\n    paramsOk = checkWirePatternPreconditionsParams(config, input);\n    inputsOk = checkWirePatternPreconditionsInput(config, input);\n    if (config.dropInput && !paramsOk) {\n      packetsDropped = false;\n      ref = config.inPorts;\n      for (j = 0, len = ref.length; j < len; j++) {\n        port = ref[j];\n        if (input.ports[port].isAddressable()) {\n          attached = input.attached(port);\n          if (!attached.length) {\n            continue;\n          }\n          for (k = 0, len1 = attached.length; k < len1; k++) {\n            idx = attached[k];\n            while (input.has([port, idx])) {\n              packetsDropped = true;\n              input.get([port, idx]).drop();\n            }\n          }\n          continue;\n        }\n        while (input.has(port)) {\n          packetsDropped = true;\n          input.get(port).drop();\n        }\n      }\n      if (packetsDropped) {\n        output.done();\n      }\n    }\n    return inputsOk && paramsOk;\n  };\n\n  checkWirePatternPreconditionsParams = function(config, input) {\n    var attached, j, len, param, ref, withData;\n    ref = config.params;\n    for (j = 0, len = ref.length; j < len; j++) {\n      param = ref[j];\n      if (!input.ports[param].isRequired()) {\n        continue;\n      }\n      if (input.ports[param].isAddressable()) {\n        attached = input.attached(param);\n        if (!attached.length) {\n          return false;\n        }\n        withData = attached.filter(function(idx) {\n          return input.hasData([param, idx]);\n        });\n        if (config.arrayPolicy.params === 'all') {\n          if (withData.length !== attached.length) {\n            return false;\n          }\n          continue;\n        }\n        if (!withData.length) {\n          return false;\n        }\n        continue;\n      }\n      if (!input.hasData(param)) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  checkWirePatternPreconditionsInput = function(config, input) {\n    var attached, bracketsAtPorts, checkBrackets, checkPacket, checkPort, j, len, port, ref, withData;\n    if (config.group) {\n      bracketsAtPorts = {};\n      input.collatedBy = {\n        brackets: [],\n        ready: false\n      };\n      checkBrackets = function(left, right) {\n        var bracket, idx, j, len;\n        for (idx = j = 0, len = left.length; j < len; idx = ++j) {\n          bracket = left[idx];\n          if (right[idx] !== bracket) {\n            return false;\n          }\n        }\n        return true;\n      };\n      checkPacket = function(ip, brackets) {\n        var bracketId, bracketsToCheck;\n        bracketsToCheck = brackets.slice(0);\n        if (config.group instanceof RegExp) {\n          bracketsToCheck = bracketsToCheck.slice(0, 1);\n          if (!bracketsToCheck.length) {\n            return false;\n          }\n          if (!config.group.test(bracketsToCheck[0])) {\n            return false;\n          }\n        }\n        if (input.collatedBy.ready) {\n          return checkBrackets(input.collatedBy.brackets, bracketsToCheck);\n        }\n        bracketId = bracketsToCheck.join(':');\n        if (!bracketsAtPorts[bracketId]) {\n          bracketsAtPorts[bracketId] = [];\n        }\n        if (bracketsAtPorts[bracketId].indexOf(port) === -1) {\n          bracketsAtPorts[bracketId].push(port);\n        }\n        if (config.inPorts.indexOf(port) !== config.inPorts.length - 1) {\n          return true;\n        }\n        if (bracketsAtPorts[bracketId].length !== config.inPorts.length) {\n          return false;\n        }\n        if (input.collatedBy.ready) {\n          return false;\n        }\n        input.collatedBy.ready = true;\n        input.collatedBy.brackets = bracketsToCheck;\n        return true;\n      };\n    }\n    if (config.field) {\n      input.collatedBy = {\n        field: void 0,\n        ready: false\n      };\n    }\n    checkPort = function(port) {\n      var buf, dataBrackets, hasData, hasMatching, ip, j, len, portBrackets;\n      if (!config.group && !config.field) {\n        return input.hasData(port);\n      }\n      if (config.group) {\n        portBrackets = [];\n        dataBrackets = [];\n        hasMatching = false;\n        buf = input.ports[port].getBuffer(input.scope);\n        for (j = 0, len = buf.length; j < len; j++) {\n          ip = buf[j];\n          if (ip.type === 'openBracket') {\n            portBrackets.push(ip.data);\n            continue;\n          }\n          if (ip.type === 'closeBracket') {\n            portBrackets.pop();\n            if (portBrackets.length) {\n              continue;\n            }\n            if (!hasData) {\n              continue;\n            }\n            hasMatching = true;\n            continue;\n          }\n          hasData = checkPacket(ip, portBrackets);\n          continue;\n        }\n        return hasMatching;\n      }\n      if (config.field) {\n        return input.hasStream(port, function(ip) {\n          if (!input.collatedBy.ready) {\n            input.collatedBy.field = ip.data[config.field];\n            input.collatedBy.ready = true;\n            return true;\n          }\n          return ip.data[config.field] === input.collatedBy.field;\n        });\n      }\n    };\n    ref = config.inPorts;\n    for (j = 0, len = ref.length; j < len; j++) {\n      port = ref[j];\n      if (input.ports[port].isAddressable()) {\n        attached = input.attached(port);\n        if (!attached.length) {\n          return false;\n        }\n        withData = attached.filter(function(idx) {\n          return checkPort([port, idx]);\n        });\n        if (config.arrayPolicy['in'] === 'all') {\n          if (withData.length !== attached.length) {\n            return false;\n          }\n          continue;\n        }\n        if (!withData.length) {\n          return false;\n        }\n        continue;\n      }\n      if (!checkPort(port)) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  OutPortWrapper = (function() {\n    function OutPortWrapper(port1, scope1) {\n      this.port = port1;\n      this.scope = scope1;\n    }\n\n    OutPortWrapper.prototype.connect = function(socketId) {\n      if (socketId == null) {\n        socketId = null;\n      }\n      return this.port.openBracket(null, {\n        scope: this.scope\n      }, socketId);\n    };\n\n    OutPortWrapper.prototype.beginGroup = function(group, socketId) {\n      if (socketId == null) {\n        socketId = null;\n      }\n      return this.port.openBracket(group, {\n        scope: this.scope\n      }, socketId);\n    };\n\n    OutPortWrapper.prototype.send = function(data, socketId) {\n      if (socketId == null) {\n        socketId = null;\n      }\n      return this.port.sendIP('data', data, {\n        scope: this.scope\n      }, socketId, false);\n    };\n\n    OutPortWrapper.prototype.endGroup = function(group, socketId) {\n      if (socketId == null) {\n        socketId = null;\n      }\n      return this.port.closeBracket(group, {\n        scope: this.scope\n      }, socketId);\n    };\n\n    OutPortWrapper.prototype.disconnect = function(socketId) {\n      if (socketId == null) {\n        socketId = null;\n      }\n      return this.endGroup(socketId);\n    };\n\n    OutPortWrapper.prototype.isConnected = function() {\n      return this.port.isConnected();\n    };\n\n    OutPortWrapper.prototype.isAttached = function() {\n      return this.port.isAttached();\n    };\n\n    return OutPortWrapper;\n\n  })();\n\n  legacyWirePattern = function(component, config, proc) {\n    var _wp, baseTearDown, closeGroupOnOuts, collectGroups, disconnectOuts, fn, fn1, gc, j, k, l, len, len1, len2, len3, len4, m, n, name, port, processQueue, ref, ref1, ref2, ref3, ref4, resumeTaskQ, sendGroupToOuts, setParamsScope;\n    if (!('gcFrequency' in config)) {\n      config.gcFrequency = 100;\n    }\n    if (!('gcTimeout' in config)) {\n      config.gcTimeout = 300;\n    }\n    collectGroups = config.forwardGroups;\n    if (collectGroups !== false && config.group) {\n      collectGroups = true;\n    }\n    ref = config.inPorts;\n    for (j = 0, len = ref.length; j < len; j++) {\n      name = ref[j];\n      if (!component.inPorts[name]) {\n        throw new Error(\"no inPort named '\" + name + \"'\");\n      }\n    }\n    ref1 = config.outPorts;\n    for (k = 0, len1 = ref1.length; k < len1; k++) {\n      name = ref1[k];\n      if (!component.outPorts[name]) {\n        throw new Error(\"no outPort named '\" + name + \"'\");\n      }\n    }\n    disconnectOuts = function() {\n      var l, len2, p, ref2, results;\n      ref2 = config.outPorts;\n      results = [];\n      for (l = 0, len2 = ref2.length; l < len2; l++) {\n        p = ref2[l];\n        if (component.outPorts[p].isConnected()) {\n          results.push(component.outPorts[p].disconnect());\n        } else {\n          results.push(void 0);\n        }\n      }\n      return results;\n    };\n    sendGroupToOuts = function(grp) {\n      var l, len2, p, ref2, results;\n      ref2 = config.outPorts;\n      results = [];\n      for (l = 0, len2 = ref2.length; l < len2; l++) {\n        p = ref2[l];\n        results.push(component.outPorts[p].beginGroup(grp));\n      }\n      return results;\n    };\n    closeGroupOnOuts = function(grp) {\n      var l, len2, p, ref2, results;\n      ref2 = config.outPorts;\n      results = [];\n      for (l = 0, len2 = ref2.length; l < len2; l++) {\n        p = ref2[l];\n        results.push(component.outPorts[p].endGroup(grp));\n      }\n      return results;\n    };\n    component.requiredParams = [];\n    component.defaultedParams = [];\n    component.gcCounter = 0;\n    component._wpData = {};\n    _wp = function(scope) {\n      if (!(scope in component._wpData)) {\n        component._wpData[scope] = {};\n        component._wpData[scope].groupedData = {};\n        component._wpData[scope].groupedGroups = {};\n        component._wpData[scope].groupedDisconnects = {};\n        component._wpData[scope].outputQ = [];\n        component._wpData[scope].taskQ = [];\n        component._wpData[scope].params = {};\n        component._wpData[scope].completeParams = [];\n        component._wpData[scope].receivedParams = [];\n        component._wpData[scope].defaultsSent = false;\n        component._wpData[scope].disconnectData = {};\n        component._wpData[scope].disconnectQ = [];\n        component._wpData[scope].groupBuffers = {};\n        component._wpData[scope].keyBuffers = {};\n        component._wpData[scope].gcTimestamps = {};\n      }\n      return component._wpData[scope];\n    };\n    component.params = {};\n    setParamsScope = function(scope) {\n      return component.params = _wp(scope).params;\n    };\n    processQueue = function(scope) {\n      var flushed, key, stream, streams, tmp;\n      while (_wp(scope).outputQ.length > 0) {\n        streams = _wp(scope).outputQ[0];\n        flushed = false;\n        if (streams === null) {\n          disconnectOuts();\n          flushed = true;\n        } else {\n          if (config.outPorts.length === 1) {\n            tmp = {};\n            tmp[config.outPorts[0]] = streams;\n            streams = tmp;\n          }\n          for (key in streams) {\n            stream = streams[key];\n            if (stream.resolved) {\n              stream.flush();\n              flushed = true;\n            }\n          }\n        }\n        if (flushed) {\n          _wp(scope).outputQ.shift();\n        }\n        if (!flushed) {\n          return;\n        }\n      }\n    };\n    if (config.async) {\n      if ('load' in component.outPorts) {\n        component.load = 0;\n      }\n      component.beforeProcess = function(scope, outs) {\n        if (config.ordered) {\n          _wp(scope).outputQ.push(outs);\n        }\n        component.load++;\n        component.emit('activate', component.load);\n        if ('load' in component.outPorts && component.outPorts.load.isAttached()) {\n          component.outPorts.load.send(component.load);\n          return component.outPorts.load.disconnect();\n        }\n      };\n      component.afterProcess = function(scope, err, outs) {\n        processQueue(scope);\n        component.load--;\n        if ('load' in component.outPorts && component.outPorts.load.isAttached()) {\n          component.outPorts.load.send(component.load);\n          component.outPorts.load.disconnect();\n        }\n        return component.emit('deactivate', component.load);\n      };\n    }\n    component.sendDefaults = function(scope) {\n      var l, len2, param, ref2, tempSocket;\n      if (component.defaultedParams.length > 0) {\n        ref2 = component.defaultedParams;\n        for (l = 0, len2 = ref2.length; l < len2; l++) {\n          param = ref2[l];\n          if (_wp(scope).receivedParams.indexOf(param) === -1) {\n            tempSocket = InternalSocket.createSocket();\n            component.inPorts[param].attach(tempSocket);\n            tempSocket.send();\n            tempSocket.disconnect();\n            component.inPorts[param].detach(tempSocket);\n          }\n        }\n      }\n      return _wp(scope).defaultsSent = true;\n    };\n    resumeTaskQ = function(scope) {\n      var results, task, temp;\n      if (_wp(scope).completeParams.length === component.requiredParams.length && _wp(scope).taskQ.length > 0) {\n        temp = _wp(scope).taskQ.slice(0);\n        _wp(scope).taskQ = [];\n        results = [];\n        while (temp.length > 0) {\n          task = temp.shift();\n          results.push(task());\n        }\n        return results;\n      }\n    };\n    ref2 = config.params;\n    for (l = 0, len2 = ref2.length; l < len2; l++) {\n      port = ref2[l];\n      if (!component.inPorts[port]) {\n        throw new Error(\"no inPort named '\" + port + \"'\");\n      }\n      if (component.inPorts[port].isRequired()) {\n        component.requiredParams.push(port);\n      }\n      if (component.inPorts[port].hasDefault()) {\n        component.defaultedParams.push(port);\n      }\n    }\n    ref3 = config.params;\n    fn = function(port) {\n      var inPort;\n      inPort = component.inPorts[port];\n      return inPort.handle = function(ip) {\n        var event, index, payload, scope;\n        event = ip.type;\n        payload = ip.data;\n        scope = ip.scope;\n        index = ip.index;\n        if (event !== 'data') {\n          return;\n        }\n        if (inPort.isAddressable()) {\n          if (!(port in _wp(scope).params)) {\n            _wp(scope).params[port] = {};\n          }\n          _wp(scope).params[port][index] = payload;\n          if (config.arrayPolicy.params === 'all' && Object.keys(_wp(scope).params[port]).length < inPort.listAttached().length) {\n            return;\n          }\n        } else {\n          _wp(scope).params[port] = payload;\n        }\n        if (_wp(scope).completeParams.indexOf(port) === -1 && component.requiredParams.indexOf(port) > -1) {\n          _wp(scope).completeParams.push(port);\n        }\n        _wp(scope).receivedParams.push(port);\n        return resumeTaskQ(scope);\n      };\n    };\n    for (m = 0, len3 = ref3.length; m < len3; m++) {\n      port = ref3[m];\n      fn(port);\n    }\n    component.dropRequest = function(scope, key) {\n      if (key in _wp(scope).disconnectData) {\n        delete _wp(scope).disconnectData[key];\n      }\n      if (key in _wp(scope).groupedData) {\n        delete _wp(scope).groupedData[key];\n      }\n      if (key in _wp(scope).groupedGroups) {\n        return delete _wp(scope).groupedGroups[key];\n      }\n    };\n    gc = function() {\n      var current, key, len4, n, ref4, results, scope, val;\n      component.gcCounter++;\n      if (component.gcCounter % config.gcFrequency === 0) {\n        ref4 = Object.keys(component._wpData);\n        results = [];\n        for (n = 0, len4 = ref4.length; n < len4; n++) {\n          scope = ref4[n];\n          current = new Date().getTime();\n          results.push((function() {\n            var ref5, results1;\n            ref5 = _wp(scope).gcTimestamps;\n            results1 = [];\n            for (key in ref5) {\n              val = ref5[key];\n              if ((current - val) > (config.gcTimeout * 1000)) {\n                component.dropRequest(scope, key);\n                results1.push(delete _wp(scope).gcTimestamps[key]);\n              } else {\n                results1.push(void 0);\n              }\n            }\n            return results1;\n          })());\n        }\n        return results;\n      }\n    };\n    ref4 = config.inPorts;\n    fn1 = function(port) {\n      var inPort, needPortGroups;\n      inPort = component.inPorts[port];\n      needPortGroups = collectGroups instanceof Array && collectGroups.indexOf(port) !== -1;\n      return inPort.handle = function(ip) {\n        var data, foundGroup, g, groupLength, groups, grp, i, index, key, len5, len6, len7, len8, o, obj, out, outs, payload, postpone, postponedToQ, q, r, ref5, ref6, ref7, ref8, reqId, requiredLength, resume, s, scope, t, task, tmp, u, whenDone, whenDoneGroups, wrp;\n        index = ip.index;\n        payload = ip.data;\n        scope = ip.scope;\n        if (!(port in _wp(scope).groupBuffers)) {\n          _wp(scope).groupBuffers[port] = [];\n        }\n        if (!(port in _wp(scope).keyBuffers)) {\n          _wp(scope).keyBuffers[port] = null;\n        }\n        switch (ip.type) {\n          case 'openBracket':\n            if (payload === null) {\n              return;\n            }\n            _wp(scope).groupBuffers[port].push(payload);\n            if (config.forwardGroups && (collectGroups === true || needPortGroups) && !config.async) {\n              return sendGroupToOuts(payload);\n            }\n            break;\n          case 'closeBracket':\n            _wp(scope).groupBuffers[port] = _wp(scope).groupBuffers[port].slice(0, _wp(scope).groupBuffers[port].length - 1);\n            if (config.forwardGroups && (collectGroups === true || needPortGroups) && !config.async) {\n              closeGroupOnOuts(payload);\n            }\n            if (_wp(scope).groupBuffers[port].length === 0) {\n              if (config.inPorts.length === 1) {\n                if (config.async || config.StreamSender) {\n                  if (config.ordered) {\n                    _wp(scope).outputQ.push(null);\n                    return processQueue(scope);\n                  } else {\n                    return _wp(scope).disconnectQ.push(true);\n                  }\n                } else {\n                  return disconnectOuts();\n                }\n              } else {\n                foundGroup = false;\n                key = _wp(scope).keyBuffers[port];\n                if (!(key in _wp(scope).disconnectData)) {\n                  _wp(scope).disconnectData[key] = [];\n                }\n                for (i = o = 0, ref5 = _wp(scope).disconnectData[key].length; 0 <= ref5 ? o < ref5 : o > ref5; i = 0 <= ref5 ? ++o : --o) {\n                  if (!(port in _wp(scope).disconnectData[key][i])) {\n                    foundGroup = true;\n                    _wp(scope).disconnectData[key][i][port] = true;\n                    if (Object.keys(_wp(scope).disconnectData[key][i]).length === config.inPorts.length) {\n                      _wp(scope).disconnectData[key].shift();\n                      if (config.async || config.StreamSender) {\n                        if (config.ordered) {\n                          _wp(scope).outputQ.push(null);\n                          processQueue(scope);\n                        } else {\n                          _wp(scope).disconnectQ.push(true);\n                        }\n                      } else {\n                        disconnectOuts();\n                      }\n                      if (_wp(scope).disconnectData[key].length === 0) {\n                        delete _wp(scope).disconnectData[key];\n                      }\n                    }\n                    break;\n                  }\n                }\n                if (!foundGroup) {\n                  obj = {};\n                  obj[port] = true;\n                  return _wp(scope).disconnectData[key].push(obj);\n                }\n              }\n            }\n            break;\n          case 'data':\n            if (config.inPorts.length === 1 && !inPort.isAddressable()) {\n              data = payload;\n              groups = _wp(scope).groupBuffers[port];\n            } else {\n              key = '';\n              if (config.group && _wp(scope).groupBuffers[port].length > 0) {\n                key = _wp(scope).groupBuffers[port].toString();\n                if (config.group instanceof RegExp) {\n                  reqId = null;\n                  ref6 = _wp(scope).groupBuffers[port];\n                  for (q = 0, len5 = ref6.length; q < len5; q++) {\n                    grp = ref6[q];\n                    if (config.group.test(grp)) {\n                      reqId = grp;\n                      break;\n                    }\n                  }\n                  key = reqId ? reqId : '';\n                }\n              } else if (config.field && typeof payload === 'object' && config.field in payload) {\n                key = payload[config.field];\n              }\n              _wp(scope).keyBuffers[port] = key;\n              if (!(key in _wp(scope).groupedData)) {\n                _wp(scope).groupedData[key] = [];\n              }\n              if (!(key in _wp(scope).groupedGroups)) {\n                _wp(scope).groupedGroups[key] = [];\n              }\n              foundGroup = false;\n              requiredLength = config.inPorts.length;\n              if (config.field) {\n                ++requiredLength;\n              }\n              for (i = r = 0, ref7 = _wp(scope).groupedData[key].length; 0 <= ref7 ? r < ref7 : r > ref7; i = 0 <= ref7 ? ++r : --r) {\n                if (!(port in _wp(scope).groupedData[key][i]) || (component.inPorts[port].isAddressable() && config.arrayPolicy[\"in\"] === 'all' && !(index in _wp(scope).groupedData[key][i][port]))) {\n                  foundGroup = true;\n                  if (component.inPorts[port].isAddressable()) {\n                    if (!(port in _wp(scope).groupedData[key][i])) {\n                      _wp(scope).groupedData[key][i][port] = {};\n                    }\n                    _wp(scope).groupedData[key][i][port][index] = payload;\n                  } else {\n                    _wp(scope).groupedData[key][i][port] = payload;\n                  }\n                  if (needPortGroups) {\n                    _wp(scope).groupedGroups[key][i] = utils.unique(slice.call(_wp(scope).groupedGroups[key][i]).concat(slice.call(_wp(scope).groupBuffers[port])));\n                  } else if (collectGroups === true) {\n                    _wp(scope).groupedGroups[key][i][port] = _wp(scope).groupBuffers[port];\n                  }\n                  if (component.inPorts[port].isAddressable() && config.arrayPolicy[\"in\"] === 'all' && Object.keys(_wp(scope).groupedData[key][i][port]).length < component.inPorts[port].listAttached().length) {\n                    return;\n                  }\n                  groupLength = Object.keys(_wp(scope).groupedData[key][i]).length;\n                  if (groupLength === requiredLength) {\n                    data = (_wp(scope).groupedData[key].splice(i, 1))[0];\n                    if (config.inPorts.length === 1 && inPort.isAddressable()) {\n                      data = data[port];\n                    }\n                    groups = (_wp(scope).groupedGroups[key].splice(i, 1))[0];\n                    if (collectGroups === true) {\n                      groups = utils.intersection.apply(null, utils.getValues(groups));\n                    }\n                    if (_wp(scope).groupedData[key].length === 0) {\n                      delete _wp(scope).groupedData[key];\n                    }\n                    if (_wp(scope).groupedGroups[key].length === 0) {\n                      delete _wp(scope).groupedGroups[key];\n                    }\n                    if (config.group && key) {\n                      delete _wp(scope).gcTimestamps[key];\n                    }\n                    break;\n                  } else {\n                    return;\n                  }\n                }\n              }\n              if (!foundGroup) {\n                obj = {};\n                if (config.field) {\n                  obj[config.field] = key;\n                }\n                if (component.inPorts[port].isAddressable()) {\n                  obj[port] = {};\n                  obj[port][index] = payload;\n                } else {\n                  obj[port] = payload;\n                }\n                if (config.inPorts.length === 1 && component.inPorts[port].isAddressable() && (config.arrayPolicy[\"in\"] === 'any' || component.inPorts[port].listAttached().length === 1)) {\n                  data = obj[port];\n                  groups = _wp(scope).groupBuffers[port];\n                } else {\n                  _wp(scope).groupedData[key].push(obj);\n                  if (needPortGroups) {\n                    _wp(scope).groupedGroups[key].push(_wp(scope).groupBuffers[port]);\n                  } else if (collectGroups === true) {\n                    tmp = {};\n                    tmp[port] = _wp(scope).groupBuffers[port];\n                    _wp(scope).groupedGroups[key].push(tmp);\n                  } else {\n                    _wp(scope).groupedGroups[key].push([]);\n                  }\n                  if (config.group && key) {\n                    _wp(scope).gcTimestamps[key] = new Date().getTime();\n                  }\n                  return;\n                }\n              }\n            }\n            if (config.dropInput && _wp(scope).completeParams.length !== component.requiredParams.length) {\n              return;\n            }\n            outs = {};\n            ref8 = config.outPorts;\n            for (s = 0, len6 = ref8.length; s < len6; s++) {\n              name = ref8[s];\n              wrp = new OutPortWrapper(component.outPorts[name], scope);\n              if (config.async || config.sendStreams && config.sendStreams.indexOf(name) !== -1) {\n                wrp;\n                outs[name] = new StreamSender(wrp, config.ordered);\n              } else {\n                outs[name] = wrp;\n              }\n            }\n            if (config.outPorts.length === 1) {\n              outs = outs[config.outPorts[0]];\n            }\n            if (!groups) {\n              groups = [];\n            }\n            groups = (function() {\n              var len7, results, t;\n              results = [];\n              for (t = 0, len7 = groups.length; t < len7; t++) {\n                g = groups[t];\n                if (g !== null) {\n                  results.push(g);\n                }\n              }\n              return results;\n            })();\n            whenDoneGroups = groups.slice(0);\n            whenDone = function(err) {\n              var disconnect, len7, out, outputs, t;\n              if (err) {\n                component.error(err, whenDoneGroups, 'error', scope);\n              }\n              if (typeof component.fail === 'function' && component.hasErrors) {\n                component.fail(null, [], scope);\n              }\n              outputs = outs;\n              if (config.outPorts.length === 1) {\n                outputs = {};\n                outputs[port] = outs;\n              }\n              disconnect = false;\n              if (_wp(scope).disconnectQ.length > 0) {\n                _wp(scope).disconnectQ.shift();\n                disconnect = true;\n              }\n              for (name in outputs) {\n                out = outputs[name];\n                if (config.forwardGroups && config.async) {\n                  for (t = 0, len7 = whenDoneGroups.length; t < len7; t++) {\n                    i = whenDoneGroups[t];\n                    out.endGroup();\n                  }\n                }\n                if (disconnect) {\n                  out.disconnect();\n                }\n                if (config.async || config.StreamSender) {\n                  out.done();\n                }\n              }\n              if (typeof component.afterProcess === 'function') {\n                return component.afterProcess(scope, err || component.hasErrors, outs);\n              }\n            };\n            if (typeof component.beforeProcess === 'function') {\n              component.beforeProcess(scope, outs);\n            }\n            if (config.forwardGroups && config.async) {\n              if (config.outPorts.length === 1) {\n                for (t = 0, len7 = groups.length; t < len7; t++) {\n                  g = groups[t];\n                  outs.beginGroup(g);\n                }\n              } else {\n                for (name in outs) {\n                  out = outs[name];\n                  for (u = 0, len8 = groups.length; u < len8; u++) {\n                    g = groups[u];\n                    out.beginGroup(g);\n                  }\n                }\n              }\n            }\n            exports.MultiError(component, config.name, config.error, groups, scope);\n            debug(\"WirePattern Legacy API call with\", data, groups, component.params, scope);\n            if (config.async) {\n              postpone = function() {};\n              resume = function() {};\n              postponedToQ = false;\n              task = function() {\n                setParamsScope(scope);\n                return proc.call(component, data, groups, outs, whenDone, postpone, resume, scope);\n              };\n              postpone = function(backToQueue) {\n                if (backToQueue == null) {\n                  backToQueue = true;\n                }\n                postponedToQ = backToQueue;\n                if (backToQueue) {\n                  return _wp(scope).taskQ.push(task);\n                }\n              };\n              resume = function() {\n                if (postponedToQ) {\n                  return resumeTaskQ();\n                } else {\n                  return task();\n                }\n              };\n            } else {\n              task = function() {\n                setParamsScope(scope);\n                proc.call(component, data, groups, outs, null, null, null, scope);\n                return whenDone();\n              };\n            }\n            _wp(scope).taskQ.push(task);\n            resumeTaskQ(scope);\n            return gc();\n        }\n      };\n    };\n    for (n = 0, len4 = ref4.length; n < len4; n++) {\n      port = ref4[n];\n      fn1(port);\n    }\n    baseTearDown = component.tearDown;\n    component.tearDown = function(callback) {\n      component.requiredParams = [];\n      component.defaultedParams = [];\n      component.gcCounter = 0;\n      component._wpData = {};\n      component.params = {};\n      return baseTearDown.call(component, callback);\n    };\n    return component;\n  };\n\n  exports.GroupedInput = exports.WirePattern;\n\n  exports.CustomError = function(message, options) {\n    var err;\n    err = new Error(message);\n    return exports.CustomizeError(err, options);\n  };\n\n  exports.CustomizeError = function(err, options) {\n    var key, val;\n    for (key in options) {\n      if (!hasProp.call(options, key)) continue;\n      val = options[key];\n      err[key] = val;\n    }\n    return err;\n  };\n\n  exports.MultiError = function(component, group, errorPort, forwardedGroups, scope) {\n    var baseTearDown;\n    if (group == null) {\n      group = '';\n    }\n    if (errorPort == null) {\n      errorPort = 'error';\n    }\n    if (forwardedGroups == null) {\n      forwardedGroups = [];\n    }\n    if (scope == null) {\n      scope = null;\n    }\n    platform.deprecated('noflo.helpers.MultiError is deprecated. Send errors to error port instead');\n    component.hasErrors = false;\n    component.errors = [];\n    if (component.name && !group) {\n      group = component.name;\n    }\n    if (!group) {\n      group = 'Component';\n    }\n    component.error = function(e, groups) {\n      if (groups == null) {\n        groups = [];\n      }\n      component.errors.push({\n        err: e,\n        groups: forwardedGroups.concat(groups)\n      });\n      return component.hasErrors = true;\n    };\n    component.fail = function(e, groups) {\n      var error, grp, j, k, l, len, len1, len2, ref, ref1, ref2;\n      if (e == null) {\n        e = null;\n      }\n      if (groups == null) {\n        groups = [];\n      }\n      if (e) {\n        component.error(e, groups);\n      }\n      if (!component.hasErrors) {\n        return;\n      }\n      if (!(errorPort in component.outPorts)) {\n        return;\n      }\n      if (!component.outPorts[errorPort].isAttached()) {\n        return;\n      }\n      if (group) {\n        component.outPorts[errorPort].openBracket(group, {\n          scope: scope\n        });\n      }\n      ref = component.errors;\n      for (j = 0, len = ref.length; j < len; j++) {\n        error = ref[j];\n        ref1 = error.groups;\n        for (k = 0, len1 = ref1.length; k < len1; k++) {\n          grp = ref1[k];\n          component.outPorts[errorPort].openBracket(grp, {\n            scope: scope\n          });\n        }\n        component.outPorts[errorPort].data(error.err, {\n          scope: scope\n        });\n        ref2 = error.groups;\n        for (l = 0, len2 = ref2.length; l < len2; l++) {\n          grp = ref2[l];\n          component.outPorts[errorPort].closeBracket(grp, {\n            scope: scope\n          });\n        }\n      }\n      if (group) {\n        component.outPorts[errorPort].closeBracket(group, {\n          scope: scope\n        });\n      }\n      component.hasErrors = false;\n      return component.errors = [];\n    };\n    baseTearDown = component.tearDown;\n    component.tearDown = function(callback) {\n      component.hasErrors = false;\n      component.errors = [];\n      return baseTearDown.call(component, callback);\n    };\n    return component;\n  };\n\n}).call(this);\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n/* 39 */\n/***/ (function(module, exports, __webpack_require__) {\n\n(function() {\n  var fbpGraph, ports;\n\n  fbpGraph = __webpack_require__(5);\n\n  exports.graph = fbpGraph.graph;\n\n  exports.Graph = fbpGraph.Graph;\n\n  exports.journal = fbpGraph.journal;\n\n  exports.Journal = fbpGraph.Journal;\n\n  exports.Network = __webpack_require__(20).Network;\n\n  exports.isBrowser = __webpack_require__(6).isBrowser;\n\n  exports.ComponentLoader = __webpack_require__(10).ComponentLoader;\n\n  exports.Component = __webpack_require__(18).Component;\n\n  exports.AsyncComponent = __webpack_require__(37).AsyncComponent;\n\n  exports.helpers = __webpack_require__(38);\n\n  exports.streams = __webpack_require__(12);\n\n  ports = __webpack_require__(22);\n\n  exports.InPorts = ports.InPorts;\n\n  exports.OutPorts = ports.OutPorts;\n\n  exports.InPort = __webpack_require__(19);\n\n  exports.OutPort = __webpack_require__(21);\n\n  exports.Port = __webpack_require__(11).Port;\n\n  exports.ArrayPort = __webpack_require__(35).ArrayPort;\n\n  exports.internalSocket = __webpack_require__(8);\n\n  exports.IP = __webpack_require__(2);\n\n  exports.createNetwork = function(graph, callback, options) {\n    var network, networkReady;\n    if (typeof options !== 'object') {\n      options = {\n        delay: options\n      };\n    }\n    if (typeof callback !== 'function') {\n      callback = function(err) {\n        if (err) {\n          throw err;\n        }\n      };\n    }\n    network = new exports.Network(graph, options);\n    networkReady = function(network) {\n      return network.start(function(err) {\n        if (err) {\n          return callback(err);\n        }\n        return callback(null, network);\n      });\n    };\n    network.loader.listComponents(function(err) {\n      if (err) {\n        return callback(err);\n      }\n      if (graph.nodes.length === 0) {\n        return networkReady(network);\n      }\n      if (options.delay) {\n        callback(null, network);\n        return;\n      }\n      return network.connect(function(err) {\n        if (err) {\n          return callback(err);\n        }\n        return networkReady(network);\n      });\n    });\n    return network;\n  };\n\n  exports.loadFile = function(file, options, callback) {\n    var baseDir;\n    if (!callback) {\n      callback = options;\n      baseDir = null;\n    }\n    if (callback && typeof options !== 'object') {\n      options = {\n        baseDir: options\n      };\n    }\n    return exports.graph.loadFile(file, function(err, net) {\n      if (err) {\n        return callback(err);\n      }\n      if (options.baseDir) {\n        net.baseDir = options.baseDir;\n      }\n      return exports.createNetwork(net, callback, options);\n    });\n  };\n\n  exports.saveFile = function(graph, file, callback) {\n    return exports.graph.save(file, callback);\n  };\n\n  exports.asCallback = __webpack_require__(36).asCallback;\n\n}).call(this);\n\n\n/***/ }),\n/* 40 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar ArrayPort, platform, port,\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nport = __webpack_require__(14);\n\nplatform = __webpack_require__(7);\n\nArrayPort = (function(superClass) {\n  extend(ArrayPort, superClass);\n\n  function ArrayPort(type) {\n    this.type = type;\n    platform.deprecated('noflo.ArrayPort is deprecated. Please port to noflo.InPort/noflo.OutPort and use addressable: true');\n    ArrayPort.__super__.constructor.call(this, this.type);\n  }\n\n  ArrayPort.prototype.attach = function(socket, socketId) {\n    if (socketId == null) {\n      socketId = null;\n    }\n    if (socketId === null) {\n      socketId = this.sockets.length;\n    }\n    this.sockets[socketId] = socket;\n    return this.attachSocket(socket, socketId);\n  };\n\n  ArrayPort.prototype.connect = function(socketId) {\n    if (socketId == null) {\n      socketId = null;\n    }\n    if (socketId === null) {\n      if (!this.sockets.length) {\n        throw new Error((this.getId()) + \": No connections available\");\n      }\n      this.sockets.forEach(function(socket) {\n        if (!socket) {\n          return;\n        }\n        return socket.connect();\n      });\n      return;\n    }\n    if (!this.sockets[socketId]) {\n      throw new Error((this.getId()) + \": No connection '\" + socketId + \"' available\");\n    }\n    return this.sockets[socketId].connect();\n  };\n\n  ArrayPort.prototype.beginGroup = function(group, socketId) {\n    if (socketId == null) {\n      socketId = null;\n    }\n    if (socketId === null) {\n      if (!this.sockets.length) {\n        throw new Error((this.getId()) + \": No connections available\");\n      }\n      this.sockets.forEach((function(_this) {\n        return function(socket, index) {\n          if (!socket) {\n            return;\n          }\n          return _this.beginGroup(group, index);\n        };\n      })(this));\n      return;\n    }\n    if (!this.sockets[socketId]) {\n      throw new Error((this.getId()) + \": No connection '\" + socketId + \"' available\");\n    }\n    if (this.isConnected(socketId)) {\n      return this.sockets[socketId].beginGroup(group);\n    }\n    this.sockets[socketId].once(\"connect\", (function(_this) {\n      return function() {\n        return _this.sockets[socketId].beginGroup(group);\n      };\n    })(this));\n    return this.sockets[socketId].connect();\n  };\n\n  ArrayPort.prototype.send = function(data, socketId) {\n    if (socketId == null) {\n      socketId = null;\n    }\n    if (socketId === null) {\n      if (!this.sockets.length) {\n        throw new Error((this.getId()) + \": No connections available\");\n      }\n      this.sockets.forEach((function(_this) {\n        return function(socket, index) {\n          if (!socket) {\n            return;\n          }\n          return _this.send(data, index);\n        };\n      })(this));\n      return;\n    }\n    if (!this.sockets[socketId]) {\n      throw new Error((this.getId()) + \": No connection '\" + socketId + \"' available\");\n    }\n    if (this.isConnected(socketId)) {\n      return this.sockets[socketId].send(data);\n    }\n    this.sockets[socketId].once(\"connect\", (function(_this) {\n      return function() {\n        return _this.sockets[socketId].send(data);\n      };\n    })(this));\n    return this.sockets[socketId].connect();\n  };\n\n  ArrayPort.prototype.endGroup = function(socketId) {\n    if (socketId == null) {\n      socketId = null;\n    }\n    if (socketId === null) {\n      if (!this.sockets.length) {\n        throw new Error((this.getId()) + \": No connections available\");\n      }\n      this.sockets.forEach((function(_this) {\n        return function(socket, index) {\n          if (!socket) {\n            return;\n          }\n          return _this.endGroup(index);\n        };\n      })(this));\n      return;\n    }\n    if (!this.sockets[socketId]) {\n      throw new Error((this.getId()) + \": No connection '\" + socketId + \"' available\");\n    }\n    return this.sockets[socketId].endGroup();\n  };\n\n  ArrayPort.prototype.disconnect = function(socketId) {\n    var i, len, ref, socket;\n    if (socketId == null) {\n      socketId = null;\n    }\n    if (socketId === null) {\n      if (!this.sockets.length) {\n        throw new Error((this.getId()) + \": No connections available\");\n      }\n      ref = this.sockets;\n      for (i = 0, len = ref.length; i < len; i++) {\n        socket = ref[i];\n        if (!socket) {\n          return;\n        }\n        socket.disconnect();\n      }\n      return;\n    }\n    if (!this.sockets[socketId]) {\n      return;\n    }\n    return this.sockets[socketId].disconnect();\n  };\n\n  ArrayPort.prototype.isConnected = function(socketId) {\n    var connected;\n    if (socketId == null) {\n      socketId = null;\n    }\n    if (socketId === null) {\n      connected = false;\n      this.sockets.forEach(function(socket) {\n        if (!socket) {\n          return;\n        }\n        if (socket.isConnected()) {\n          return connected = true;\n        }\n      });\n      return connected;\n    }\n    if (!this.sockets[socketId]) {\n      return false;\n    }\n    return this.sockets[socketId].isConnected();\n  };\n\n  ArrayPort.prototype.isAddressable = function() {\n    return true;\n  };\n\n  ArrayPort.prototype.isAttached = function(socketId) {\n    var i, len, ref, socket;\n    if (socketId === void 0) {\n      ref = this.sockets;\n      for (i = 0, len = ref.length; i < len; i++) {\n        socket = ref[i];\n        if (socket) {\n          return true;\n        }\n      }\n      return false;\n    }\n    if (this.sockets[socketId]) {\n      return true;\n    }\n    return false;\n  };\n\n  return ArrayPort;\n\n})(port.Port);\n\nexports.ArrayPort = ArrayPort;\n\n\n/***/ }),\n/* 41 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(process) {var ComponentLoader, Graph, IP, Network, getType, internalSocket, normalizeOptions, normalizeOutput, prepareInputMap, prepareNetwork, runNetwork, sendOutputMap;\n\nComponentLoader = __webpack_require__(13).ComponentLoader;\n\nNetwork = __webpack_require__(27).Network;\n\nIP = __webpack_require__(3);\n\ninternalSocket = __webpack_require__(9);\n\nGraph = __webpack_require__(5).Graph;\n\nnormalizeOptions = function(options, component) {\n  if (!options) {\n    options = {};\n  }\n  if (!options.name) {\n    options.name = component;\n  }\n  if (options.loader) {\n    options.baseDir = options.loader.baseDir;\n  }\n  if (!options.baseDir && process && process.cwd) {\n    options.baseDir = process.cwd();\n  }\n  if (!options.loader) {\n    options.loader = new ComponentLoader(options.baseDir);\n  }\n  if (!options.raw) {\n    options.raw = false;\n  }\n  return options;\n};\n\nprepareNetwork = function(component, options, callback) {\n  return options.loader.load(component, function(err, instance) {\n    var def, graph, inPorts, network, nodeName, outPorts, port;\n    if (err) {\n      return callback(err);\n    }\n    graph = new Graph(options.name);\n    nodeName = options.name;\n    graph.addNode(nodeName, component);\n    inPorts = instance.inPorts.ports || instance.inPorts;\n    outPorts = instance.outPorts.ports || instance.outPorts;\n    for (port in inPorts) {\n      def = inPorts[port];\n      graph.addInport(port, nodeName, port);\n    }\n    for (port in outPorts) {\n      def = outPorts[port];\n      graph.addOutport(port, nodeName, port);\n    }\n    graph.componentLoader = options.loader;\n    network = new Network(graph, options);\n    return network.connect(function(err) {\n      if (err) {\n        return callback(err);\n      }\n      return callback(null, network);\n    });\n  });\n};\n\nrunNetwork = function(network, inputs, options, callback) {\n  var inPorts, inSockets, outPorts, outSockets, process, received;\n  process = network.getNode(options.name);\n  inPorts = Object.keys(network.graph.inports);\n  inSockets = {};\n  inPorts.forEach(function(inport) {\n    inSockets[inport] = internalSocket.createSocket();\n    return process.component.inPorts[inport].attach(inSockets[inport]);\n  });\n  received = [];\n  outPorts = Object.keys(network.graph.outports);\n  outSockets = {};\n  outPorts.forEach(function(outport) {\n    outSockets[outport] = internalSocket.createSocket();\n    process.component.outPorts[outport].attach(outSockets[outport]);\n    return outSockets[outport].on('ip', function(ip) {\n      var res;\n      res = {};\n      res[outport] = ip;\n      return received.push(res);\n    });\n  });\n  network.once('end', function() {\n    var port, socket;\n    for (port in outSockets) {\n      socket = outSockets[port];\n      process.component.outPorts[port].detach(socket);\n    }\n    outSockets = {};\n    inSockets = {};\n    return callback(null, received);\n  });\n  return network.start(function(err) {\n    var i, inputMap, len, port, results, value;\n    if (err) {\n      return callback(err);\n    }\n    results = [];\n    for (i = 0, len = inputs.length; i < len; i++) {\n      inputMap = inputs[i];\n      results.push((function() {\n        var results1;\n        results1 = [];\n        for (port in inputMap) {\n          value = inputMap[port];\n          if (IP.isIP(value)) {\n            inSockets[port].post(value);\n            continue;\n          }\n          results1.push(inSockets[port].post(new IP('data', value)));\n        }\n        return results1;\n      })());\n    }\n    return results;\n  });\n};\n\ngetType = function(inputs, network) {\n  var key, maps, value;\n  if (typeof inputs !== 'object') {\n    return 'simple';\n  }\n  if (Array.isArray(inputs)) {\n    maps = inputs.filter(function(entry) {\n      return getType(entry, network) === 'map';\n    });\n    if (maps.length === inputs.length) {\n      return 'sequence';\n    }\n    return 'simple';\n  }\n  if (!Object.keys(inputs).length) {\n    return 'simple';\n  }\n  for (key in inputs) {\n    value = inputs[key];\n    if (!network.graph.inports[key]) {\n      return 'simple';\n    }\n  }\n  return 'map';\n};\n\nprepareInputMap = function(inputs, inputType, network) {\n  var inPort, map;\n  if (inputType === 'sequence') {\n    return inputs;\n  }\n  if (inputType === 'map') {\n    return [inputs];\n  }\n  inPort = Object.keys(network.graph.inports)[0];\n  if (network.graph.inports[\"in\"]) {\n    inPort = 'in';\n  }\n  map = {};\n  map[inPort] = inputs;\n  return [map];\n};\n\nnormalizeOutput = function(values, options) {\n  var current, i, len, packet, previous, result;\n  if (options.raw) {\n    return values;\n  }\n  result = [];\n  previous = null;\n  current = result;\n  for (i = 0, len = values.length; i < len; i++) {\n    packet = values[i];\n    if (packet.type === 'openBracket') {\n      previous = current;\n      current = [];\n      previous.push(current);\n    }\n    if (packet.type === 'data') {\n      current.push(packet.data);\n    }\n    if (packet.type === 'closeBracket') {\n      current = previous;\n    }\n  }\n  if (result.length === 1) {\n    return result[0];\n  }\n  return result;\n};\n\nsendOutputMap = function(outputs, resultType, options, callback) {\n  var errors, i, key, len, map, mappedOutputs, outputKeys, packets, port, result, val, withValue;\n  errors = outputs.filter(function(map) {\n    return map.error != null;\n  }).map(function(map) {\n    return map.error;\n  });\n  if (errors.length) {\n    return callback(normalizeOutput(errors, options));\n  }\n  if (resultType === 'sequence') {\n    return callback(null, outputs.map(function(map) {\n      var key, res, val;\n      res = {};\n      for (key in map) {\n        val = map[key];\n        if (options.raw) {\n          res[key] = val;\n          continue;\n        }\n        res[key] = normalizeOutput([val], options);\n      }\n      return res;\n    }));\n  }\n  mappedOutputs = {};\n  for (i = 0, len = outputs.length; i < len; i++) {\n    map = outputs[i];\n    for (key in map) {\n      val = map[key];\n      if (!mappedOutputs[key]) {\n        mappedOutputs[key] = [];\n      }\n      mappedOutputs[key].push(val);\n    }\n  }\n  outputKeys = Object.keys(mappedOutputs);\n  withValue = outputKeys.filter(function(outport) {\n    return mappedOutputs[outport].length > 0;\n  });\n  if (withValue.length === 0) {\n    return callback(null);\n  }\n  if (withValue.length === 1 && resultType === 'simple') {\n    return callback(null, normalizeOutput(mappedOutputs[withValue[0]], options));\n  }\n  result = {};\n  for (port in mappedOutputs) {\n    packets = mappedOutputs[port];\n    result[port] = normalizeOutput(packets, options);\n  }\n  return callback(null, result);\n};\n\nexports.asCallback = function(component, options) {\n  options = normalizeOptions(options, component);\n  return function(inputs, callback) {\n    return prepareNetwork(component, options, function(err, network) {\n      var inputMap, resultType;\n      if (err) {\n        return callback(err);\n      }\n      resultType = getType(inputs, network);\n      inputMap = prepareInputMap(inputs, resultType, network);\n      return runNetwork(network, inputMap, options, function(err, outputMap) {\n        if (err) {\n          return callback(err);\n        }\n        return sendOutputMap(outputMap, resultType, options, callback);\n      });\n    });\n  };\n};\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n/* 42 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(process) {var AsyncComponent, component, platform, port,\n  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nport = __webpack_require__(14);\n\ncomponent = __webpack_require__(25);\n\nplatform = __webpack_require__(7);\n\nAsyncComponent = (function(superClass) {\n  extend(AsyncComponent, superClass);\n\n  function AsyncComponent(inPortName, outPortName, errPortName) {\n    this.inPortName = inPortName != null ? inPortName : \"in\";\n    this.outPortName = outPortName != null ? outPortName : \"out\";\n    this.errPortName = errPortName != null ? errPortName : \"error\";\n    this.error = bind(this.error, this);\n    platform.deprecated('noflo.AsyncComponent is deprecated. Please port to Process API');\n    if (!this.inPorts[this.inPortName]) {\n      throw new Error(\"no inPort named '\" + this.inPortName + \"'\");\n    }\n    if (!this.outPorts[this.outPortName]) {\n      throw new Error(\"no outPort named '\" + this.outPortName + \"'\");\n    }\n    this.load = 0;\n    this.q = [];\n    this.errorGroups = [];\n    this.outPorts.load = new port.Port();\n    this.inPorts[this.inPortName].on(\"begingroup\", (function(_this) {\n      return function(group) {\n        if (_this.load > 0) {\n          return _this.q.push({\n            name: \"begingroup\",\n            data: group\n          });\n        }\n        _this.errorGroups.push(group);\n        return _this.outPorts[_this.outPortName].beginGroup(group);\n      };\n    })(this));\n    this.inPorts[this.inPortName].on(\"endgroup\", (function(_this) {\n      return function() {\n        if (_this.load > 0) {\n          return _this.q.push({\n            name: \"endgroup\"\n          });\n        }\n        _this.errorGroups.pop();\n        return _this.outPorts[_this.outPortName].endGroup();\n      };\n    })(this));\n    this.inPorts[this.inPortName].on(\"disconnect\", (function(_this) {\n      return function() {\n        if (_this.load > 0) {\n          return _this.q.push({\n            name: \"disconnect\"\n          });\n        }\n        _this.outPorts[_this.outPortName].disconnect();\n        _this.errorGroups = [];\n        if (_this.outPorts.load.isAttached()) {\n          return _this.outPorts.load.disconnect();\n        }\n      };\n    })(this));\n    this.inPorts[this.inPortName].on(\"data\", (function(_this) {\n      return function(data) {\n        if (_this.q.length > 0) {\n          return _this.q.push({\n            name: \"data\",\n            data: data\n          });\n        }\n        return _this.processData(data);\n      };\n    })(this));\n  }\n\n  AsyncComponent.prototype.processData = function(data) {\n    this.incrementLoad();\n    return this.doAsync(data, (function(_this) {\n      return function(err) {\n        if (err) {\n          _this.error(err, _this.errorGroups, _this.errPortName);\n        }\n        return _this.decrementLoad();\n      };\n    })(this));\n  };\n\n  AsyncComponent.prototype.incrementLoad = function() {\n    this.load++;\n    if (this.outPorts.load.isAttached()) {\n      this.outPorts.load.send(this.load);\n    }\n    if (this.outPorts.load.isAttached()) {\n      return this.outPorts.load.disconnect();\n    }\n  };\n\n  AsyncComponent.prototype.doAsync = function(data, callback) {\n    return callback(new Error(\"AsyncComponents must implement doAsync\"));\n  };\n\n  AsyncComponent.prototype.decrementLoad = function() {\n    if (this.load === 0) {\n      throw new Error(\"load cannot be negative\");\n    }\n    this.load--;\n    if (this.outPorts.load.isAttached()) {\n      this.outPorts.load.send(this.load);\n    }\n    if (this.outPorts.load.isAttached()) {\n      this.outPorts.load.disconnect();\n    }\n    if (typeof process !== 'undefined' && process.execPath && process.execPath.indexOf('node') !== -1) {\n      return process.nextTick((function(_this) {\n        return function() {\n          return _this.processQueue();\n        };\n      })(this));\n    } else {\n      return setTimeout((function(_this) {\n        return function() {\n          return _this.processQueue();\n        };\n      })(this), 0);\n    }\n  };\n\n  AsyncComponent.prototype.processQueue = function() {\n    var event, processedData;\n    if (this.load > 0) {\n      return;\n    }\n    processedData = false;\n    while (this.q.length > 0) {\n      event = this.q[0];\n      switch (event.name) {\n        case \"begingroup\":\n          if (processedData) {\n            return;\n          }\n          this.outPorts[this.outPortName].beginGroup(event.data);\n          this.errorGroups.push(event.data);\n          this.q.shift();\n          break;\n        case \"endgroup\":\n          if (processedData) {\n            return;\n          }\n          this.outPorts[this.outPortName].endGroup();\n          this.errorGroups.pop();\n          this.q.shift();\n          break;\n        case \"disconnect\":\n          if (processedData) {\n            return;\n          }\n          this.outPorts[this.outPortName].disconnect();\n          if (this.outPorts.load.isAttached()) {\n            this.outPorts.load.disconnect();\n          }\n          this.errorGroups = [];\n          this.q.shift();\n          break;\n        case \"data\":\n          this.processData(event.data);\n          this.q.shift();\n          processedData = true;\n      }\n    }\n  };\n\n  AsyncComponent.prototype.tearDown = function(callback) {\n    this.q = [];\n    this.errorGroups = [];\n    return callback();\n  };\n\n  AsyncComponent.prototype.error = function(e, groups, errorPort) {\n    var group, i, j, len, len1;\n    if (groups == null) {\n      groups = [];\n    }\n    if (errorPort == null) {\n      errorPort = 'error';\n    }\n    if (this.outPorts[errorPort] && (this.outPorts[errorPort].isAttached() || !this.outPorts[errorPort].isRequired())) {\n      for (i = 0, len = groups.length; i < len; i++) {\n        group = groups[i];\n        this.outPorts[errorPort].beginGroup(group);\n      }\n      this.outPorts[errorPort].send(e);\n      for (j = 0, len1 = groups.length; j < len1; j++) {\n        group = groups[j];\n        this.outPorts[errorPort].endGroup();\n      }\n      this.outPorts[errorPort].disconnect();\n      return;\n    }\n    throw e;\n  };\n\n  return AsyncComponent;\n\n})(component.Component);\n\nexports.AsyncComponent = AsyncComponent;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n/* 43 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(process) {var IP, InternalSocket, OutPortWrapper, StreamReceiver, StreamSender, checkDeprecation, checkWirePatternPreconditions, checkWirePatternPreconditionsInput, checkWirePatternPreconditionsParams, debug, getGroupContext, getInputData, getOutputProxy, handleInputCollation, isArray, legacyWirePattern, platform, populateParams, processApiWirePattern, reorderBuffer, setupBracketForwarding, setupControlPorts, setupErrorHandler, setupSendDefaults, utils,\n  slice = [].slice,\n  hasProp = {}.hasOwnProperty;\n\nStreamSender = __webpack_require__(15).StreamSender;\n\nStreamReceiver = __webpack_require__(15).StreamReceiver;\n\nInternalSocket = __webpack_require__(9);\n\nIP = __webpack_require__(3);\n\nplatform = __webpack_require__(7);\n\nutils = __webpack_require__(30);\n\ndebug = __webpack_require__(4)('noflo:helpers');\n\nisArray = function(obj) {\n  if (Array.isArray) {\n    return Array.isArray(obj);\n  }\n  return Object.prototype.toString.call(arg) === '[object Array]';\n};\n\nexports.MapComponent = function(component, func, config) {\n  platform.deprecated('noflo.helpers.MapComponent is deprecated. Please port to Process API');\n  if (!config) {\n    config = {};\n  }\n  if (!config.inPort) {\n    config.inPort = 'in';\n  }\n  if (!config.outPort) {\n    config.outPort = 'out';\n  }\n  if (!component.forwardBrackets) {\n    component.forwardBrackets = {};\n  }\n  component.forwardBrackets[config.inPort] = [config.outPort];\n  return component.process(function(input, output) {\n    var data, groups, outProxy;\n    if (!input.hasData(config.inPort)) {\n      return;\n    }\n    data = input.getData(config.inPort);\n    groups = getGroupContext(component, config.inPort, input);\n    outProxy = getOutputProxy([config.outPort], output);\n    func(data, groups, outProxy);\n    return output.done();\n  });\n};\n\nexports.WirePattern = function(component, config, proc) {\n  var inPorts, outPorts, ref, setup;\n  inPorts = 'in' in config ? config[\"in\"] : 'in';\n  if (!isArray(inPorts)) {\n    inPorts = [inPorts];\n  }\n  outPorts = 'out' in config ? config.out : 'out';\n  if (!isArray(outPorts)) {\n    outPorts = [outPorts];\n  }\n  if (!('error' in config)) {\n    config.error = 'error';\n  }\n  if (!('async' in config)) {\n    config.async = false;\n  }\n  if (!('ordered' in config)) {\n    config.ordered = true;\n  }\n  if (!('group' in config)) {\n    config.group = false;\n  }\n  if (!('field' in config)) {\n    config.field = null;\n  }\n  if (!('forwardGroups' in config)) {\n    config.forwardGroups = false;\n  }\n  if (config.forwardGroups) {\n    if (typeof config.forwardGroups === 'string') {\n      config.forwardGroups = [config.forwardGroups];\n    }\n    if (typeof config.forwardGroups === 'boolean') {\n      config.forwardGroups = inPorts;\n    }\n  }\n  if (!('receiveStreams' in config)) {\n    config.receiveStreams = false;\n  }\n  if (config.receiveStreams) {\n    throw new Error('WirePattern receiveStreams is deprecated');\n  }\n  if (!('sendStreams' in config)) {\n    config.sendStreams = false;\n  }\n  if (config.sendStreams) {\n    throw new Error('WirePattern sendStreams is deprecated');\n  }\n  if (config.async) {\n    config.sendStreams = outPorts;\n  }\n  if (!('params' in config)) {\n    config.params = [];\n  }\n  if (typeof config.params === 'string') {\n    config.params = [config.params];\n  }\n  if (!('name' in config)) {\n    config.name = '';\n  }\n  if (!('dropInput' in config)) {\n    config.dropInput = false;\n  }\n  if (!('arrayPolicy' in config)) {\n    config.arrayPolicy = {\n      \"in\": 'any',\n      params: 'all'\n    };\n  }\n  config.inPorts = inPorts;\n  config.outPorts = outPorts;\n  checkDeprecation(config, proc);\n  if (config.legacy || (typeof process !== \"undefined\" && process !== null ? (ref = process.env) != null ? ref.NOFLO_WIREPATTERN_LEGACY : void 0 : void 0)) {\n    platform.deprecated('noflo.helpers.WirePattern legacy mode is deprecated');\n    setup = legacyWirePattern;\n  } else {\n    setup = processApiWirePattern;\n  }\n  return setup(component, config, proc);\n};\n\nprocessApiWirePattern = function(component, config, func) {\n  setupControlPorts(component, config);\n  setupSendDefaults(component);\n  setupBracketForwarding(component, config);\n  component.ordered = config.ordered;\n  return component.process(function(input, output, context) {\n    var data, errorHandler, groups, outProxy, postpone, resume;\n    if (!checkWirePatternPreconditions(config, input, output)) {\n      return;\n    }\n    component.params = populateParams(config, input);\n    data = getInputData(config, input);\n    groups = getGroupContext(component, config.inPorts[0], input);\n    outProxy = getOutputProxy(config.outPorts, output);\n    debug(\"WirePattern Process API call with\", data, groups, component.params, context.scope);\n    postpone = function() {\n      throw new Error('noflo.helpers.WirePattern postpone is deprecated');\n    };\n    resume = function() {\n      throw new Error('noflo.helpers.WirePattern resume is deprecated');\n    };\n    if (!config.async) {\n      errorHandler = setupErrorHandler(component, config, output);\n      func.call(component, data, groups, outProxy, postpone, resume, input.scope);\n      if (output.result.__resolved) {\n        return;\n      }\n      errorHandler();\n      output.done();\n      return;\n    }\n    errorHandler = setupErrorHandler(component, config, output);\n    return func.call(component, data, groups, outProxy, function(err) {\n      errorHandler();\n      return output.done(err);\n    }, postpone, resume, input.scope);\n  });\n};\n\ncheckDeprecation = function(config, func) {\n  if (config.group) {\n    platform.deprecated('noflo.helpers.WirePattern group option is deprecated. Please port to Process API');\n  }\n  if (config.field) {\n    platform.deprecated('noflo.helpers.WirePattern field option is deprecated. Please port to Process API');\n  }\n  if (func.length > 4) {\n    platform.deprecated('noflo.helpers.WirePattern postpone and resume are deprecated. Please port to Process API');\n  }\n  if (!config.async) {\n    platform.deprecated('noflo.helpers.WirePattern synchronous is deprecated. Please port to Process API');\n  }\n  if (config.error !== 'error') {\n    platform.deprecated('noflo.helpers.WirePattern custom error port name is deprecated. Please switch to \"error\" or port to WirePattern');\n  }\n};\n\nsetupControlPorts = function(component, config) {\n  var j, len, param, ref, results;\n  ref = config.params;\n  results = [];\n  for (j = 0, len = ref.length; j < len; j++) {\n    param = ref[j];\n    results.push(component.inPorts[param].options.control = true);\n  }\n  return results;\n};\n\nsetupBracketForwarding = function(component, config) {\n  var inPort, inPorts, j, k, len, len1, outPort, ref;\n  component.forwardBrackets = {};\n  if (!config.forwardGroups) {\n    return;\n  }\n  inPorts = config.inPorts;\n  if (isArray(config.forwardGroups)) {\n    inPorts = config.forwardGroups;\n  }\n  for (j = 0, len = inPorts.length; j < len; j++) {\n    inPort = inPorts[j];\n    component.forwardBrackets[inPort] = [];\n    ref = config.outPorts;\n    for (k = 0, len1 = ref.length; k < len1; k++) {\n      outPort = ref[k];\n      component.forwardBrackets[inPort].push(outPort);\n    }\n    if (component.outPorts.error) {\n      component.forwardBrackets[inPort].push('error');\n    }\n  }\n};\n\nsetupErrorHandler = function(component, config, output) {\n  var errorHandler, errors, failHandler, sendErrors;\n  errors = [];\n  errorHandler = function(e, groups) {\n    if (groups == null) {\n      groups = [];\n    }\n    platform.deprecated('noflo.helpers.WirePattern error method is deprecated. Please send error to callback instead');\n    errors.push({\n      err: e,\n      groups: groups\n    });\n    return component.hasErrors = true;\n  };\n  failHandler = function(e, groups) {\n    if (e == null) {\n      e = null;\n    }\n    if (groups == null) {\n      groups = [];\n    }\n    platform.deprecated('noflo.helpers.WirePattern fail method is deprecated. Please send error to callback instead');\n    if (e) {\n      errorHandler(e, groups);\n    }\n    sendErrors();\n    return output.done();\n  };\n  sendErrors = function() {\n    if (!errors.length) {\n      return;\n    }\n    if (config.name) {\n      output.sendIP('error', new IP('openBracket', config.name));\n    }\n    errors.forEach(function(e) {\n      var grp, j, k, len, len1, ref, ref1, results;\n      ref = e.groups;\n      for (j = 0, len = ref.length; j < len; j++) {\n        grp = ref[j];\n        output.sendIP('error', new IP('openBracket', grp));\n      }\n      output.sendIP('error', new IP('data', e.err));\n      ref1 = e.groups;\n      results = [];\n      for (k = 0, len1 = ref1.length; k < len1; k++) {\n        grp = ref1[k];\n        results.push(output.sendIP('error', new IP('closeBracket', grp)));\n      }\n      return results;\n    });\n    if (config.name) {\n      output.sendIP('error', new IP('closeBracket', config.name));\n    }\n    component.hasErrors = false;\n    return errors = [];\n  };\n  component.hasErrors = false;\n  component.error = errorHandler;\n  component.fail = failHandler;\n  return sendErrors;\n};\n\nsetupSendDefaults = function(component) {\n  var portsWithDefaults;\n  portsWithDefaults = Object.keys(component.inPorts.ports).filter(function(p) {\n    if (!component.inPorts[p].options.control) {\n      return false;\n    }\n    if (!component.inPorts[p].hasDefault()) {\n      return false;\n    }\n    return true;\n  });\n  return component.sendDefaults = function() {\n    platform.deprecated('noflo.helpers.WirePattern sendDefaults method is deprecated. Please start with a Network');\n    return portsWithDefaults.forEach(function(port) {\n      var tempSocket;\n      tempSocket = InternalSocket.createSocket();\n      component.inPorts[port].attach(tempSocket);\n      tempSocket.send();\n      tempSocket.disconnect();\n      return component.inPorts[port].detach(tempSocket);\n    });\n  };\n};\n\npopulateParams = function(config, input) {\n  var idx, j, k, len, len1, paramPort, params, ref, ref1;\n  if (!config.params.length) {\n    return {};\n  }\n  params = {};\n  ref = config.params;\n  for (j = 0, len = ref.length; j < len; j++) {\n    paramPort = ref[j];\n    if (input.ports[paramPort].isAddressable()) {\n      params[paramPort] = {};\n      ref1 = input.attached(paramPort);\n      for (k = 0, len1 = ref1.length; k < len1; k++) {\n        idx = ref1[k];\n        if (!input.hasData([paramPort, idx])) {\n          continue;\n        }\n        params[paramPort][idx] = input.getData([paramPort, idx]);\n      }\n      continue;\n    }\n    params[paramPort] = input.getData(paramPort);\n  }\n  return params;\n};\n\nreorderBuffer = function(buffer, matcher) {\n  var brackets, idx, ip, j, k, len, len1, results, substream, substreamBrackets, substreamIdx;\n  substream = null;\n  brackets = [];\n  substreamBrackets = [];\n  for (idx = j = 0, len = buffer.length; j < len; idx = ++j) {\n    ip = buffer[idx];\n    if (ip.type === 'openBracket') {\n      brackets.push(ip.data);\n      substreamBrackets.push(ip);\n      continue;\n    }\n    if (ip.type === 'closeBracket') {\n      brackets.pop();\n      if (substream) {\n        substream.push(ip);\n      }\n      if (substreamBrackets.length) {\n        substreamBrackets.pop();\n      }\n      if (substream && !substreamBrackets.length) {\n        break;\n      }\n      continue;\n    }\n    if (!matcher(ip, brackets)) {\n      substreamBrackets = [];\n      continue;\n    }\n    substream = substreamBrackets.slice(0);\n    substream.push(ip);\n  }\n  substreamIdx = buffer.indexOf(substream[0]);\n  if (substreamIdx === 0) {\n    return;\n  }\n  buffer.splice(substreamIdx, substream.length);\n  substream.reverse();\n  results = [];\n  for (k = 0, len1 = substream.length; k < len1; k++) {\n    ip = substream[k];\n    results.push(buffer.unshift(ip));\n  }\n  return results;\n};\n\nhandleInputCollation = function(data, config, input, port, idx) {\n  var buf;\n  if (!config.group && !config.field) {\n    return;\n  }\n  if (config.group) {\n    buf = input.ports[port].getBuffer(input.scope, idx);\n    reorderBuffer(buf, function(ip, brackets) {\n      var grp, j, len, ref;\n      ref = input.collatedBy.brackets;\n      for (idx = j = 0, len = ref.length; j < len; idx = ++j) {\n        grp = ref[idx];\n        if (brackets[idx] !== grp) {\n          return false;\n        }\n      }\n      return true;\n    });\n  }\n  if (config.field) {\n    data[config.field] = input.collatedBy.field;\n    buf = input.ports[port].getBuffer(input.scope, idx);\n    return reorderBuffer(buf, function(ip) {\n      return ip.data[config.field] === data[config.field];\n    });\n  }\n};\n\ngetInputData = function(config, input) {\n  var data, idx, j, k, len, len1, port, ref, ref1;\n  data = {};\n  ref = config.inPorts;\n  for (j = 0, len = ref.length; j < len; j++) {\n    port = ref[j];\n    if (input.ports[port].isAddressable()) {\n      data[port] = {};\n      ref1 = input.attached(port);\n      for (k = 0, len1 = ref1.length; k < len1; k++) {\n        idx = ref1[k];\n        if (!input.hasData([port, idx])) {\n          continue;\n        }\n        handleInputCollation(data, config, input, port, idx);\n        data[port][idx] = input.getData([port, idx]);\n      }\n      continue;\n    }\n    if (!input.hasData(port)) {\n      continue;\n    }\n    handleInputCollation(data, config, input, port);\n    data[port] = input.getData(port);\n  }\n  if (config.inPorts.length === 1) {\n    return data[config.inPorts[0]];\n  }\n  return data;\n};\n\ngetGroupContext = function(component, port, input) {\n  var ref, ref1;\n  if (((ref = input.result.__bracketContext) != null ? ref[port] : void 0) == null) {\n    return [];\n  }\n  if ((ref1 = input.collatedBy) != null ? ref1.brackets : void 0) {\n    return input.collatedBy.brackets;\n  }\n  return input.result.__bracketContext[port].filter(function(c) {\n    return c.source === port;\n  }).map(function(c) {\n    return c.ip.data;\n  });\n};\n\ngetOutputProxy = function(ports, output) {\n  var outProxy;\n  outProxy = {};\n  ports.forEach(function(port) {\n    return outProxy[port] = {\n      connect: function() {},\n      beginGroup: function(group, idx) {\n        var ip;\n        ip = new IP('openBracket', group);\n        ip.index = idx;\n        return output.sendIP(port, ip);\n      },\n      send: function(data, idx) {\n        var ip;\n        ip = new IP('data', data);\n        ip.index = idx;\n        return output.sendIP(port, ip);\n      },\n      endGroup: function(group, idx) {\n        var ip;\n        ip = new IP('closeBracket', group);\n        ip.index = idx;\n        return output.sendIP(port, ip);\n      },\n      disconnect: function() {}\n    };\n  });\n  if (ports.length === 1) {\n    return outProxy[ports[0]];\n  }\n  return outProxy;\n};\n\ncheckWirePatternPreconditions = function(config, input, output) {\n  var attached, idx, inputsOk, j, k, len, len1, packetsDropped, paramsOk, port, ref;\n  paramsOk = checkWirePatternPreconditionsParams(config, input);\n  inputsOk = checkWirePatternPreconditionsInput(config, input);\n  if (config.dropInput && !paramsOk) {\n    packetsDropped = false;\n    ref = config.inPorts;\n    for (j = 0, len = ref.length; j < len; j++) {\n      port = ref[j];\n      if (input.ports[port].isAddressable()) {\n        attached = input.attached(port);\n        if (!attached.length) {\n          continue;\n        }\n        for (k = 0, len1 = attached.length; k < len1; k++) {\n          idx = attached[k];\n          while (input.has([port, idx])) {\n            packetsDropped = true;\n            input.get([port, idx]).drop();\n          }\n        }\n        continue;\n      }\n      while (input.has(port)) {\n        packetsDropped = true;\n        input.get(port).drop();\n      }\n    }\n    if (packetsDropped) {\n      output.done();\n    }\n  }\n  return inputsOk && paramsOk;\n};\n\ncheckWirePatternPreconditionsParams = function(config, input) {\n  var attached, j, len, param, ref, withData;\n  ref = config.params;\n  for (j = 0, len = ref.length; j < len; j++) {\n    param = ref[j];\n    if (!input.ports[param].isRequired()) {\n      continue;\n    }\n    if (input.ports[param].isAddressable()) {\n      attached = input.attached(param);\n      if (!attached.length) {\n        return false;\n      }\n      withData = attached.filter(function(idx) {\n        return input.hasData([param, idx]);\n      });\n      if (config.arrayPolicy.params === 'all') {\n        if (withData.length !== attached.length) {\n          return false;\n        }\n        continue;\n      }\n      if (!withData.length) {\n        return false;\n      }\n      continue;\n    }\n    if (!input.hasData(param)) {\n      return false;\n    }\n  }\n  return true;\n};\n\ncheckWirePatternPreconditionsInput = function(config, input) {\n  var attached, bracketsAtPorts, checkBrackets, checkPacket, checkPort, j, len, port, ref, withData;\n  if (config.group) {\n    bracketsAtPorts = {};\n    input.collatedBy = {\n      brackets: [],\n      ready: false\n    };\n    checkBrackets = function(left, right) {\n      var bracket, idx, j, len;\n      for (idx = j = 0, len = left.length; j < len; idx = ++j) {\n        bracket = left[idx];\n        if (right[idx] !== bracket) {\n          return false;\n        }\n      }\n      return true;\n    };\n    checkPacket = function(ip, brackets) {\n      var bracketId, bracketsToCheck;\n      bracketsToCheck = brackets.slice(0);\n      if (config.group instanceof RegExp) {\n        bracketsToCheck = bracketsToCheck.slice(0, 1);\n        if (!bracketsToCheck.length) {\n          return false;\n        }\n        if (!config.group.test(bracketsToCheck[0])) {\n          return false;\n        }\n      }\n      if (input.collatedBy.ready) {\n        return checkBrackets(input.collatedBy.brackets, bracketsToCheck);\n      }\n      bracketId = bracketsToCheck.join(':');\n      if (!bracketsAtPorts[bracketId]) {\n        bracketsAtPorts[bracketId] = [];\n      }\n      if (bracketsAtPorts[bracketId].indexOf(port) === -1) {\n        bracketsAtPorts[bracketId].push(port);\n      }\n      if (config.inPorts.indexOf(port) !== config.inPorts.length - 1) {\n        return true;\n      }\n      if (bracketsAtPorts[bracketId].length !== config.inPorts.length) {\n        return false;\n      }\n      if (input.collatedBy.ready) {\n        return false;\n      }\n      input.collatedBy.ready = true;\n      input.collatedBy.brackets = bracketsToCheck;\n      return true;\n    };\n  }\n  if (config.field) {\n    input.collatedBy = {\n      field: void 0,\n      ready: false\n    };\n  }\n  checkPort = function(port) {\n    var buf, dataBrackets, hasData, hasMatching, ip, j, len, portBrackets;\n    if (!config.group && !config.field) {\n      return input.hasData(port);\n    }\n    if (config.group) {\n      portBrackets = [];\n      dataBrackets = [];\n      hasMatching = false;\n      buf = input.ports[port].getBuffer(input.scope);\n      for (j = 0, len = buf.length; j < len; j++) {\n        ip = buf[j];\n        if (ip.type === 'openBracket') {\n          portBrackets.push(ip.data);\n          continue;\n        }\n        if (ip.type === 'closeBracket') {\n          portBrackets.pop();\n          if (portBrackets.length) {\n            continue;\n          }\n          if (!hasData) {\n            continue;\n          }\n          hasMatching = true;\n          continue;\n        }\n        hasData = checkPacket(ip, portBrackets);\n        continue;\n      }\n      return hasMatching;\n    }\n    if (config.field) {\n      return input.hasStream(port, function(ip) {\n        if (!input.collatedBy.ready) {\n          input.collatedBy.field = ip.data[config.field];\n          input.collatedBy.ready = true;\n          return true;\n        }\n        return ip.data[config.field] === input.collatedBy.field;\n      });\n    }\n  };\n  ref = config.inPorts;\n  for (j = 0, len = ref.length; j < len; j++) {\n    port = ref[j];\n    if (input.ports[port].isAddressable()) {\n      attached = input.attached(port);\n      if (!attached.length) {\n        return false;\n      }\n      withData = attached.filter(function(idx) {\n        return checkPort([port, idx]);\n      });\n      if (config.arrayPolicy['in'] === 'all') {\n        if (withData.length !== attached.length) {\n          return false;\n        }\n        continue;\n      }\n      if (!withData.length) {\n        return false;\n      }\n      continue;\n    }\n    if (!checkPort(port)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nOutPortWrapper = (function() {\n  function OutPortWrapper(port1, scope1) {\n    this.port = port1;\n    this.scope = scope1;\n  }\n\n  OutPortWrapper.prototype.connect = function(socketId) {\n    if (socketId == null) {\n      socketId = null;\n    }\n    return this.port.openBracket(null, {\n      scope: this.scope\n    }, socketId);\n  };\n\n  OutPortWrapper.prototype.beginGroup = function(group, socketId) {\n    if (socketId == null) {\n      socketId = null;\n    }\n    return this.port.openBracket(group, {\n      scope: this.scope\n    }, socketId);\n  };\n\n  OutPortWrapper.prototype.send = function(data, socketId) {\n    if (socketId == null) {\n      socketId = null;\n    }\n    return this.port.sendIP('data', data, {\n      scope: this.scope\n    }, socketId, false);\n  };\n\n  OutPortWrapper.prototype.endGroup = function(group, socketId) {\n    if (socketId == null) {\n      socketId = null;\n    }\n    return this.port.closeBracket(group, {\n      scope: this.scope\n    }, socketId);\n  };\n\n  OutPortWrapper.prototype.disconnect = function(socketId) {\n    if (socketId == null) {\n      socketId = null;\n    }\n    return this.endGroup(socketId);\n  };\n\n  OutPortWrapper.prototype.isConnected = function() {\n    return this.port.isConnected();\n  };\n\n  OutPortWrapper.prototype.isAttached = function() {\n    return this.port.isAttached();\n  };\n\n  return OutPortWrapper;\n\n})();\n\nlegacyWirePattern = function(component, config, proc) {\n  var _wp, baseTearDown, closeGroupOnOuts, collectGroups, disconnectOuts, fn, fn1, gc, j, k, l, len, len1, len2, len3, len4, m, n, name, port, processQueue, ref, ref1, ref2, ref3, ref4, resumeTaskQ, sendGroupToOuts, setParamsScope;\n  if (!('gcFrequency' in config)) {\n    config.gcFrequency = 100;\n  }\n  if (!('gcTimeout' in config)) {\n    config.gcTimeout = 300;\n  }\n  collectGroups = config.forwardGroups;\n  if (collectGroups !== false && config.group) {\n    collectGroups = true;\n  }\n  ref = config.inPorts;\n  for (j = 0, len = ref.length; j < len; j++) {\n    name = ref[j];\n    if (!component.inPorts[name]) {\n      throw new Error(\"no inPort named '\" + name + \"'\");\n    }\n  }\n  ref1 = config.outPorts;\n  for (k = 0, len1 = ref1.length; k < len1; k++) {\n    name = ref1[k];\n    if (!component.outPorts[name]) {\n      throw new Error(\"no outPort named '\" + name + \"'\");\n    }\n  }\n  disconnectOuts = function() {\n    var l, len2, p, ref2, results;\n    ref2 = config.outPorts;\n    results = [];\n    for (l = 0, len2 = ref2.length; l < len2; l++) {\n      p = ref2[l];\n      if (component.outPorts[p].isConnected()) {\n        results.push(component.outPorts[p].disconnect());\n      } else {\n        results.push(void 0);\n      }\n    }\n    return results;\n  };\n  sendGroupToOuts = function(grp) {\n    var l, len2, p, ref2, results;\n    ref2 = config.outPorts;\n    results = [];\n    for (l = 0, len2 = ref2.length; l < len2; l++) {\n      p = ref2[l];\n      results.push(component.outPorts[p].beginGroup(grp));\n    }\n    return results;\n  };\n  closeGroupOnOuts = function(grp) {\n    var l, len2, p, ref2, results;\n    ref2 = config.outPorts;\n    results = [];\n    for (l = 0, len2 = ref2.length; l < len2; l++) {\n      p = ref2[l];\n      results.push(component.outPorts[p].endGroup(grp));\n    }\n    return results;\n  };\n  component.requiredParams = [];\n  component.defaultedParams = [];\n  component.gcCounter = 0;\n  component._wpData = {};\n  _wp = function(scope) {\n    if (!(scope in component._wpData)) {\n      component._wpData[scope] = {};\n      component._wpData[scope].groupedData = {};\n      component._wpData[scope].groupedGroups = {};\n      component._wpData[scope].groupedDisconnects = {};\n      component._wpData[scope].outputQ = [];\n      component._wpData[scope].taskQ = [];\n      component._wpData[scope].params = {};\n      component._wpData[scope].completeParams = [];\n      component._wpData[scope].receivedParams = [];\n      component._wpData[scope].defaultsSent = false;\n      component._wpData[scope].disconnectData = {};\n      component._wpData[scope].disconnectQ = [];\n      component._wpData[scope].groupBuffers = {};\n      component._wpData[scope].keyBuffers = {};\n      component._wpData[scope].gcTimestamps = {};\n    }\n    return component._wpData[scope];\n  };\n  component.params = {};\n  setParamsScope = function(scope) {\n    return component.params = _wp(scope).params;\n  };\n  processQueue = function(scope) {\n    var flushed, key, stream, streams, tmp;\n    while (_wp(scope).outputQ.length > 0) {\n      streams = _wp(scope).outputQ[0];\n      flushed = false;\n      if (streams === null) {\n        disconnectOuts();\n        flushed = true;\n      } else {\n        if (config.outPorts.length === 1) {\n          tmp = {};\n          tmp[config.outPorts[0]] = streams;\n          streams = tmp;\n        }\n        for (key in streams) {\n          stream = streams[key];\n          if (stream.resolved) {\n            stream.flush();\n            flushed = true;\n          }\n        }\n      }\n      if (flushed) {\n        _wp(scope).outputQ.shift();\n      }\n      if (!flushed) {\n        return;\n      }\n    }\n  };\n  if (config.async) {\n    if ('load' in component.outPorts) {\n      component.load = 0;\n    }\n    component.beforeProcess = function(scope, outs) {\n      if (config.ordered) {\n        _wp(scope).outputQ.push(outs);\n      }\n      component.load++;\n      component.emit('activate', component.load);\n      if ('load' in component.outPorts && component.outPorts.load.isAttached()) {\n        component.outPorts.load.send(component.load);\n        return component.outPorts.load.disconnect();\n      }\n    };\n    component.afterProcess = function(scope, err, outs) {\n      processQueue(scope);\n      component.load--;\n      if ('load' in component.outPorts && component.outPorts.load.isAttached()) {\n        component.outPorts.load.send(component.load);\n        component.outPorts.load.disconnect();\n      }\n      return component.emit('deactivate', component.load);\n    };\n  }\n  component.sendDefaults = function(scope) {\n    var l, len2, param, ref2, tempSocket;\n    if (component.defaultedParams.length > 0) {\n      ref2 = component.defaultedParams;\n      for (l = 0, len2 = ref2.length; l < len2; l++) {\n        param = ref2[l];\n        if (_wp(scope).receivedParams.indexOf(param) === -1) {\n          tempSocket = InternalSocket.createSocket();\n          component.inPorts[param].attach(tempSocket);\n          tempSocket.send();\n          tempSocket.disconnect();\n          component.inPorts[param].detach(tempSocket);\n        }\n      }\n    }\n    return _wp(scope).defaultsSent = true;\n  };\n  resumeTaskQ = function(scope) {\n    var results, task, temp;\n    if (_wp(scope).completeParams.length === component.requiredParams.length && _wp(scope).taskQ.length > 0) {\n      temp = _wp(scope).taskQ.slice(0);\n      _wp(scope).taskQ = [];\n      results = [];\n      while (temp.length > 0) {\n        task = temp.shift();\n        results.push(task());\n      }\n      return results;\n    }\n  };\n  ref2 = config.params;\n  for (l = 0, len2 = ref2.length; l < len2; l++) {\n    port = ref2[l];\n    if (!component.inPorts[port]) {\n      throw new Error(\"no inPort named '\" + port + \"'\");\n    }\n    if (component.inPorts[port].isRequired()) {\n      component.requiredParams.push(port);\n    }\n    if (component.inPorts[port].hasDefault()) {\n      component.defaultedParams.push(port);\n    }\n  }\n  ref3 = config.params;\n  fn = function(port) {\n    var inPort;\n    inPort = component.inPorts[port];\n    return inPort.handle = function(ip) {\n      var event, index, payload, scope;\n      event = ip.type;\n      payload = ip.data;\n      scope = ip.scope;\n      index = ip.index;\n      if (event !== 'data') {\n        return;\n      }\n      if (inPort.isAddressable()) {\n        if (!(port in _wp(scope).params)) {\n          _wp(scope).params[port] = {};\n        }\n        _wp(scope).params[port][index] = payload;\n        if (config.arrayPolicy.params === 'all' && Object.keys(_wp(scope).params[port]).length < inPort.listAttached().length) {\n          return;\n        }\n      } else {\n        _wp(scope).params[port] = payload;\n      }\n      if (_wp(scope).completeParams.indexOf(port) === -1 && component.requiredParams.indexOf(port) > -1) {\n        _wp(scope).completeParams.push(port);\n      }\n      _wp(scope).receivedParams.push(port);\n      return resumeTaskQ(scope);\n    };\n  };\n  for (m = 0, len3 = ref3.length; m < len3; m++) {\n    port = ref3[m];\n    fn(port);\n  }\n  component.dropRequest = function(scope, key) {\n    if (key in _wp(scope).disconnectData) {\n      delete _wp(scope).disconnectData[key];\n    }\n    if (key in _wp(scope).groupedData) {\n      delete _wp(scope).groupedData[key];\n    }\n    if (key in _wp(scope).groupedGroups) {\n      return delete _wp(scope).groupedGroups[key];\n    }\n  };\n  gc = function() {\n    var current, key, len4, n, ref4, results, scope, val;\n    component.gcCounter++;\n    if (component.gcCounter % config.gcFrequency === 0) {\n      ref4 = Object.keys(component._wpData);\n      results = [];\n      for (n = 0, len4 = ref4.length; n < len4; n++) {\n        scope = ref4[n];\n        current = new Date().getTime();\n        results.push((function() {\n          var ref5, results1;\n          ref5 = _wp(scope).gcTimestamps;\n          results1 = [];\n          for (key in ref5) {\n            val = ref5[key];\n            if ((current - val) > (config.gcTimeout * 1000)) {\n              component.dropRequest(scope, key);\n              results1.push(delete _wp(scope).gcTimestamps[key]);\n            } else {\n              results1.push(void 0);\n            }\n          }\n          return results1;\n        })());\n      }\n      return results;\n    }\n  };\n  ref4 = config.inPorts;\n  fn1 = function(port) {\n    var inPort, needPortGroups;\n    inPort = component.inPorts[port];\n    needPortGroups = collectGroups instanceof Array && collectGroups.indexOf(port) !== -1;\n    return inPort.handle = function(ip) {\n      var data, foundGroup, g, groupLength, groups, grp, i, index, key, len5, len6, len7, len8, o, obj, out, outs, payload, postpone, postponedToQ, q, r, ref5, ref6, ref7, ref8, reqId, requiredLength, resume, s, scope, t, task, tmp, u, whenDone, whenDoneGroups, wrp;\n      index = ip.index;\n      payload = ip.data;\n      scope = ip.scope;\n      if (!(port in _wp(scope).groupBuffers)) {\n        _wp(scope).groupBuffers[port] = [];\n      }\n      if (!(port in _wp(scope).keyBuffers)) {\n        _wp(scope).keyBuffers[port] = null;\n      }\n      switch (ip.type) {\n        case 'openBracket':\n          if (payload === null) {\n            return;\n          }\n          _wp(scope).groupBuffers[port].push(payload);\n          if (config.forwardGroups && (collectGroups === true || needPortGroups) && !config.async) {\n            return sendGroupToOuts(payload);\n          }\n          break;\n        case 'closeBracket':\n          _wp(scope).groupBuffers[port] = _wp(scope).groupBuffers[port].slice(0, _wp(scope).groupBuffers[port].length - 1);\n          if (config.forwardGroups && (collectGroups === true || needPortGroups) && !config.async) {\n            closeGroupOnOuts(payload);\n          }\n          if (_wp(scope).groupBuffers[port].length === 0) {\n            if (config.inPorts.length === 1) {\n              if (config.async || config.StreamSender) {\n                if (config.ordered) {\n                  _wp(scope).outputQ.push(null);\n                  return processQueue(scope);\n                } else {\n                  return _wp(scope).disconnectQ.push(true);\n                }\n              } else {\n                return disconnectOuts();\n              }\n            } else {\n              foundGroup = false;\n              key = _wp(scope).keyBuffers[port];\n              if (!(key in _wp(scope).disconnectData)) {\n                _wp(scope).disconnectData[key] = [];\n              }\n              for (i = o = 0, ref5 = _wp(scope).disconnectData[key].length; 0 <= ref5 ? o < ref5 : o > ref5; i = 0 <= ref5 ? ++o : --o) {\n                if (!(port in _wp(scope).disconnectData[key][i])) {\n                  foundGroup = true;\n                  _wp(scope).disconnectData[key][i][port] = true;\n                  if (Object.keys(_wp(scope).disconnectData[key][i]).length === config.inPorts.length) {\n                    _wp(scope).disconnectData[key].shift();\n                    if (config.async || config.StreamSender) {\n                      if (config.ordered) {\n                        _wp(scope).outputQ.push(null);\n                        processQueue(scope);\n                      } else {\n                        _wp(scope).disconnectQ.push(true);\n                      }\n                    } else {\n                      disconnectOuts();\n                    }\n                    if (_wp(scope).disconnectData[key].length === 0) {\n                      delete _wp(scope).disconnectData[key];\n                    }\n                  }\n                  break;\n                }\n              }\n              if (!foundGroup) {\n                obj = {};\n                obj[port] = true;\n                return _wp(scope).disconnectData[key].push(obj);\n              }\n            }\n          }\n          break;\n        case 'data':\n          if (config.inPorts.length === 1 && !inPort.isAddressable()) {\n            data = payload;\n            groups = _wp(scope).groupBuffers[port];\n          } else {\n            key = '';\n            if (config.group && _wp(scope).groupBuffers[port].length > 0) {\n              key = _wp(scope).groupBuffers[port].toString();\n              if (config.group instanceof RegExp) {\n                reqId = null;\n                ref6 = _wp(scope).groupBuffers[port];\n                for (q = 0, len5 = ref6.length; q < len5; q++) {\n                  grp = ref6[q];\n                  if (config.group.test(grp)) {\n                    reqId = grp;\n                    break;\n                  }\n                }\n                key = reqId ? reqId : '';\n              }\n            } else if (config.field && typeof payload === 'object' && config.field in payload) {\n              key = payload[config.field];\n            }\n            _wp(scope).keyBuffers[port] = key;\n            if (!(key in _wp(scope).groupedData)) {\n              _wp(scope).groupedData[key] = [];\n            }\n            if (!(key in _wp(scope).groupedGroups)) {\n              _wp(scope).groupedGroups[key] = [];\n            }\n            foundGroup = false;\n            requiredLength = config.inPorts.length;\n            if (config.field) {\n              ++requiredLength;\n            }\n            for (i = r = 0, ref7 = _wp(scope).groupedData[key].length; 0 <= ref7 ? r < ref7 : r > ref7; i = 0 <= ref7 ? ++r : --r) {\n              if (!(port in _wp(scope).groupedData[key][i]) || (component.inPorts[port].isAddressable() && config.arrayPolicy[\"in\"] === 'all' && !(index in _wp(scope).groupedData[key][i][port]))) {\n                foundGroup = true;\n                if (component.inPorts[port].isAddressable()) {\n                  if (!(port in _wp(scope).groupedData[key][i])) {\n                    _wp(scope).groupedData[key][i][port] = {};\n                  }\n                  _wp(scope).groupedData[key][i][port][index] = payload;\n                } else {\n                  _wp(scope).groupedData[key][i][port] = payload;\n                }\n                if (needPortGroups) {\n                  _wp(scope).groupedGroups[key][i] = utils.unique(slice.call(_wp(scope).groupedGroups[key][i]).concat(slice.call(_wp(scope).groupBuffers[port])));\n                } else if (collectGroups === true) {\n                  _wp(scope).groupedGroups[key][i][port] = _wp(scope).groupBuffers[port];\n                }\n                if (component.inPorts[port].isAddressable() && config.arrayPolicy[\"in\"] === 'all' && Object.keys(_wp(scope).groupedData[key][i][port]).length < component.inPorts[port].listAttached().length) {\n                  return;\n                }\n                groupLength = Object.keys(_wp(scope).groupedData[key][i]).length;\n                if (groupLength === requiredLength) {\n                  data = (_wp(scope).groupedData[key].splice(i, 1))[0];\n                  if (config.inPorts.length === 1 && inPort.isAddressable()) {\n                    data = data[port];\n                  }\n                  groups = (_wp(scope).groupedGroups[key].splice(i, 1))[0];\n                  if (collectGroups === true) {\n                    groups = utils.intersection.apply(null, utils.getValues(groups));\n                  }\n                  if (_wp(scope).groupedData[key].length === 0) {\n                    delete _wp(scope).groupedData[key];\n                  }\n                  if (_wp(scope).groupedGroups[key].length === 0) {\n                    delete _wp(scope).groupedGroups[key];\n                  }\n                  if (config.group && key) {\n                    delete _wp(scope).gcTimestamps[key];\n                  }\n                  break;\n                } else {\n                  return;\n                }\n              }\n            }\n            if (!foundGroup) {\n              obj = {};\n              if (config.field) {\n                obj[config.field] = key;\n              }\n              if (component.inPorts[port].isAddressable()) {\n                obj[port] = {};\n                obj[port][index] = payload;\n              } else {\n                obj[port] = payload;\n              }\n              if (config.inPorts.length === 1 && component.inPorts[port].isAddressable() && (config.arrayPolicy[\"in\"] === 'any' || component.inPorts[port].listAttached().length === 1)) {\n                data = obj[port];\n                groups = _wp(scope).groupBuffers[port];\n              } else {\n                _wp(scope).groupedData[key].push(obj);\n                if (needPortGroups) {\n                  _wp(scope).groupedGroups[key].push(_wp(scope).groupBuffers[port]);\n                } else if (collectGroups === true) {\n                  tmp = {};\n                  tmp[port] = _wp(scope).groupBuffers[port];\n                  _wp(scope).groupedGroups[key].push(tmp);\n                } else {\n                  _wp(scope).groupedGroups[key].push([]);\n                }\n                if (config.group && key) {\n                  _wp(scope).gcTimestamps[key] = new Date().getTime();\n                }\n                return;\n              }\n            }\n          }\n          if (config.dropInput && _wp(scope).completeParams.length !== component.requiredParams.length) {\n            return;\n          }\n          outs = {};\n          ref8 = config.outPorts;\n          for (s = 0, len6 = ref8.length; s < len6; s++) {\n            name = ref8[s];\n            wrp = new OutPortWrapper(component.outPorts[name], scope);\n            if (config.async || config.sendStreams && config.sendStreams.indexOf(name) !== -1) {\n              wrp;\n              outs[name] = new StreamSender(wrp, config.ordered);\n            } else {\n              outs[name] = wrp;\n            }\n          }\n          if (config.outPorts.length === 1) {\n            outs = outs[config.outPorts[0]];\n          }\n          if (!groups) {\n            groups = [];\n          }\n          groups = (function() {\n            var len7, results, t;\n            results = [];\n            for (t = 0, len7 = groups.length; t < len7; t++) {\n              g = groups[t];\n              if (g !== null) {\n                results.push(g);\n              }\n            }\n            return results;\n          })();\n          whenDoneGroups = groups.slice(0);\n          whenDone = function(err) {\n            var disconnect, len7, out, outputs, t;\n            if (err) {\n              component.error(err, whenDoneGroups, 'error', scope);\n            }\n            if (typeof component.fail === 'function' && component.hasErrors) {\n              component.fail(null, [], scope);\n            }\n            outputs = outs;\n            if (config.outPorts.length === 1) {\n              outputs = {};\n              outputs[port] = outs;\n            }\n            disconnect = false;\n            if (_wp(scope).disconnectQ.length > 0) {\n              _wp(scope).disconnectQ.shift();\n              disconnect = true;\n            }\n            for (name in outputs) {\n              out = outputs[name];\n              if (config.forwardGroups && config.async) {\n                for (t = 0, len7 = whenDoneGroups.length; t < len7; t++) {\n                  i = whenDoneGroups[t];\n                  out.endGroup();\n                }\n              }\n              if (disconnect) {\n                out.disconnect();\n              }\n              if (config.async || config.StreamSender) {\n                out.done();\n              }\n            }\n            if (typeof component.afterProcess === 'function') {\n              return component.afterProcess(scope, err || component.hasErrors, outs);\n            }\n          };\n          if (typeof component.beforeProcess === 'function') {\n            component.beforeProcess(scope, outs);\n          }\n          if (config.forwardGroups && config.async) {\n            if (config.outPorts.length === 1) {\n              for (t = 0, len7 = groups.length; t < len7; t++) {\n                g = groups[t];\n                outs.beginGroup(g);\n              }\n            } else {\n              for (name in outs) {\n                out = outs[name];\n                for (u = 0, len8 = groups.length; u < len8; u++) {\n                  g = groups[u];\n                  out.beginGroup(g);\n                }\n              }\n            }\n          }\n          exports.MultiError(component, config.name, config.error, groups, scope);\n          debug(\"WirePattern Legacy API call with\", data, groups, component.params, scope);\n          if (config.async) {\n            postpone = function() {};\n            resume = function() {};\n            postponedToQ = false;\n            task = function() {\n              setParamsScope(scope);\n              return proc.call(component, data, groups, outs, whenDone, postpone, resume, scope);\n            };\n            postpone = function(backToQueue) {\n              if (backToQueue == null) {\n                backToQueue = true;\n              }\n              postponedToQ = backToQueue;\n              if (backToQueue) {\n                return _wp(scope).taskQ.push(task);\n              }\n            };\n            resume = function() {\n              if (postponedToQ) {\n                return resumeTaskQ();\n              } else {\n                return task();\n              }\n            };\n          } else {\n            task = function() {\n              setParamsScope(scope);\n              proc.call(component, data, groups, outs, null, null, null, scope);\n              return whenDone();\n            };\n          }\n          _wp(scope).taskQ.push(task);\n          resumeTaskQ(scope);\n          return gc();\n      }\n    };\n  };\n  for (n = 0, len4 = ref4.length; n < len4; n++) {\n    port = ref4[n];\n    fn1(port);\n  }\n  baseTearDown = component.tearDown;\n  component.tearDown = function(callback) {\n    component.requiredParams = [];\n    component.defaultedParams = [];\n    component.gcCounter = 0;\n    component._wpData = {};\n    component.params = {};\n    return baseTearDown.call(component, callback);\n  };\n  return component;\n};\n\nexports.GroupedInput = exports.WirePattern;\n\nexports.CustomError = function(message, options) {\n  var err;\n  err = new Error(message);\n  return exports.CustomizeError(err, options);\n};\n\nexports.CustomizeError = function(err, options) {\n  var key, val;\n  for (key in options) {\n    if (!hasProp.call(options, key)) continue;\n    val = options[key];\n    err[key] = val;\n  }\n  return err;\n};\n\nexports.MultiError = function(component, group, errorPort, forwardedGroups, scope) {\n  var baseTearDown;\n  if (group == null) {\n    group = '';\n  }\n  if (errorPort == null) {\n    errorPort = 'error';\n  }\n  if (forwardedGroups == null) {\n    forwardedGroups = [];\n  }\n  if (scope == null) {\n    scope = null;\n  }\n  platform.deprecated('noflo.helpers.MultiError is deprecated. Send errors to error port instead');\n  component.hasErrors = false;\n  component.errors = [];\n  if (component.name && !group) {\n    group = component.name;\n  }\n  if (!group) {\n    group = 'Component';\n  }\n  component.error = function(e, groups) {\n    if (groups == null) {\n      groups = [];\n    }\n    component.errors.push({\n      err: e,\n      groups: forwardedGroups.concat(groups)\n    });\n    return component.hasErrors = true;\n  };\n  component.fail = function(e, groups) {\n    var error, grp, j, k, l, len, len1, len2, ref, ref1, ref2;\n    if (e == null) {\n      e = null;\n    }\n    if (groups == null) {\n      groups = [];\n    }\n    if (e) {\n      component.error(e, groups);\n    }\n    if (!component.hasErrors) {\n      return;\n    }\n    if (!(errorPort in component.outPorts)) {\n      return;\n    }\n    if (!component.outPorts[errorPort].isAttached()) {\n      return;\n    }\n    if (group) {\n      component.outPorts[errorPort].openBracket(group, {\n        scope: scope\n      });\n    }\n    ref = component.errors;\n    for (j = 0, len = ref.length; j < len; j++) {\n      error = ref[j];\n      ref1 = error.groups;\n      for (k = 0, len1 = ref1.length; k < len1; k++) {\n        grp = ref1[k];\n        component.outPorts[errorPort].openBracket(grp, {\n          scope: scope\n        });\n      }\n      component.outPorts[errorPort].data(error.err, {\n        scope: scope\n      });\n      ref2 = error.groups;\n      for (l = 0, len2 = ref2.length; l < len2; l++) {\n        grp = ref2[l];\n        component.outPorts[errorPort].closeBracket(grp, {\n          scope: scope\n        });\n      }\n    }\n    if (group) {\n      component.outPorts[errorPort].closeBracket(group, {\n        scope: scope\n      });\n    }\n    component.hasErrors = false;\n    return component.errors = [];\n  };\n  baseTearDown = component.tearDown;\n  component.tearDown = function(callback) {\n    component.hasErrors = false;\n    component.errors = [];\n    return baseTearDown.call(component, callback);\n  };\n  return component;\n};\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n/* 44 */\n/***/ (function(module, exports) {\n\n/**\n * Helpers.\n */\n\nvar s = 1000\nvar m = s * 60\nvar h = m * 60\nvar d = h * 24\nvar y = d * 365.25\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} options\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function (val, options) {\n  options = options || {}\n  var type = typeof val\n  if (type === 'string' && val.length > 0) {\n    return parse(val)\n  } else if (type === 'number' && isNaN(val) === false) {\n    return options.long ?\n\t\t\tfmtLong(val) :\n\t\t\tfmtShort(val)\n  }\n  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val))\n}\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str)\n  if (str.length > 10000) {\n    return\n  }\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str)\n  if (!match) {\n    return\n  }\n  var n = parseFloat(match[1])\n  var type = (match[2] || 'ms').toLowerCase()\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n\n    default:\n      return undefined\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  if (ms >= d) {\n    return Math.round(ms / d) + 'd'\n  }\n  if (ms >= h) {\n    return Math.round(ms / h) + 'h'\n  }\n  if (ms >= m) {\n    return Math.round(ms / m) + 'm'\n  }\n  if (ms >= s) {\n    return Math.round(ms / s) + 's'\n  }\n  return ms + 'ms'\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  return plural(ms, d, 'day') ||\n    plural(ms, h, 'hour') ||\n    plural(ms, m, 'minute') ||\n    plural(ms, s, 'second') ||\n    ms + ' ms'\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) {\n    return\n  }\n  if (ms < n * 1.5) {\n    return Math.floor(ms / n) + ' ' + name\n  }\n  return Math.ceil(ms / n) + ' ' + name + 's'\n}\n\n\n/***/ }),\n/* 45 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = __webpack_require__(44);\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n */\n\nexports.formatters = {};\n\n/**\n * Previous log timestamp.\n */\n\nvar prevTime;\n\n/**\n * Select a color.\n * @param {String} namespace\n * @return {Number}\n * @api private\n */\n\nfunction selectColor(namespace) {\n  var hash = 0, i;\n\n  for (i in namespace) {\n    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return exports.colors[Math.abs(hash) % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction createDebug(namespace) {\n\n  function debug() {\n    // disabled?\n    if (!debug.enabled) return;\n\n    var self = debug;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // turn the `arguments` into a proper Array\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %O\n      args.unshift('%O');\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    // apply env-specific formatting (colors, etc.)\n    exports.formatArgs.call(self, args);\n\n    var logFn = debug.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n\n  debug.namespace = namespace;\n  debug.enabled = exports.enabled(namespace);\n  debug.useColors = exports.useColors();\n  debug.color = selectColor(namespace);\n\n  // env-specific initialization logic for debug instances\n  if ('function' === typeof exports.init) {\n    exports.init(debug);\n  }\n\n  return debug;\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  exports.names = [];\n  exports.skips = [];\n\n  var split = (namespaces || '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (var i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n\n\n/***/ }),\n/* 46 */\n/***/ (function(module, exports, __webpack_require__) {\n\n(function() {\n  var EventEmitter, Graph, clone, mergeResolveTheirsNaive, platform, resetGraph,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  EventEmitter = __webpack_require__(0).EventEmitter;\n\n  clone = __webpack_require__(31);\n\n  platform = __webpack_require__(48);\n\n  Graph = (function(superClass) {\n    extend(Graph, superClass);\n\n    Graph.prototype.name = '';\n\n    Graph.prototype.caseSensitive = false;\n\n    Graph.prototype.properties = {};\n\n    Graph.prototype.nodes = [];\n\n    Graph.prototype.edges = [];\n\n    Graph.prototype.initializers = [];\n\n    Graph.prototype.exports = [];\n\n    Graph.prototype.inports = {};\n\n    Graph.prototype.outports = {};\n\n    Graph.prototype.groups = [];\n\n    function Graph(name1, options) {\n      this.name = name1 != null ? name1 : '';\n      if (options == null) {\n        options = {};\n      }\n      this.properties = {};\n      this.nodes = [];\n      this.edges = [];\n      this.initializers = [];\n      this.exports = [];\n      this.inports = {};\n      this.outports = {};\n      this.groups = [];\n      this.transaction = {\n        id: null,\n        depth: 0\n      };\n      this.caseSensitive = options.caseSensitive || false;\n    }\n\n    Graph.prototype.getPortName = function(port) {\n      if (this.caseSensitive) {\n        return port;\n      } else {\n        return port.toLowerCase();\n      }\n    };\n\n    Graph.prototype.startTransaction = function(id, metadata) {\n      if (this.transaction.id) {\n        throw Error(\"Nested transactions not supported\");\n      }\n      this.transaction.id = id;\n      this.transaction.depth = 1;\n      return this.emit('startTransaction', id, metadata);\n    };\n\n    Graph.prototype.endTransaction = function(id, metadata) {\n      if (!this.transaction.id) {\n        throw Error(\"Attempted to end non-existing transaction\");\n      }\n      this.transaction.id = null;\n      this.transaction.depth = 0;\n      return this.emit('endTransaction', id, metadata);\n    };\n\n    Graph.prototype.checkTransactionStart = function() {\n      if (!this.transaction.id) {\n        return this.startTransaction('implicit');\n      } else if (this.transaction.id === 'implicit') {\n        return this.transaction.depth += 1;\n      }\n    };\n\n    Graph.prototype.checkTransactionEnd = function() {\n      if (this.transaction.id === 'implicit') {\n        this.transaction.depth -= 1;\n      }\n      if (this.transaction.depth === 0) {\n        return this.endTransaction('implicit');\n      }\n    };\n\n    Graph.prototype.setProperties = function(properties) {\n      var before, item, val;\n      this.checkTransactionStart();\n      before = clone(this.properties);\n      for (item in properties) {\n        val = properties[item];\n        this.properties[item] = val;\n      }\n      this.emit('changeProperties', this.properties, before);\n      return this.checkTransactionEnd();\n    };\n\n    Graph.prototype.addExport = function(publicPort, nodeKey, portKey, metadata) {\n      var exported;\n      if (metadata == null) {\n        metadata = {\n          x: 0,\n          y: 0\n        };\n      }\n      platform.deprecated('fbp-graph.Graph exports is deprecated: please use specific inport or outport instead');\n      if (!this.getNode(nodeKey)) {\n        return;\n      }\n      this.checkTransactionStart();\n      exported = {\n        \"public\": this.getPortName(publicPort),\n        process: nodeKey,\n        port: this.getPortName(portKey),\n        metadata: metadata\n      };\n      this.exports.push(exported);\n      this.emit('addExport', exported);\n      return this.checkTransactionEnd();\n    };\n\n    Graph.prototype.removeExport = function(publicPort) {\n      var exported, found, i, idx, len, ref;\n      platform.deprecated('fbp-graph.Graph exports is deprecated: please use specific inport or outport instead');\n      publicPort = this.getPortName(publicPort);\n      found = null;\n      ref = this.exports;\n      for (idx = i = 0, len = ref.length; i < len; idx = ++i) {\n        exported = ref[idx];\n        if (exported[\"public\"] === publicPort) {\n          found = exported;\n        }\n      }\n      if (!found) {\n        return;\n      }\n      this.checkTransactionStart();\n      this.exports.splice(this.exports.indexOf(found), 1);\n      this.emit('removeExport', found);\n      return this.checkTransactionEnd();\n    };\n\n    Graph.prototype.addInport = function(publicPort, nodeKey, portKey, metadata) {\n      if (!this.getNode(nodeKey)) {\n        return;\n      }\n      publicPort = this.getPortName(publicPort);\n      this.checkTransactionStart();\n      this.inports[publicPort] = {\n        process: nodeKey,\n        port: this.getPortName(portKey),\n        metadata: metadata\n      };\n      this.emit('addInport', publicPort, this.inports[publicPort]);\n      return this.checkTransactionEnd();\n    };\n\n    Graph.prototype.removeInport = function(publicPort) {\n      var port;\n      publicPort = this.getPortName(publicPort);\n      if (!this.inports[publicPort]) {\n        return;\n      }\n      this.checkTransactionStart();\n      port = this.inports[publicPort];\n      this.setInportMetadata(publicPort, {});\n      delete this.inports[publicPort];\n      this.emit('removeInport', publicPort, port);\n      return this.checkTransactionEnd();\n    };\n\n    Graph.prototype.renameInport = function(oldPort, newPort) {\n      oldPort = this.getPortName(oldPort);\n      newPort = this.getPortName(newPort);\n      if (!this.inports[oldPort]) {\n        return;\n      }\n      this.checkTransactionStart();\n      this.inports[newPort] = this.inports[oldPort];\n      delete this.inports[oldPort];\n      this.emit('renameInport', oldPort, newPort);\n      return this.checkTransactionEnd();\n    };\n\n    Graph.prototype.setInportMetadata = function(publicPort, metadata) {\n      var before, item, val;\n      publicPort = this.getPortName(publicPort);\n      if (!this.inports[publicPort]) {\n        return;\n      }\n      this.checkTransactionStart();\n      before = clone(this.inports[publicPort].metadata);\n      if (!this.inports[publicPort].metadata) {\n        this.inports[publicPort].metadata = {};\n      }\n      for (item in metadata) {\n        val = metadata[item];\n        if (val != null) {\n          this.inports[publicPort].metadata[item] = val;\n        } else {\n          delete this.inports[publicPort].metadata[item];\n        }\n      }\n      this.emit('changeInport', publicPort, this.inports[publicPort], before);\n      return this.checkTransactionEnd();\n    };\n\n    Graph.prototype.addOutport = function(publicPort, nodeKey, portKey, metadata) {\n      if (!this.getNode(nodeKey)) {\n        return;\n      }\n      publicPort = this.getPortName(publicPort);\n      this.checkTransactionStart();\n      this.outports[publicPort] = {\n        process: nodeKey,\n        port: this.getPortName(portKey),\n        metadata: metadata\n      };\n      this.emit('addOutport', publicPort, this.outports[publicPort]);\n      return this.checkTransactionEnd();\n    };\n\n    Graph.prototype.removeOutport = function(publicPort) {\n      var port;\n      publicPort = this.getPortName(publicPort);\n      if (!this.outports[publicPort]) {\n        return;\n      }\n      this.checkTransactionStart();\n      port = this.outports[publicPort];\n      this.setOutportMetadata(publicPort, {});\n      delete this.outports[publicPort];\n      this.emit('removeOutport', publicPort, port);\n      return this.checkTransactionEnd();\n    };\n\n    Graph.prototype.renameOutport = function(oldPort, newPort) {\n      oldPort = this.getPortName(oldPort);\n      newPort = this.getPortName(newPort);\n      if (!this.outports[oldPort]) {\n        return;\n      }\n      this.checkTransactionStart();\n      this.outports[newPort] = this.outports[oldPort];\n      delete this.outports[oldPort];\n      this.emit('renameOutport', oldPort, newPort);\n      return this.checkTransactionEnd();\n    };\n\n    Graph.prototype.setOutportMetadata = function(publicPort, metadata) {\n      var before, item, val;\n      publicPort = this.getPortName(publicPort);\n      if (!this.outports[publicPort]) {\n        return;\n      }\n      this.checkTransactionStart();\n      before = clone(this.outports[publicPort].metadata);\n      if (!this.outports[publicPort].metadata) {\n        this.outports[publicPort].metadata = {};\n      }\n      for (item in metadata) {\n        val = metadata[item];\n        if (val != null) {\n          this.outports[publicPort].metadata[item] = val;\n        } else {\n          delete this.outports[publicPort].metadata[item];\n        }\n      }\n      this.emit('changeOutport', publicPort, this.outports[publicPort], before);\n      return this.checkTransactionEnd();\n    };\n\n    Graph.prototype.addGroup = function(group, nodes, metadata) {\n      var g;\n      this.checkTransactionStart();\n      g = {\n        name: group,\n        nodes: nodes,\n        metadata: metadata\n      };\n      this.groups.push(g);\n      this.emit('addGroup', g);\n      return this.checkTransactionEnd();\n    };\n\n    Graph.prototype.renameGroup = function(oldName, newName) {\n      var group, i, len, ref;\n      this.checkTransactionStart();\n      ref = this.groups;\n      for (i = 0, len = ref.length; i < len; i++) {\n        group = ref[i];\n        if (!group) {\n          continue;\n        }\n        if (group.name !== oldName) {\n          continue;\n        }\n        group.name = newName;\n        this.emit('renameGroup', oldName, newName);\n      }\n      return this.checkTransactionEnd();\n    };\n\n    Graph.prototype.removeGroup = function(groupName) {\n      var group, i, len, ref;\n      this.checkTransactionStart();\n      ref = this.groups;\n      for (i = 0, len = ref.length; i < len; i++) {\n        group = ref[i];\n        if (!group) {\n          continue;\n        }\n        if (group.name !== groupName) {\n          continue;\n        }\n        this.setGroupMetadata(group.name, {});\n        this.groups.splice(this.groups.indexOf(group), 1);\n        this.emit('removeGroup', group);\n      }\n      return this.checkTransactionEnd();\n    };\n\n    Graph.prototype.setGroupMetadata = function(groupName, metadata) {\n      var before, group, i, item, len, ref, val;\n      this.checkTransactionStart();\n      ref = this.groups;\n      for (i = 0, len = ref.length; i < len; i++) {\n        group = ref[i];\n        if (!group) {\n          continue;\n        }\n        if (group.name !== groupName) {\n          continue;\n        }\n        before = clone(group.metadata);\n        for (item in metadata) {\n          val = metadata[item];\n          if (val != null) {\n            group.metadata[item] = val;\n          } else {\n            delete group.metadata[item];\n          }\n        }\n        this.emit('changeGroup', group, before);\n      }\n      return this.checkTransactionEnd();\n    };\n\n    Graph.prototype.addNode = function(id, component, metadata) {\n      var node;\n      this.checkTransactionStart();\n      if (!metadata) {\n        metadata = {};\n      }\n      node = {\n        id: id,\n        component: component,\n        metadata: metadata\n      };\n      this.nodes.push(node);\n      this.emit('addNode', node);\n      this.checkTransactionEnd();\n      return node;\n    };\n\n    Graph.prototype.removeNode = function(id) {\n      var edge, exported, group, i, index, initializer, j, k, l, len, len1, len2, len3, len4, len5, len6, len7, len8, m, n, node, o, p, priv, pub, q, ref, ref1, ref2, ref3, ref4, ref5, toRemove;\n      node = this.getNode(id);\n      if (!node) {\n        return;\n      }\n      this.checkTransactionStart();\n      toRemove = [];\n      ref = this.edges;\n      for (i = 0, len = ref.length; i < len; i++) {\n        edge = ref[i];\n        if ((edge.from.node === node.id) || (edge.to.node === node.id)) {\n          toRemove.push(edge);\n        }\n      }\n      for (j = 0, len1 = toRemove.length; j < len1; j++) {\n        edge = toRemove[j];\n        this.removeEdge(edge.from.node, edge.from.port, edge.to.node, edge.to.port);\n      }\n      toRemove = [];\n      ref1 = this.initializers;\n      for (k = 0, len2 = ref1.length; k < len2; k++) {\n        initializer = ref1[k];\n        if (initializer.to.node === node.id) {\n          toRemove.push(initializer);\n        }\n      }\n      for (l = 0, len3 = toRemove.length; l < len3; l++) {\n        initializer = toRemove[l];\n        this.removeInitial(initializer.to.node, initializer.to.port);\n      }\n      toRemove = [];\n      ref2 = this.exports;\n      for (m = 0, len4 = ref2.length; m < len4; m++) {\n        exported = ref2[m];\n        if (this.getPortName(id) === exported.process) {\n          toRemove.push(exported);\n        }\n      }\n      for (n = 0, len5 = toRemove.length; n < len5; n++) {\n        exported = toRemove[n];\n        this.removeExport(exported[\"public\"]);\n      }\n      toRemove = [];\n      ref3 = this.inports;\n      for (pub in ref3) {\n        priv = ref3[pub];\n        if (priv.process === id) {\n          toRemove.push(pub);\n        }\n      }\n      for (o = 0, len6 = toRemove.length; o < len6; o++) {\n        pub = toRemove[o];\n        this.removeInport(pub);\n      }\n      toRemove = [];\n      ref4 = this.outports;\n      for (pub in ref4) {\n        priv = ref4[pub];\n        if (priv.process === id) {\n          toRemove.push(pub);\n        }\n      }\n      for (p = 0, len7 = toRemove.length; p < len7; p++) {\n        pub = toRemove[p];\n        this.removeOutport(pub);\n      }\n      ref5 = this.groups;\n      for (q = 0, len8 = ref5.length; q < len8; q++) {\n        group = ref5[q];\n        if (!group) {\n          continue;\n        }\n        index = group.nodes.indexOf(id);\n        if (index === -1) {\n          continue;\n        }\n        group.nodes.splice(index, 1);\n      }\n      this.setNodeMetadata(id, {});\n      if (-1 !== this.nodes.indexOf(node)) {\n        this.nodes.splice(this.nodes.indexOf(node), 1);\n      }\n      this.emit('removeNode', node);\n      return this.checkTransactionEnd();\n    };\n\n    Graph.prototype.getNode = function(id) {\n      var i, len, node, ref;\n      ref = this.nodes;\n      for (i = 0, len = ref.length; i < len; i++) {\n        node = ref[i];\n        if (!node) {\n          continue;\n        }\n        if (node.id === id) {\n          return node;\n        }\n      }\n      return null;\n    };\n\n    Graph.prototype.renameNode = function(oldId, newId) {\n      var edge, exported, group, i, iip, index, j, k, l, len, len1, len2, len3, node, priv, pub, ref, ref1, ref2, ref3, ref4, ref5;\n      this.checkTransactionStart();\n      node = this.getNode(oldId);\n      if (!node) {\n        return;\n      }\n      node.id = newId;\n      ref = this.edges;\n      for (i = 0, len = ref.length; i < len; i++) {\n        edge = ref[i];\n        if (!edge) {\n          continue;\n        }\n        if (edge.from.node === oldId) {\n          edge.from.node = newId;\n        }\n        if (edge.to.node === oldId) {\n          edge.to.node = newId;\n        }\n      }\n      ref1 = this.initializers;\n      for (j = 0, len1 = ref1.length; j < len1; j++) {\n        iip = ref1[j];\n        if (!iip) {\n          continue;\n        }\n        if (iip.to.node === oldId) {\n          iip.to.node = newId;\n        }\n      }\n      ref2 = this.inports;\n      for (pub in ref2) {\n        priv = ref2[pub];\n        if (priv.process === oldId) {\n          priv.process = newId;\n        }\n      }\n      ref3 = this.outports;\n      for (pub in ref3) {\n        priv = ref3[pub];\n        if (priv.process === oldId) {\n          priv.process = newId;\n        }\n      }\n      ref4 = this.exports;\n      for (k = 0, len2 = ref4.length; k < len2; k++) {\n        exported = ref4[k];\n        if (exported.process === oldId) {\n          exported.process = newId;\n        }\n      }\n      ref5 = this.groups;\n      for (l = 0, len3 = ref5.length; l < len3; l++) {\n        group = ref5[l];\n        if (!group) {\n          continue;\n        }\n        index = group.nodes.indexOf(oldId);\n        if (index === -1) {\n          continue;\n        }\n        group.nodes[index] = newId;\n      }\n      this.emit('renameNode', oldId, newId);\n      return this.checkTransactionEnd();\n    };\n\n    Graph.prototype.setNodeMetadata = function(id, metadata) {\n      var before, item, node, val;\n      node = this.getNode(id);\n      if (!node) {\n        return;\n      }\n      this.checkTransactionStart();\n      before = clone(node.metadata);\n      if (!node.metadata) {\n        node.metadata = {};\n      }\n      for (item in metadata) {\n        val = metadata[item];\n        if (val != null) {\n          node.metadata[item] = val;\n        } else {\n          delete node.metadata[item];\n        }\n      }\n      this.emit('changeNode', node, before);\n      return this.checkTransactionEnd();\n    };\n\n    Graph.prototype.addEdge = function(outNode, outPort, inNode, inPort, metadata) {\n      var edge, i, len, ref;\n      if (metadata == null) {\n        metadata = {};\n      }\n      outPort = this.getPortName(outPort);\n      inPort = this.getPortName(inPort);\n      ref = this.edges;\n      for (i = 0, len = ref.length; i < len; i++) {\n        edge = ref[i];\n        if (edge.from.node === outNode && edge.from.port === outPort && edge.to.node === inNode && edge.to.port === inPort) {\n          return;\n        }\n      }\n      if (!this.getNode(outNode)) {\n        return;\n      }\n      if (!this.getNode(inNode)) {\n        return;\n      }\n      this.checkTransactionStart();\n      edge = {\n        from: {\n          node: outNode,\n          port: outPort\n        },\n        to: {\n          node: inNode,\n          port: inPort\n        },\n        metadata: metadata\n      };\n      this.edges.push(edge);\n      this.emit('addEdge', edge);\n      this.checkTransactionEnd();\n      return edge;\n    };\n\n    Graph.prototype.addEdgeIndex = function(outNode, outPort, outIndex, inNode, inPort, inIndex, metadata) {\n      var edge;\n      if (metadata == null) {\n        metadata = {};\n      }\n      if (!this.getNode(outNode)) {\n        return;\n      }\n      if (!this.getNode(inNode)) {\n        return;\n      }\n      outPort = this.getPortName(outPort);\n      inPort = this.getPortName(inPort);\n      if (inIndex === null) {\n        inIndex = void 0;\n      }\n      if (outIndex === null) {\n        outIndex = void 0;\n      }\n      if (!metadata) {\n        metadata = {};\n      }\n      this.checkTransactionStart();\n      edge = {\n        from: {\n          node: outNode,\n          port: outPort,\n          index: outIndex\n        },\n        to: {\n          node: inNode,\n          port: inPort,\n          index: inIndex\n        },\n        metadata: metadata\n      };\n      this.edges.push(edge);\n      this.emit('addEdge', edge);\n      this.checkTransactionEnd();\n      return edge;\n    };\n\n    Graph.prototype.removeEdge = function(node, port, node2, port2) {\n      var edge, i, index, j, k, len, len1, len2, ref, ref1, toKeep, toRemove;\n      this.checkTransactionStart();\n      port = this.getPortName(port);\n      port2 = this.getPortName(port2);\n      toRemove = [];\n      toKeep = [];\n      if (node2 && port2) {\n        ref = this.edges;\n        for (index = i = 0, len = ref.length; i < len; index = ++i) {\n          edge = ref[index];\n          if (edge.from.node === node && edge.from.port === port && edge.to.node === node2 && edge.to.port === port2) {\n            this.setEdgeMetadata(edge.from.node, edge.from.port, edge.to.node, edge.to.port, {});\n            toRemove.push(edge);\n          } else {\n            toKeep.push(edge);\n          }\n        }\n      } else {\n        ref1 = this.edges;\n        for (index = j = 0, len1 = ref1.length; j < len1; index = ++j) {\n          edge = ref1[index];\n          if ((edge.from.node === node && edge.from.port === port) || (edge.to.node === node && edge.to.port === port)) {\n            this.setEdgeMetadata(edge.from.node, edge.from.port, edge.to.node, edge.to.port, {});\n            toRemove.push(edge);\n          } else {\n            toKeep.push(edge);\n          }\n        }\n      }\n      this.edges = toKeep;\n      for (k = 0, len2 = toRemove.length; k < len2; k++) {\n        edge = toRemove[k];\n        this.emit('removeEdge', edge);\n      }\n      return this.checkTransactionEnd();\n    };\n\n    Graph.prototype.getEdge = function(node, port, node2, port2) {\n      var edge, i, index, len, ref;\n      port = this.getPortName(port);\n      port2 = this.getPortName(port2);\n      ref = this.edges;\n      for (index = i = 0, len = ref.length; i < len; index = ++i) {\n        edge = ref[index];\n        if (!edge) {\n          continue;\n        }\n        if (edge.from.node === node && edge.from.port === port) {\n          if (edge.to.node === node2 && edge.to.port === port2) {\n            return edge;\n          }\n        }\n      }\n      return null;\n    };\n\n    Graph.prototype.setEdgeMetadata = function(node, port, node2, port2, metadata) {\n      var before, edge, item, val;\n      edge = this.getEdge(node, port, node2, port2);\n      if (!edge) {\n        return;\n      }\n      this.checkTransactionStart();\n      before = clone(edge.metadata);\n      if (!edge.metadata) {\n        edge.metadata = {};\n      }\n      for (item in metadata) {\n        val = metadata[item];\n        if (val != null) {\n          edge.metadata[item] = val;\n        } else {\n          delete edge.metadata[item];\n        }\n      }\n      this.emit('changeEdge', edge, before);\n      return this.checkTransactionEnd();\n    };\n\n    Graph.prototype.addInitial = function(data, node, port, metadata) {\n      var initializer;\n      if (!this.getNode(node)) {\n        return;\n      }\n      port = this.getPortName(port);\n      this.checkTransactionStart();\n      initializer = {\n        from: {\n          data: data\n        },\n        to: {\n          node: node,\n          port: port\n        },\n        metadata: metadata\n      };\n      this.initializers.push(initializer);\n      this.emit('addInitial', initializer);\n      this.checkTransactionEnd();\n      return initializer;\n    };\n\n    Graph.prototype.addInitialIndex = function(data, node, port, index, metadata) {\n      var initializer;\n      if (!this.getNode(node)) {\n        return;\n      }\n      if (index === null) {\n        index = void 0;\n      }\n      port = this.getPortName(port);\n      this.checkTransactionStart();\n      initializer = {\n        from: {\n          data: data\n        },\n        to: {\n          node: node,\n          port: port,\n          index: index\n        },\n        metadata: metadata\n      };\n      this.initializers.push(initializer);\n      this.emit('addInitial', initializer);\n      this.checkTransactionEnd();\n      return initializer;\n    };\n\n    Graph.prototype.addGraphInitial = function(data, node, metadata) {\n      var inport;\n      inport = this.inports[node];\n      if (!inport) {\n        return;\n      }\n      return this.addInitial(data, inport.process, inport.port, metadata);\n    };\n\n    Graph.prototype.addGraphInitialIndex = function(data, node, index, metadata) {\n      var inport;\n      inport = this.inports[node];\n      if (!inport) {\n        return;\n      }\n      return this.addInitialIndex(data, inport.process, inport.port, index, metadata);\n    };\n\n    Graph.prototype.removeInitial = function(node, port) {\n      var edge, i, index, j, len, len1, ref, toKeep, toRemove;\n      port = this.getPortName(port);\n      this.checkTransactionStart();\n      toRemove = [];\n      toKeep = [];\n      ref = this.initializers;\n      for (index = i = 0, len = ref.length; i < len; index = ++i) {\n        edge = ref[index];\n        if (edge.to.node === node && edge.to.port === port) {\n          toRemove.push(edge);\n        } else {\n          toKeep.push(edge);\n        }\n      }\n      this.initializers = toKeep;\n      for (j = 0, len1 = toRemove.length; j < len1; j++) {\n        edge = toRemove[j];\n        this.emit('removeInitial', edge);\n      }\n      return this.checkTransactionEnd();\n    };\n\n    Graph.prototype.removeGraphInitial = function(node) {\n      var inport;\n      inport = this.inports[node];\n      if (!inport) {\n        return;\n      }\n      return this.removeInitial(inport.process, inport.port);\n    };\n\n    Graph.prototype.toDOT = function() {\n      var cleanID, cleanPort, data, dot, edge, i, id, initializer, j, k, len, len1, len2, node, ref, ref1, ref2;\n      cleanID = function(id) {\n        return id.replace(/\\s*/g, \"\");\n      };\n      cleanPort = function(port) {\n        return port.replace(/\\./g, \"\");\n      };\n      dot = \"digraph {\\n\";\n      ref = this.nodes;\n      for (i = 0, len = ref.length; i < len; i++) {\n        node = ref[i];\n        dot += \"    \" + (cleanID(node.id)) + \" [label=\" + node.id + \" shape=box]\\n\";\n      }\n      ref1 = this.initializers;\n      for (id = j = 0, len1 = ref1.length; j < len1; id = ++j) {\n        initializer = ref1[id];\n        if (typeof initializer.from.data === 'function') {\n          data = 'Function';\n        } else {\n          data = initializer.from.data;\n        }\n        dot += \"    data\" + id + \" [label=\\\"'\" + data + \"'\\\" shape=plaintext]\\n\";\n        dot += \"    data\" + id + \" -> \" + (cleanID(initializer.to.node)) + \"[headlabel=\" + (cleanPort(initializer.to.port)) + \" labelfontcolor=blue labelfontsize=8.0]\\n\";\n      }\n      ref2 = this.edges;\n      for (k = 0, len2 = ref2.length; k < len2; k++) {\n        edge = ref2[k];\n        dot += \"    \" + (cleanID(edge.from.node)) + \" -> \" + (cleanID(edge.to.node)) + \"[taillabel=\" + (cleanPort(edge.from.port)) + \" headlabel=\" + (cleanPort(edge.to.port)) + \" labelfontcolor=blue labelfontsize=8.0]\\n\";\n      }\n      dot += \"}\";\n      return dot;\n    };\n\n    Graph.prototype.toYUML = function() {\n      var edge, i, initializer, j, len, len1, ref, ref1, yuml;\n      yuml = [];\n      ref = this.initializers;\n      for (i = 0, len = ref.length; i < len; i++) {\n        initializer = ref[i];\n        yuml.push(\"(start)[\" + initializer.to.port + \"]->(\" + initializer.to.node + \")\");\n      }\n      ref1 = this.edges;\n      for (j = 0, len1 = ref1.length; j < len1; j++) {\n        edge = ref1[j];\n        yuml.push(\"(\" + edge.from.node + \")[\" + edge.from.port + \"]->(\" + edge.to.node + \")\");\n      }\n      return yuml.join(\",\");\n    };\n\n    Graph.prototype.toJSON = function() {\n      var connection, edge, exported, group, groupData, i, initializer, j, json, k, l, len, len1, len2, len3, len4, m, node, priv, property, pub, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, value;\n      json = {\n        caseSensitive: this.caseSensitive,\n        properties: {},\n        inports: {},\n        outports: {},\n        groups: [],\n        processes: {},\n        connections: []\n      };\n      if (this.name) {\n        json.properties.name = this.name;\n      }\n      ref = this.properties;\n      for (property in ref) {\n        value = ref[property];\n        json.properties[property] = value;\n      }\n      ref1 = this.inports;\n      for (pub in ref1) {\n        priv = ref1[pub];\n        json.inports[pub] = priv;\n      }\n      ref2 = this.outports;\n      for (pub in ref2) {\n        priv = ref2[pub];\n        json.outports[pub] = priv;\n      }\n      ref3 = this.exports;\n      for (i = 0, len = ref3.length; i < len; i++) {\n        exported = ref3[i];\n        if (!json.exports) {\n          json.exports = [];\n        }\n        json.exports.push(exported);\n      }\n      ref4 = this.groups;\n      for (j = 0, len1 = ref4.length; j < len1; j++) {\n        group = ref4[j];\n        groupData = {\n          name: group.name,\n          nodes: group.nodes\n        };\n        if (Object.keys(group.metadata).length) {\n          groupData.metadata = group.metadata;\n        }\n        json.groups.push(groupData);\n      }\n      ref5 = this.nodes;\n      for (k = 0, len2 = ref5.length; k < len2; k++) {\n        node = ref5[k];\n        json.processes[node.id] = {\n          component: node.component\n        };\n        if (node.metadata) {\n          json.processes[node.id].metadata = node.metadata;\n        }\n      }\n      ref6 = this.edges;\n      for (l = 0, len3 = ref6.length; l < len3; l++) {\n        edge = ref6[l];\n        connection = {\n          src: {\n            process: edge.from.node,\n            port: edge.from.port,\n            index: edge.from.index\n          },\n          tgt: {\n            process: edge.to.node,\n            port: edge.to.port,\n            index: edge.to.index\n          }\n        };\n        if (Object.keys(edge.metadata).length) {\n          connection.metadata = edge.metadata;\n        }\n        json.connections.push(connection);\n      }\n      ref7 = this.initializers;\n      for (m = 0, len4 = ref7.length; m < len4; m++) {\n        initializer = ref7[m];\n        json.connections.push({\n          data: initializer.from.data,\n          tgt: {\n            process: initializer.to.node,\n            port: initializer.to.port,\n            index: initializer.to.index\n          }\n        });\n      }\n      return json;\n    };\n\n    Graph.prototype.save = function(file, callback) {\n      var json;\n      if (platform.isBrowser()) {\n        return callback(new Error(\"Saving graphs not supported on browser\"));\n      }\n      json = JSON.stringify(this.toJSON(), null, 4);\n      return __webpack_require__(16).writeFile(file + \".json\", json, \"utf-8\", function(err, data) {\n        if (err) {\n          throw err;\n        }\n        return callback(file);\n      });\n    };\n\n    return Graph;\n\n  })(EventEmitter);\n\n  exports.Graph = Graph;\n\n  exports.createGraph = function(name, options) {\n    return new Graph(name, options);\n  };\n\n  exports.loadJSON = function(definition, callback, metadata) {\n    var caseSensitive, conn, def, exported, graph, group, i, id, j, k, len, len1, len2, portId, priv, processId, properties, property, pub, ref, ref1, ref2, ref3, ref4, ref5, ref6, split, value;\n    if (metadata == null) {\n      metadata = {};\n    }\n    if (typeof definition === 'string') {\n      definition = JSON.parse(definition);\n    }\n    if (!definition.properties) {\n      definition.properties = {};\n    }\n    if (!definition.processes) {\n      definition.processes = {};\n    }\n    if (!definition.connections) {\n      definition.connections = [];\n    }\n    caseSensitive = definition.caseSensitive || false;\n    graph = new Graph(definition.properties.name, {\n      caseSensitive: caseSensitive\n    });\n    graph.startTransaction('loadJSON', metadata);\n    properties = {};\n    ref = definition.properties;\n    for (property in ref) {\n      value = ref[property];\n      if (property === 'name') {\n        continue;\n      }\n      properties[property] = value;\n    }\n    graph.setProperties(properties);\n    ref1 = definition.processes;\n    for (id in ref1) {\n      def = ref1[id];\n      if (!def.metadata) {\n        def.metadata = {};\n      }\n      graph.addNode(id, def.component, def.metadata);\n    }\n    ref2 = definition.connections;\n    for (i = 0, len = ref2.length; i < len; i++) {\n      conn = ref2[i];\n      metadata = conn.metadata ? conn.metadata : {};\n      if (conn.data !== void 0) {\n        if (typeof conn.tgt.index === 'number') {\n          graph.addInitialIndex(conn.data, conn.tgt.process, graph.getPortName(conn.tgt.port), conn.tgt.index, metadata);\n        } else {\n          graph.addInitial(conn.data, conn.tgt.process, graph.getPortName(conn.tgt.port), metadata);\n        }\n        continue;\n      }\n      if (typeof conn.src.index === 'number' || typeof conn.tgt.index === 'number') {\n        graph.addEdgeIndex(conn.src.process, graph.getPortName(conn.src.port), conn.src.index, conn.tgt.process, graph.getPortName(conn.tgt.port), conn.tgt.index, metadata);\n        continue;\n      }\n      graph.addEdge(conn.src.process, graph.getPortName(conn.src.port), conn.tgt.process, graph.getPortName(conn.tgt.port), metadata);\n    }\n    if (definition.exports && definition.exports.length) {\n      ref3 = definition.exports;\n      for (j = 0, len1 = ref3.length; j < len1; j++) {\n        exported = ref3[j];\n        if (exported[\"private\"]) {\n          split = exported[\"private\"].split('.');\n          if (split.length !== 2) {\n            continue;\n          }\n          processId = split[0];\n          portId = split[1];\n          for (id in definition.processes) {\n            if (graph.getPortName(id) === graph.getPortName(processId)) {\n              processId = id;\n            }\n          }\n        } else {\n          processId = exported.process;\n          portId = graph.getPortName(exported.port);\n        }\n        graph.addExport(exported[\"public\"], processId, portId, exported.metadata);\n      }\n    }\n    if (definition.inports) {\n      ref4 = definition.inports;\n      for (pub in ref4) {\n        priv = ref4[pub];\n        graph.addInport(pub, priv.process, graph.getPortName(priv.port), priv.metadata);\n      }\n    }\n    if (definition.outports) {\n      ref5 = definition.outports;\n      for (pub in ref5) {\n        priv = ref5[pub];\n        graph.addOutport(pub, priv.process, graph.getPortName(priv.port), priv.metadata);\n      }\n    }\n    if (definition.groups) {\n      ref6 = definition.groups;\n      for (k = 0, len2 = ref6.length; k < len2; k++) {\n        group = ref6[k];\n        graph.addGroup(group.name, group.nodes, group.metadata || {});\n      }\n    }\n    graph.endTransaction('loadJSON');\n    return callback(null, graph);\n  };\n\n  exports.loadFBP = function(fbpData, callback, metadata, caseSensitive) {\n    var definition, e, error;\n    if (metadata == null) {\n      metadata = {};\n    }\n    if (caseSensitive == null) {\n      caseSensitive = false;\n    }\n    try {\n      definition = __webpack_require__(49).parse(fbpData, {\n        caseSensitive: caseSensitive\n      });\n    } catch (error) {\n      e = error;\n      return callback(e);\n    }\n    return exports.loadJSON(definition, callback, metadata);\n  };\n\n  exports.loadHTTP = function(url, callback) {\n    var req;\n    req = new XMLHttpRequest;\n    req.onreadystatechange = function() {\n      if (req.readyState !== 4) {\n        return;\n      }\n      if (req.status !== 200) {\n        return callback(new Error(\"Failed to load \" + url + \": HTTP \" + req.status));\n      }\n      return callback(null, req.responseText);\n    };\n    req.open('GET', url, true);\n    return req.send();\n  };\n\n  exports.loadFile = function(file, callback, metadata, caseSensitive) {\n    if (metadata == null) {\n      metadata = {};\n    }\n    if (caseSensitive == null) {\n      caseSensitive = false;\n    }\n    if (platform.isBrowser()) {\n      exports.loadHTTP(file, function(err, data) {\n        var definition;\n        if (err) {\n          return callback(err);\n        }\n        if (file.split('.').pop() === 'fbp') {\n          return exports.loadFBP(data, callback, metadata);\n        }\n        definition = JSON.parse(data);\n        return exports.loadJSON(definition, callback, metadata);\n      });\n      return;\n    }\n    return __webpack_require__(16).readFile(file, \"utf-8\", function(err, data) {\n      var definition;\n      if (err) {\n        return callback(err);\n      }\n      if (file.split('.').pop() === 'fbp') {\n        return exports.loadFBP(data, callback, {}, caseSensitive);\n      }\n      definition = JSON.parse(data);\n      return exports.loadJSON(definition, callback, {});\n    });\n  };\n\n  resetGraph = function(graph) {\n    var edge, exp, group, i, iip, j, k, l, len, len1, len2, len3, len4, m, node, port, ref, ref1, ref2, ref3, ref4, ref5, ref6, results, v;\n    ref = (clone(graph.groups)).reverse();\n    for (i = 0, len = ref.length; i < len; i++) {\n      group = ref[i];\n      if (group != null) {\n        graph.removeGroup(group.name);\n      }\n    }\n    ref1 = clone(graph.outports);\n    for (port in ref1) {\n      v = ref1[port];\n      graph.removeOutport(port);\n    }\n    ref2 = clone(graph.inports);\n    for (port in ref2) {\n      v = ref2[port];\n      graph.removeInport(port);\n    }\n    ref3 = clone(graph.exports.reverse());\n    for (j = 0, len1 = ref3.length; j < len1; j++) {\n      exp = ref3[j];\n      graph.removeExport(exp[\"public\"]);\n    }\n    graph.setProperties({});\n    ref4 = (clone(graph.initializers)).reverse();\n    for (k = 0, len2 = ref4.length; k < len2; k++) {\n      iip = ref4[k];\n      graph.removeInitial(iip.to.node, iip.to.port);\n    }\n    ref5 = (clone(graph.edges)).reverse();\n    for (l = 0, len3 = ref5.length; l < len3; l++) {\n      edge = ref5[l];\n      graph.removeEdge(edge.from.node, edge.from.port, edge.to.node, edge.to.port);\n    }\n    ref6 = (clone(graph.nodes)).reverse();\n    results = [];\n    for (m = 0, len4 = ref6.length; m < len4; m++) {\n      node = ref6[m];\n      results.push(graph.removeNode(node.id));\n    }\n    return results;\n  };\n\n  mergeResolveTheirsNaive = function(base, to) {\n    var edge, exp, group, i, iip, j, k, l, len, len1, len2, len3, len4, m, node, priv, pub, ref, ref1, ref2, ref3, ref4, ref5, ref6, results;\n    resetGraph(base);\n    ref = to.nodes;\n    for (i = 0, len = ref.length; i < len; i++) {\n      node = ref[i];\n      base.addNode(node.id, node.component, node.metadata);\n    }\n    ref1 = to.edges;\n    for (j = 0, len1 = ref1.length; j < len1; j++) {\n      edge = ref1[j];\n      base.addEdge(edge.from.node, edge.from.port, edge.to.node, edge.to.port, edge.metadata);\n    }\n    ref2 = to.initializers;\n    for (k = 0, len2 = ref2.length; k < len2; k++) {\n      iip = ref2[k];\n      base.addInitial(iip.from.data, iip.to.node, iip.to.port, iip.metadata);\n    }\n    ref3 = to.exports;\n    for (l = 0, len3 = ref3.length; l < len3; l++) {\n      exp = ref3[l];\n      base.addExport(exp[\"public\"], exp.node, exp.port, exp.metadata);\n    }\n    base.setProperties(to.properties);\n    ref4 = to.inports;\n    for (pub in ref4) {\n      priv = ref4[pub];\n      base.addInport(pub, priv.process, priv.port, priv.metadata);\n    }\n    ref5 = to.outports;\n    for (pub in ref5) {\n      priv = ref5[pub];\n      base.addOutport(pub, priv.process, priv.port, priv.metadata);\n    }\n    ref6 = to.groups;\n    results = [];\n    for (m = 0, len4 = ref6.length; m < len4; m++) {\n      group = ref6[m];\n      results.push(base.addGroup(group.name, group.nodes, group.metadata));\n    }\n    return results;\n  };\n\n  exports.equivalent = function(a, b, options) {\n    var A, B;\n    if (options == null) {\n      options = {};\n    }\n    A = JSON.stringify(a);\n    B = JSON.stringify(b);\n    return A === B;\n  };\n\n  exports.mergeResolveTheirs = mergeResolveTheirsNaive;\n\n}).call(this);\n\n\n/***/ }),\n/* 47 */\n/***/ (function(module, exports, __webpack_require__) {\n\n(function() {\n  var EventEmitter, Journal, JournalStore, MemoryJournalStore, calculateMeta, clone, entryToPrettyString,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\n  EventEmitter = __webpack_require__(0).EventEmitter;\n\n  clone = __webpack_require__(31);\n\n  entryToPrettyString = function(entry) {\n    var a;\n    a = entry.args;\n    switch (entry.cmd) {\n      case 'addNode':\n        return a.id + \"(\" + a.component + \")\";\n      case 'removeNode':\n        return \"DEL \" + a.id + \"(\" + a.component + \")\";\n      case 'renameNode':\n        return \"RENAME \" + a.oldId + \" \" + a.newId;\n      case 'changeNode':\n        return \"META \" + a.id;\n      case 'addEdge':\n        return a.from.node + \" \" + a.from.port + \" -> \" + a.to.port + \" \" + a.to.node;\n      case 'removeEdge':\n        return a.from.node + \" \" + a.from.port + \" -X> \" + a.to.port + \" \" + a.to.node;\n      case 'changeEdge':\n        return \"META \" + a.from.node + \" \" + a.from.port + \" -> \" + a.to.port + \" \" + a.to.node;\n      case 'addInitial':\n        return \"'\" + a.from.data + \"' -> \" + a.to.port + \" \" + a.to.node;\n      case 'removeInitial':\n        return \"'\" + a.from.data + \"' -X> \" + a.to.port + \" \" + a.to.node;\n      case 'startTransaction':\n        return \">>> \" + entry.rev + \": \" + a.id;\n      case 'endTransaction':\n        return \"<<< \" + entry.rev + \": \" + a.id;\n      case 'changeProperties':\n        return \"PROPERTIES\";\n      case 'addGroup':\n        return \"GROUP \" + a.name;\n      case 'renameGroup':\n        return \"RENAME GROUP \" + a.oldName + \" \" + a.newName;\n      case 'removeGroup':\n        return \"DEL GROUP \" + a.name;\n      case 'changeGroup':\n        return \"META GROUP \" + a.name;\n      case 'addInport':\n        return \"INPORT \" + a.name;\n      case 'removeInport':\n        return \"DEL INPORT \" + a.name;\n      case 'renameInport':\n        return \"RENAME INPORT \" + a.oldId + \" \" + a.newId;\n      case 'changeInport':\n        return \"META INPORT \" + a.name;\n      case 'addOutport':\n        return \"OUTPORT \" + a.name;\n      case 'removeOutport':\n        return \"DEL OUTPORT \" + a.name;\n      case 'renameOutport':\n        return \"RENAME OUTPORT \" + a.oldId + \" \" + a.newId;\n      case 'changeOutport':\n        return \"META OUTPORT \" + a.name;\n      default:\n        throw new Error(\"Unknown journal entry: \" + entry.cmd);\n    }\n  };\n\n  calculateMeta = function(oldMeta, newMeta) {\n    var k, setMeta, v;\n    setMeta = {};\n    for (k in oldMeta) {\n      v = oldMeta[k];\n      setMeta[k] = null;\n    }\n    for (k in newMeta) {\n      v = newMeta[k];\n      setMeta[k] = v;\n    }\n    return setMeta;\n  };\n\n  JournalStore = (function(superClass) {\n    extend(JournalStore, superClass);\n\n    JournalStore.prototype.lastRevision = 0;\n\n    function JournalStore(graph1) {\n      this.graph = graph1;\n      this.lastRevision = 0;\n    }\n\n    JournalStore.prototype.putTransaction = function(revId, entries) {\n      if (revId > this.lastRevision) {\n        this.lastRevision = revId;\n      }\n      return this.emit('transaction', revId);\n    };\n\n    JournalStore.prototype.fetchTransaction = function(revId, entries) {};\n\n    return JournalStore;\n\n  })(EventEmitter);\n\n  MemoryJournalStore = (function(superClass) {\n    extend(MemoryJournalStore, superClass);\n\n    function MemoryJournalStore(graph) {\n      MemoryJournalStore.__super__.constructor.call(this, graph);\n      this.transactions = [];\n    }\n\n    MemoryJournalStore.prototype.putTransaction = function(revId, entries) {\n      MemoryJournalStore.__super__.putTransaction.call(this, revId, entries);\n      return this.transactions[revId] = entries;\n    };\n\n    MemoryJournalStore.prototype.fetchTransaction = function(revId) {\n      return this.transactions[revId];\n    };\n\n    return MemoryJournalStore;\n\n  })(JournalStore);\n\n  Journal = (function(superClass) {\n    extend(Journal, superClass);\n\n    Journal.prototype.graph = null;\n\n    Journal.prototype.entries = [];\n\n    Journal.prototype.subscribed = true;\n\n    function Journal(graph, metadata, store) {\n      this.endTransaction = bind(this.endTransaction, this);\n      this.startTransaction = bind(this.startTransaction, this);\n      var edge, group, iip, j, k, l, len, len1, len2, len3, m, n, node, ref, ref1, ref2, ref3, ref4, ref5, v;\n      this.graph = graph;\n      this.entries = [];\n      this.subscribed = true;\n      this.store = store || new MemoryJournalStore(this.graph);\n      if (this.store.transactions.length === 0) {\n        this.currentRevision = -1;\n        this.startTransaction('initial', metadata);\n        ref = this.graph.nodes;\n        for (j = 0, len = ref.length; j < len; j++) {\n          node = ref[j];\n          this.appendCommand('addNode', node);\n        }\n        ref1 = this.graph.edges;\n        for (l = 0, len1 = ref1.length; l < len1; l++) {\n          edge = ref1[l];\n          this.appendCommand('addEdge', edge);\n        }\n        ref2 = this.graph.initializers;\n        for (m = 0, len2 = ref2.length; m < len2; m++) {\n          iip = ref2[m];\n          this.appendCommand('addInitial', iip);\n        }\n        if (Object.keys(this.graph.properties).length > 0) {\n          this.appendCommand('changeProperties', this.graph.properties, {});\n        }\n        ref3 = this.graph.inports;\n        for (k in ref3) {\n          v = ref3[k];\n          this.appendCommand('addInport', {\n            name: k,\n            port: v\n          });\n        }\n        ref4 = this.graph.outports;\n        for (k in ref4) {\n          v = ref4[k];\n          this.appendCommand('addOutport', {\n            name: k,\n            port: v\n          });\n        }\n        ref5 = this.graph.groups;\n        for (n = 0, len3 = ref5.length; n < len3; n++) {\n          group = ref5[n];\n          this.appendCommand('addGroup', group);\n        }\n        this.endTransaction('initial', metadata);\n      } else {\n        this.currentRevision = this.store.lastRevision;\n      }\n      this.graph.on('addNode', (function(_this) {\n        return function(node) {\n          return _this.appendCommand('addNode', node);\n        };\n      })(this));\n      this.graph.on('removeNode', (function(_this) {\n        return function(node) {\n          return _this.appendCommand('removeNode', node);\n        };\n      })(this));\n      this.graph.on('renameNode', (function(_this) {\n        return function(oldId, newId) {\n          var args;\n          args = {\n            oldId: oldId,\n            newId: newId\n          };\n          return _this.appendCommand('renameNode', args);\n        };\n      })(this));\n      this.graph.on('changeNode', (function(_this) {\n        return function(node, oldMeta) {\n          return _this.appendCommand('changeNode', {\n            id: node.id,\n            \"new\": node.metadata,\n            old: oldMeta\n          });\n        };\n      })(this));\n      this.graph.on('addEdge', (function(_this) {\n        return function(edge) {\n          return _this.appendCommand('addEdge', edge);\n        };\n      })(this));\n      this.graph.on('removeEdge', (function(_this) {\n        return function(edge) {\n          return _this.appendCommand('removeEdge', edge);\n        };\n      })(this));\n      this.graph.on('changeEdge', (function(_this) {\n        return function(edge, oldMeta) {\n          return _this.appendCommand('changeEdge', {\n            from: edge.from,\n            to: edge.to,\n            \"new\": edge.metadata,\n            old: oldMeta\n          });\n        };\n      })(this));\n      this.graph.on('addInitial', (function(_this) {\n        return function(iip) {\n          return _this.appendCommand('addInitial', iip);\n        };\n      })(this));\n      this.graph.on('removeInitial', (function(_this) {\n        return function(iip) {\n          return _this.appendCommand('removeInitial', iip);\n        };\n      })(this));\n      this.graph.on('changeProperties', (function(_this) {\n        return function(newProps, oldProps) {\n          return _this.appendCommand('changeProperties', {\n            \"new\": newProps,\n            old: oldProps\n          });\n        };\n      })(this));\n      this.graph.on('addGroup', (function(_this) {\n        return function(group) {\n          return _this.appendCommand('addGroup', group);\n        };\n      })(this));\n      this.graph.on('renameGroup', (function(_this) {\n        return function(oldName, newName) {\n          return _this.appendCommand('renameGroup', {\n            oldName: oldName,\n            newName: newName\n          });\n        };\n      })(this));\n      this.graph.on('removeGroup', (function(_this) {\n        return function(group) {\n          return _this.appendCommand('removeGroup', group);\n        };\n      })(this));\n      this.graph.on('changeGroup', (function(_this) {\n        return function(group, oldMeta) {\n          return _this.appendCommand('changeGroup', {\n            name: group.name,\n            \"new\": group.metadata,\n            old: oldMeta\n          });\n        };\n      })(this));\n      this.graph.on('addExport', (function(_this) {\n        return function(exported) {\n          return _this.appendCommand('addExport', exported);\n        };\n      })(this));\n      this.graph.on('removeExport', (function(_this) {\n        return function(exported) {\n          return _this.appendCommand('removeExport', exported);\n        };\n      })(this));\n      this.graph.on('addInport', (function(_this) {\n        return function(name, port) {\n          return _this.appendCommand('addInport', {\n            name: name,\n            port: port\n          });\n        };\n      })(this));\n      this.graph.on('removeInport', (function(_this) {\n        return function(name, port) {\n          return _this.appendCommand('removeInport', {\n            name: name,\n            port: port\n          });\n        };\n      })(this));\n      this.graph.on('renameInport', (function(_this) {\n        return function(oldId, newId) {\n          return _this.appendCommand('renameInport', {\n            oldId: oldId,\n            newId: newId\n          });\n        };\n      })(this));\n      this.graph.on('changeInport', (function(_this) {\n        return function(name, port, oldMeta) {\n          return _this.appendCommand('changeInport', {\n            name: name,\n            \"new\": port.metadata,\n            old: oldMeta\n          });\n        };\n      })(this));\n      this.graph.on('addOutport', (function(_this) {\n        return function(name, port) {\n          return _this.appendCommand('addOutport', {\n            name: name,\n            port: port\n          });\n        };\n      })(this));\n      this.graph.on('removeOutport', (function(_this) {\n        return function(name, port) {\n          return _this.appendCommand('removeOutport', {\n            name: name,\n            port: port\n          });\n        };\n      })(this));\n      this.graph.on('renameOutport', (function(_this) {\n        return function(oldId, newId) {\n          return _this.appendCommand('renameOutport', {\n            oldId: oldId,\n            newId: newId\n          });\n        };\n      })(this));\n      this.graph.on('changeOutport', (function(_this) {\n        return function(name, port, oldMeta) {\n          return _this.appendCommand('changeOutport', {\n            name: name,\n            \"new\": port.metadata,\n            old: oldMeta\n          });\n        };\n      })(this));\n      this.graph.on('startTransaction', (function(_this) {\n        return function(id, meta) {\n          return _this.startTransaction(id, meta);\n        };\n      })(this));\n      this.graph.on('endTransaction', (function(_this) {\n        return function(id, meta) {\n          return _this.endTransaction(id, meta);\n        };\n      })(this));\n    }\n\n    Journal.prototype.startTransaction = function(id, meta) {\n      if (!this.subscribed) {\n        return;\n      }\n      if (this.entries.length > 0) {\n        throw Error(\"Inconsistent @entries\");\n      }\n      this.currentRevision++;\n      return this.appendCommand('startTransaction', {\n        id: id,\n        metadata: meta\n      }, this.currentRevision);\n    };\n\n    Journal.prototype.endTransaction = function(id, meta) {\n      if (!this.subscribed) {\n        return;\n      }\n      this.appendCommand('endTransaction', {\n        id: id,\n        metadata: meta\n      }, this.currentRevision);\n      this.store.putTransaction(this.currentRevision, this.entries);\n      return this.entries = [];\n    };\n\n    Journal.prototype.appendCommand = function(cmd, args, rev) {\n      var entry;\n      if (!this.subscribed) {\n        return;\n      }\n      entry = {\n        cmd: cmd,\n        args: clone(args)\n      };\n      if (rev != null) {\n        entry.rev = rev;\n      }\n      return this.entries.push(entry);\n    };\n\n    Journal.prototype.executeEntry = function(entry) {\n      var a;\n      a = entry.args;\n      switch (entry.cmd) {\n        case 'addNode':\n          return this.graph.addNode(a.id, a.component);\n        case 'removeNode':\n          return this.graph.removeNode(a.id);\n        case 'renameNode':\n          return this.graph.renameNode(a.oldId, a.newId);\n        case 'changeNode':\n          return this.graph.setNodeMetadata(a.id, calculateMeta(a.old, a[\"new\"]));\n        case 'addEdge':\n          return this.graph.addEdge(a.from.node, a.from.port, a.to.node, a.to.port);\n        case 'removeEdge':\n          return this.graph.removeEdge(a.from.node, a.from.port, a.to.node, a.to.port);\n        case 'changeEdge':\n          return this.graph.setEdgeMetadata(a.from.node, a.from.port, a.to.node, a.to.port, calculateMeta(a.old, a[\"new\"]));\n        case 'addInitial':\n          return this.graph.addInitial(a.from.data, a.to.node, a.to.port);\n        case 'removeInitial':\n          return this.graph.removeInitial(a.to.node, a.to.port);\n        case 'startTransaction':\n          return null;\n        case 'endTransaction':\n          return null;\n        case 'changeProperties':\n          return this.graph.setProperties(a[\"new\"]);\n        case 'addGroup':\n          return this.graph.addGroup(a.name, a.nodes, a.metadata);\n        case 'renameGroup':\n          return this.graph.renameGroup(a.oldName, a.newName);\n        case 'removeGroup':\n          return this.graph.removeGroup(a.name);\n        case 'changeGroup':\n          return this.graph.setGroupMetadata(a.name, calculateMeta(a.old, a[\"new\"]));\n        case 'addInport':\n          return this.graph.addInport(a.name, a.port.process, a.port.port, a.port.metadata);\n        case 'removeInport':\n          return this.graph.removeInport(a.name);\n        case 'renameInport':\n          return this.graph.renameInport(a.oldId, a.newId);\n        case 'changeInport':\n          return this.graph.setInportMetadata(a.name, calculateMeta(a.old, a[\"new\"]));\n        case 'addOutport':\n          return this.graph.addOutport(a.name, a.port.process, a.port.port, a.port.metadata(a.name));\n        case 'removeOutport':\n          return this.graph.removeOutport;\n        case 'renameOutport':\n          return this.graph.renameOutport(a.oldId, a.newId);\n        case 'changeOutport':\n          return this.graph.setOutportMetadata(a.name, calculateMeta(a.old, a[\"new\"]));\n        default:\n          throw new Error(\"Unknown journal entry: \" + entry.cmd);\n      }\n    };\n\n    Journal.prototype.executeEntryInversed = function(entry) {\n      var a;\n      a = entry.args;\n      switch (entry.cmd) {\n        case 'addNode':\n          return this.graph.removeNode(a.id);\n        case 'removeNode':\n          return this.graph.addNode(a.id, a.component);\n        case 'renameNode':\n          return this.graph.renameNode(a.newId, a.oldId);\n        case 'changeNode':\n          return this.graph.setNodeMetadata(a.id, calculateMeta(a[\"new\"], a.old));\n        case 'addEdge':\n          return this.graph.removeEdge(a.from.node, a.from.port, a.to.node, a.to.port);\n        case 'removeEdge':\n          return this.graph.addEdge(a.from.node, a.from.port, a.to.node, a.to.port);\n        case 'changeEdge':\n          return this.graph.setEdgeMetadata(a.from.node, a.from.port, a.to.node, a.to.port, calculateMeta(a[\"new\"], a.old));\n        case 'addInitial':\n          return this.graph.removeInitial(a.to.node, a.to.port);\n        case 'removeInitial':\n          return this.graph.addInitial(a.from.data, a.to.node, a.to.port);\n        case 'startTransaction':\n          return null;\n        case 'endTransaction':\n          return null;\n        case 'changeProperties':\n          return this.graph.setProperties(a.old);\n        case 'addGroup':\n          return this.graph.removeGroup(a.name);\n        case 'renameGroup':\n          return this.graph.renameGroup(a.newName, a.oldName);\n        case 'removeGroup':\n          return this.graph.addGroup(a.name, a.nodes, a.metadata);\n        case 'changeGroup':\n          return this.graph.setGroupMetadata(a.name, calculateMeta(a[\"new\"], a.old));\n        case 'addInport':\n          return this.graph.removeInport(a.name);\n        case 'removeInport':\n          return this.graph.addInport(a.name, a.port.process, a.port.port, a.port.metadata);\n        case 'renameInport':\n          return this.graph.renameInport(a.newId, a.oldId);\n        case 'changeInport':\n          return this.graph.setInportMetadata(a.name, calculateMeta(a[\"new\"], a.old));\n        case 'addOutport':\n          return this.graph.removeOutport(a.name);\n        case 'removeOutport':\n          return this.graph.addOutport(a.name, a.port.process, a.port.port, a.port.metadata);\n        case 'renameOutport':\n          return this.graph.renameOutport(a.newId, a.oldId);\n        case 'changeOutport':\n          return this.graph.setOutportMetadata(a.name, calculateMeta(a[\"new\"], a.old));\n        default:\n          throw new Error(\"Unknown journal entry: \" + entry.cmd);\n      }\n    };\n\n    Journal.prototype.moveToRevision = function(revId) {\n      var entries, entry, i, j, l, len, m, n, r, ref, ref1, ref2, ref3, ref4, ref5;\n      if (revId === this.currentRevision) {\n        return;\n      }\n      this.subscribed = false;\n      if (revId > this.currentRevision) {\n        for (r = j = ref = this.currentRevision + 1, ref1 = revId; ref <= ref1 ? j <= ref1 : j >= ref1; r = ref <= ref1 ? ++j : --j) {\n          ref2 = this.store.fetchTransaction(r);\n          for (l = 0, len = ref2.length; l < len; l++) {\n            entry = ref2[l];\n            this.executeEntry(entry);\n          }\n        }\n      } else {\n        for (r = m = ref3 = this.currentRevision, ref4 = revId + 1; m >= ref4; r = m += -1) {\n          entries = this.store.fetchTransaction(r);\n          for (i = n = ref5 = entries.length - 1; n >= 0; i = n += -1) {\n            this.executeEntryInversed(entries[i]);\n          }\n        }\n      }\n      this.currentRevision = revId;\n      return this.subscribed = true;\n    };\n\n    Journal.prototype.undo = function() {\n      if (!this.canUndo()) {\n        return;\n      }\n      return this.moveToRevision(this.currentRevision - 1);\n    };\n\n    Journal.prototype.canUndo = function() {\n      return this.currentRevision > 0;\n    };\n\n    Journal.prototype.redo = function() {\n      if (!this.canRedo()) {\n        return;\n      }\n      return this.moveToRevision(this.currentRevision + 1);\n    };\n\n    Journal.prototype.canRedo = function() {\n      return this.currentRevision < this.store.lastRevision;\n    };\n\n    Journal.prototype.toPrettyString = function(startRev, endRev) {\n      var e, entry, j, l, len, lines, r, ref, ref1;\n      startRev |= 0;\n      endRev |= this.store.lastRevision;\n      lines = [];\n      for (r = j = ref = startRev, ref1 = endRev; ref <= ref1 ? j < ref1 : j > ref1; r = ref <= ref1 ? ++j : --j) {\n        e = this.store.fetchTransaction(r);\n        for (l = 0, len = e.length; l < len; l++) {\n          entry = e[l];\n          lines.push(entryToPrettyString(entry));\n        }\n      }\n      return lines.join('\\n');\n    };\n\n    Journal.prototype.toJSON = function(startRev, endRev) {\n      var entries, entry, j, l, len, r, ref, ref1, ref2;\n      startRev |= 0;\n      endRev |= this.store.lastRevision;\n      entries = [];\n      for (r = j = ref = startRev, ref1 = endRev; j < ref1; r = j += 1) {\n        ref2 = this.store.fetchTransaction(r);\n        for (l = 0, len = ref2.length; l < len; l++) {\n          entry = ref2[l];\n          entries.push(entryToPrettyString(entry));\n        }\n      }\n      return entries;\n    };\n\n    Journal.prototype.save = function(file, success) {\n      var json;\n      json = JSON.stringify(this.toJSON(), null, 4);\n      return __webpack_require__(16).writeFile(file + \".json\", json, \"utf-8\", function(err, data) {\n        if (err) {\n          throw err;\n        }\n        return success(file);\n      });\n    };\n\n    return Journal;\n\n  })(EventEmitter);\n\n  exports.Journal = Journal;\n\n  exports.JournalStore = JournalStore;\n\n  exports.MemoryJournalStore = MemoryJournalStore;\n\n}).call(this);\n\n\n/***/ }),\n/* 48 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(process) {(function() {\n  exports.isBrowser = function() {\n    if (typeof process !== 'undefined' && process.execPath && process.execPath.match(/node|iojs/)) {\n      return false;\n    }\n    return true;\n  };\n\n  exports.deprecated = function(message) {\n    if (exports.isBrowser()) {\n      if (window.NOFLO_FATAL_DEPRECATED) {\n        throw new Error(message);\n      }\n      console.warn(message);\n      return;\n    }\n    if (process.env.NOFLO_FATAL_DEPRECATED) {\n      throw new Error(message);\n    }\n    return console.warn(message);\n  };\n\n}).call(this);\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n/* 49 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = (function() {\n  \"use strict\";\n\n  /*\n   * Generated by PEG.js 0.9.0.\n   *\n   * http://pegjs.org/\n   */\n\n  function peg$subclass(child, parent) {\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function peg$SyntaxError(message, expected, found, location) {\n    this.message  = message;\n    this.expected = expected;\n    this.found    = found;\n    this.location = location;\n    this.name     = \"SyntaxError\";\n\n    if (typeof Error.captureStackTrace === \"function\") {\n      Error.captureStackTrace(this, peg$SyntaxError);\n    }\n  }\n\n  peg$subclass(peg$SyntaxError, Error);\n\n  function peg$parse(input) {\n    var options = arguments.length > 1 ? arguments[1] : {},\n        parser  = this,\n\n        peg$FAILED = {},\n\n        peg$startRuleFunctions = { start: peg$parsestart },\n        peg$startRuleFunction  = peg$parsestart,\n\n        peg$c0 = function() { return parser.getResult();  },\n        peg$c1 = \"EXPORT=\",\n        peg$c2 = { type: \"literal\", value: \"EXPORT=\", description: \"\\\"EXPORT=\\\"\" },\n        peg$c3 = \":\",\n        peg$c4 = { type: \"literal\", value: \":\", description: \"\\\":\\\"\" },\n        peg$c5 = function(priv, pub) {return parser.registerExports(priv,pub)},\n        peg$c6 = \"INPORT=\",\n        peg$c7 = { type: \"literal\", value: \"INPORT=\", description: \"\\\"INPORT=\\\"\" },\n        peg$c8 = \".\",\n        peg$c9 = { type: \"literal\", value: \".\", description: \"\\\".\\\"\" },\n        peg$c10 = function(node, port, pub) {return parser.registerInports(node,port,pub)},\n        peg$c11 = \"OUTPORT=\",\n        peg$c12 = { type: \"literal\", value: \"OUTPORT=\", description: \"\\\"OUTPORT=\\\"\" },\n        peg$c13 = function(node, port, pub) {return parser.registerOutports(node,port,pub)},\n        peg$c14 = \"DEFAULT_INPORT=\",\n        peg$c15 = { type: \"literal\", value: \"DEFAULT_INPORT=\", description: \"\\\"DEFAULT_INPORT=\\\"\" },\n        peg$c16 = function(name) { defaultInPort = name},\n        peg$c17 = \"DEFAULT_OUTPORT=\",\n        peg$c18 = { type: \"literal\", value: \"DEFAULT_OUTPORT=\", description: \"\\\"DEFAULT_OUTPORT=\\\"\" },\n        peg$c19 = function(name) { defaultOutPort = name},\n        peg$c20 = /^[\\n\\r\\u2028\\u2029]/,\n        peg$c21 = { type: \"class\", value: \"[\\\\n\\\\r\\\\u2028\\\\u2029]\", description: \"[\\\\n\\\\r\\\\u2028\\\\u2029]\" },\n        peg$c22 = function(edges) {return parser.registerEdges(edges);},\n        peg$c23 = \",\",\n        peg$c24 = { type: \"literal\", value: \",\", description: \"\\\",\\\"\" },\n        peg$c25 = \"#\",\n        peg$c26 = { type: \"literal\", value: \"#\", description: \"\\\"#\\\"\" },\n        peg$c27 = \"->\",\n        peg$c28 = { type: \"literal\", value: \"->\", description: \"\\\"->\\\"\" },\n        peg$c29 = function(x, y) { return [x,y]; },\n        peg$c30 = function(x, proc, y) { return [{\"tgt\":makeInPort(proc, x)},{\"src\":makeOutPort(proc, y)}]; },\n        peg$c31 = function(proc, port) { return {\"src\":makeOutPort(proc, port)} },\n        peg$c32 = function(port, proc) { return {\"tgt\":makeInPort(proc, port)} },\n        peg$c33 = \"'\",\n        peg$c34 = { type: \"literal\", value: \"'\", description: \"\\\"'\\\"\" },\n        peg$c35 = function(iip) { return {\"data\":iip.join(\"\")} },\n        peg$c36 = function(iip) { return {\"data\":iip} },\n        peg$c37 = function(name) { return name},\n        peg$c38 = /^[a-zA-Z_]/,\n        peg$c39 = { type: \"class\", value: \"[a-zA-Z_]\", description: \"[a-zA-Z_]\" },\n        peg$c40 = /^[a-zA-Z0-9_\\-]/,\n        peg$c41 = { type: \"class\", value: \"[a-zA-Z0-9_\\\\-]\", description: \"[a-zA-Z0-9_\\\\-]\" },\n        peg$c42 = function(name) { return makeName(name)},\n        peg$c43 = function(name, comp) { parser.addNode(name,comp); return name},\n        peg$c44 = function(comp) { return parser.addAnonymousNode(comp, location().start.offset) },\n        peg$c45 = \"(\",\n        peg$c46 = { type: \"literal\", value: \"(\", description: \"\\\"(\\\"\" },\n        peg$c47 = /^[a-zA-Z\\/\\-0-9_]/,\n        peg$c48 = { type: \"class\", value: \"[a-zA-Z/\\\\-0-9_]\", description: \"[a-zA-Z/\\\\-0-9_]\" },\n        peg$c49 = \")\",\n        peg$c50 = { type: \"literal\", value: \")\", description: \"\\\")\\\"\" },\n        peg$c51 = function(comp, meta) { var o = {}; comp ? o.comp = comp.join(\"\") : o.comp = ''; meta ? o.meta = meta.join(\"\").split(',') : null; return o; },\n        peg$c52 = /^[a-zA-Z\\/=_,0-9]/,\n        peg$c53 = { type: \"class\", value: \"[a-zA-Z/=_,0-9]\", description: \"[a-zA-Z/=_,0-9]\" },\n        peg$c54 = function(meta) {return meta},\n        peg$c55 = function(portname, portindex) {return { port: options.caseSensitive? portname : portname.toLowerCase(), index: portindex != null ? portindex : undefined }},\n        peg$c56 = function(port) { return port; },\n        peg$c57 = /^[a-zA-Z.0-9_]/,\n        peg$c58 = { type: \"class\", value: \"[a-zA-Z.0-9_]\", description: \"[a-zA-Z.0-9_]\" },\n        peg$c59 = function(portname) {return makeName(portname)},\n        peg$c60 = \"[\",\n        peg$c61 = { type: \"literal\", value: \"[\", description: \"\\\"[\\\"\" },\n        peg$c62 = /^[0-9]/,\n        peg$c63 = { type: \"class\", value: \"[0-9]\", description: \"[0-9]\" },\n        peg$c64 = \"]\",\n        peg$c65 = { type: \"literal\", value: \"]\", description: \"\\\"]\\\"\" },\n        peg$c66 = function(portindex) {return parseInt(portindex.join(''))},\n        peg$c67 = /^[^\\n\\r\\u2028\\u2029]/,\n        peg$c68 = { type: \"class\", value: \"[^\\\\n\\\\r\\\\u2028\\\\u2029]\", description: \"[^\\\\n\\\\r\\\\u2028\\\\u2029]\" },\n        peg$c69 = /^[\\\\]/,\n        peg$c70 = { type: \"class\", value: \"[\\\\\\\\]\", description: \"[\\\\\\\\]\" },\n        peg$c71 = /^[']/,\n        peg$c72 = { type: \"class\", value: \"[']\", description: \"[']\" },\n        peg$c73 = function() { return \"'\"; },\n        peg$c74 = /^[^']/,\n        peg$c75 = { type: \"class\", value: \"[^']\", description: \"[^']\" },\n        peg$c76 = \" \",\n        peg$c77 = { type: \"literal\", value: \" \", description: \"\\\" \\\"\" },\n        peg$c78 = function(value) { return value; },\n        peg$c79 = \"{\",\n        peg$c80 = { type: \"literal\", value: \"{\", description: \"\\\"{\\\"\" },\n        peg$c81 = \"}\",\n        peg$c82 = { type: \"literal\", value: \"}\", description: \"\\\"}\\\"\" },\n        peg$c83 = { type: \"other\", description: \"whitespace\" },\n        peg$c84 = /^[ \\t\\n\\r]/,\n        peg$c85 = { type: \"class\", value: \"[ \\\\t\\\\n\\\\r]\", description: \"[ \\\\t\\\\n\\\\r]\" },\n        peg$c86 = \"false\",\n        peg$c87 = { type: \"literal\", value: \"false\", description: \"\\\"false\\\"\" },\n        peg$c88 = function() { return false; },\n        peg$c89 = \"null\",\n        peg$c90 = { type: \"literal\", value: \"null\", description: \"\\\"null\\\"\" },\n        peg$c91 = function() { return null;  },\n        peg$c92 = \"true\",\n        peg$c93 = { type: \"literal\", value: \"true\", description: \"\\\"true\\\"\" },\n        peg$c94 = function() { return true;  },\n        peg$c95 = function(head, m) { return m; },\n        peg$c96 = function(head, tail) {\n                  var result = {}, i;\n\n                  result[head.name] = head.value;\n\n                  for (i = 0; i < tail.length; i++) {\n                    result[tail[i].name] = tail[i].value;\n                  }\n\n                  return result;\n                },\n        peg$c97 = function(members) { return members !== null ? members: {}; },\n        peg$c98 = function(name, value) {\n                return { name: name, value: value };\n              },\n        peg$c99 = function(head, v) { return v; },\n        peg$c100 = function(head, tail) { return [head].concat(tail); },\n        peg$c101 = function(values) { return values !== null ? values : []; },\n        peg$c102 = { type: \"other\", description: \"number\" },\n        peg$c103 = function() { return parseFloat(text()); },\n        peg$c104 = /^[1-9]/,\n        peg$c105 = { type: \"class\", value: \"[1-9]\", description: \"[1-9]\" },\n        peg$c106 = /^[eE]/,\n        peg$c107 = { type: \"class\", value: \"[eE]\", description: \"[eE]\" },\n        peg$c108 = \"-\",\n        peg$c109 = { type: \"literal\", value: \"-\", description: \"\\\"-\\\"\" },\n        peg$c110 = \"+\",\n        peg$c111 = { type: \"literal\", value: \"+\", description: \"\\\"+\\\"\" },\n        peg$c112 = \"0\",\n        peg$c113 = { type: \"literal\", value: \"0\", description: \"\\\"0\\\"\" },\n        peg$c114 = { type: \"other\", description: \"string\" },\n        peg$c115 = function(chars) { return chars.join(\"\"); },\n        peg$c116 = \"\\\"\",\n        peg$c117 = { type: \"literal\", value: \"\\\"\", description: \"\\\"\\\\\\\"\\\"\" },\n        peg$c118 = \"\\\\\",\n        peg$c119 = { type: \"literal\", value: \"\\\\\", description: \"\\\"\\\\\\\\\\\"\" },\n        peg$c120 = \"/\",\n        peg$c121 = { type: \"literal\", value: \"/\", description: \"\\\"/\\\"\" },\n        peg$c122 = \"b\",\n        peg$c123 = { type: \"literal\", value: \"b\", description: \"\\\"b\\\"\" },\n        peg$c124 = function() { return \"\\b\"; },\n        peg$c125 = \"f\",\n        peg$c126 = { type: \"literal\", value: \"f\", description: \"\\\"f\\\"\" },\n        peg$c127 = function() { return \"\\f\"; },\n        peg$c128 = \"n\",\n        peg$c129 = { type: \"literal\", value: \"n\", description: \"\\\"n\\\"\" },\n        peg$c130 = function() { return \"\\n\"; },\n        peg$c131 = \"r\",\n        peg$c132 = { type: \"literal\", value: \"r\", description: \"\\\"r\\\"\" },\n        peg$c133 = function() { return \"\\r\"; },\n        peg$c134 = \"t\",\n        peg$c135 = { type: \"literal\", value: \"t\", description: \"\\\"t\\\"\" },\n        peg$c136 = function() { return \"\\t\"; },\n        peg$c137 = \"u\",\n        peg$c138 = { type: \"literal\", value: \"u\", description: \"\\\"u\\\"\" },\n        peg$c139 = function(digits) {\n                    return String.fromCharCode(parseInt(digits, 16));\n                  },\n        peg$c140 = function(sequence) { return sequence; },\n        peg$c141 = /^[^\\0-\\x1F\"\\\\]/,\n        peg$c142 = { type: \"class\", value: \"[^\\\\0-\\\\x1F\\\\x22\\\\x5C]\", description: \"[^\\\\0-\\\\x1F\\\\x22\\\\x5C]\" },\n        peg$c143 = /^[0-9a-f]/i,\n        peg$c144 = { type: \"class\", value: \"[0-9a-f]i\", description: \"[0-9a-f]i\" },\n\n        peg$currPos          = 0,\n        peg$savedPos         = 0,\n        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],\n        peg$maxFailPos       = 0,\n        peg$maxFailExpected  = [],\n        peg$silentFails      = 0,\n\n        peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$savedPos, peg$currPos);\n    }\n\n    function location() {\n      return peg$computeLocation(peg$savedPos, peg$currPos);\n    }\n\n    function expected(description) {\n      throw peg$buildException(\n        null,\n        [{ type: \"other\", description: description }],\n        input.substring(peg$savedPos, peg$currPos),\n        peg$computeLocation(peg$savedPos, peg$currPos)\n      );\n    }\n\n    function error(message) {\n      throw peg$buildException(\n        message,\n        null,\n        input.substring(peg$savedPos, peg$currPos),\n        peg$computeLocation(peg$savedPos, peg$currPos)\n      );\n    }\n\n    function peg$computePosDetails(pos) {\n      var details = peg$posDetailsCache[pos],\n          p, ch;\n\n      if (details) {\n        return details;\n      } else {\n        p = pos - 1;\n        while (!peg$posDetailsCache[p]) {\n          p--;\n        }\n\n        details = peg$posDetailsCache[p];\n        details = {\n          line:   details.line,\n          column: details.column,\n          seenCR: details.seenCR\n        };\n\n        while (p < pos) {\n          ch = input.charAt(p);\n          if (ch === \"\\n\") {\n            if (!details.seenCR) { details.line++; }\n            details.column = 1;\n            details.seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            details.line++;\n            details.column = 1;\n            details.seenCR = true;\n          } else {\n            details.column++;\n            details.seenCR = false;\n          }\n\n          p++;\n        }\n\n        peg$posDetailsCache[pos] = details;\n        return details;\n      }\n    }\n\n    function peg$computeLocation(startPos, endPos) {\n      var startPosDetails = peg$computePosDetails(startPos),\n          endPosDetails   = peg$computePosDetails(endPos);\n\n      return {\n        start: {\n          offset: startPos,\n          line:   startPosDetails.line,\n          column: startPosDetails.column\n        },\n        end: {\n          offset: endPos,\n          line:   endPosDetails.line,\n          column: endPosDetails.column\n        }\n      };\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildException(message, expected, found, location) {\n      function cleanupExpected(expected) {\n        var i = 1;\n\n        expected.sort(function(a, b) {\n          if (a.description < b.description) {\n            return -1;\n          } else if (a.description > b.description) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n\n        while (i < expected.length) {\n          if (expected[i - 1] === expected[i]) {\n            expected.splice(i, 1);\n          } else {\n            i++;\n          }\n        }\n      }\n\n      function buildMessage(expected, found) {\n        function stringEscape(s) {\n          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }\n\n          return s\n            .replace(/\\\\/g,   '\\\\\\\\')\n            .replace(/\"/g,    '\\\\\"')\n            .replace(/\\x08/g, '\\\\b')\n            .replace(/\\t/g,   '\\\\t')\n            .replace(/\\n/g,   '\\\\n')\n            .replace(/\\f/g,   '\\\\f')\n            .replace(/\\r/g,   '\\\\r')\n            .replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function(ch) { return '\\\\x0' + hex(ch); })\n            .replace(/[\\x10-\\x1F\\x80-\\xFF]/g,    function(ch) { return '\\\\x'  + hex(ch); })\n            .replace(/[\\u0100-\\u0FFF]/g,         function(ch) { return '\\\\u0' + hex(ch); })\n            .replace(/[\\u1000-\\uFFFF]/g,         function(ch) { return '\\\\u'  + hex(ch); });\n        }\n\n        var expectedDescs = new Array(expected.length),\n            expectedDesc, foundDesc, i;\n\n        for (i = 0; i < expected.length; i++) {\n          expectedDescs[i] = expected[i].description;\n        }\n\n        expectedDesc = expected.length > 1\n          ? expectedDescs.slice(0, -1).join(\", \")\n              + \" or \"\n              + expectedDescs[expected.length - 1]\n          : expectedDescs[0];\n\n        foundDesc = found ? \"\\\"\" + stringEscape(found) + \"\\\"\" : \"end of input\";\n\n        return \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\n      }\n\n      if (expected !== null) {\n        cleanupExpected(expected);\n      }\n\n      return new peg$SyntaxError(\n        message !== null ? message : buildMessage(expected, found),\n        expected,\n        found,\n        location\n      );\n    }\n\n    function peg$parsestart() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parseline();\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parseline();\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c0();\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parseline() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n      s0 = peg$currPos;\n      s1 = peg$parse_();\n      if (s1 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 7) === peg$c1) {\n          s2 = peg$c1;\n          peg$currPos += 7;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c2); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseportName();\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 58) {\n              s4 = peg$c3;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c4); }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseportName();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse_();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseLineTerminator();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c5(s3, s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parse_();\n        if (s1 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 7) === peg$c6) {\n            s2 = peg$c6;\n            peg$currPos += 7;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c7); }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsenode();\n            if (s3 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 46) {\n                s4 = peg$c8;\n                peg$currPos++;\n              } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c9); }\n              }\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseportName();\n                if (s5 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 58) {\n                    s6 = peg$c3;\n                    peg$currPos++;\n                  } else {\n                    s6 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c4); }\n                  }\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseportName();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse_();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseLineTerminator();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c10(s3, s5, s7);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parse_();\n          if (s1 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 8) === peg$c11) {\n              s2 = peg$c11;\n              peg$currPos += 8;\n            } else {\n              s2 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c12); }\n            }\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parsenode();\n              if (s3 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 46) {\n                  s4 = peg$c8;\n                  peg$currPos++;\n                } else {\n                  s4 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c9); }\n                }\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseportName();\n                  if (s5 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 58) {\n                      s6 = peg$c3;\n                      peg$currPos++;\n                    } else {\n                      s6 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c4); }\n                    }\n                    if (s6 !== peg$FAILED) {\n                      s7 = peg$parseportName();\n                      if (s7 !== peg$FAILED) {\n                        s8 = peg$parse_();\n                        if (s8 !== peg$FAILED) {\n                          s9 = peg$parseLineTerminator();\n                          if (s9 === peg$FAILED) {\n                            s9 = null;\n                          }\n                          if (s9 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c13(s3, s5, s7);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parse_();\n            if (s1 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 15) === peg$c14) {\n                s2 = peg$c14;\n                peg$currPos += 15;\n              } else {\n                s2 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c15); }\n              }\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseportName();\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parse_();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parseLineTerminator();\n                    if (s5 === peg$FAILED) {\n                      s5 = null;\n                    }\n                    if (s5 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c16(s3);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              s1 = peg$parse_();\n              if (s1 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 16) === peg$c17) {\n                  s2 = peg$c17;\n                  peg$currPos += 16;\n                } else {\n                  s2 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c18); }\n                }\n                if (s2 !== peg$FAILED) {\n                  s3 = peg$parseportName();\n                  if (s3 !== peg$FAILED) {\n                    s4 = peg$parse_();\n                    if (s4 !== peg$FAILED) {\n                      s5 = peg$parseLineTerminator();\n                      if (s5 === peg$FAILED) {\n                        s5 = null;\n                      }\n                      if (s5 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c19(s3);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                s1 = peg$parsecomment();\n                if (s1 !== peg$FAILED) {\n                  if (peg$c20.test(input.charAt(peg$currPos))) {\n                    s2 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s2 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c21); }\n                  }\n                  if (s2 === peg$FAILED) {\n                    s2 = null;\n                  }\n                  if (s2 !== peg$FAILED) {\n                    s1 = [s1, s2];\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  s1 = peg$parse_();\n                  if (s1 !== peg$FAILED) {\n                    if (peg$c20.test(input.charAt(peg$currPos))) {\n                      s2 = input.charAt(peg$currPos);\n                      peg$currPos++;\n                    } else {\n                      s2 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c21); }\n                    }\n                    if (s2 !== peg$FAILED) {\n                      s1 = [s1, s2];\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    s1 = peg$parse_();\n                    if (s1 !== peg$FAILED) {\n                      s2 = peg$parseconnection();\n                      if (s2 !== peg$FAILED) {\n                        s3 = peg$parse_();\n                        if (s3 !== peg$FAILED) {\n                          s4 = peg$parseLineTerminator();\n                          if (s4 === peg$FAILED) {\n                            s4 = null;\n                          }\n                          if (s4 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c22(s2);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseLineTerminator() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = peg$parse_();\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 44) {\n          s2 = peg$c23;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c24); }\n        }\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecomment();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            if (peg$c20.test(input.charAt(peg$currPos))) {\n              s4 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c21); }\n            }\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              s1 = [s1, s2, s3, s4];\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsecomment() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = peg$parse_();\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 35) {\n          s2 = peg$c25;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c26); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parseanychar();\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parseanychar();\n          }\n          if (s3 !== peg$FAILED) {\n            s1 = [s1, s2, s3];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseconnection() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      s1 = peg$parsesource();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c27) {\n            s3 = peg$c27;\n            peg$currPos += 2;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c28); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseconnection();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c29(s1, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsedestination();\n      }\n\n      return s0;\n    }\n\n    function peg$parsesource() {\n      var s0;\n\n      s0 = peg$parsebridge();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseoutport();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseiip();\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsedestination() {\n      var s0;\n\n      s0 = peg$parseinport();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebridge();\n      }\n\n      return s0;\n    }\n\n    function peg$parsebridge() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$parseport__();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsenode();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__port();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c30(s1, s2, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseport__();\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsenodeWithComponent();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parse__port();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c30(s1, s2, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseoutport() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = peg$parsenode();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__port();\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c31(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseinport() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = peg$parseport__();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsenode();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c32(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseiip() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 39) {\n        s1 = peg$c33;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c34); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parseiipchar();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parseiipchar();\n        }\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 39) {\n            s3 = peg$c33;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c34); }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c35(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseJSON_text();\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c36(s1);\n        }\n        s0 = s1;\n      }\n\n      return s0;\n    }\n\n    function peg$parsenode() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      s1 = peg$parsenodeNameAndComponent();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c37(s1);\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsenodeName();\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c37(s1);\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parsenodeComponent();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c37(s1);\n          }\n          s0 = s1;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsenodeName() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (peg$c38.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c39); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        if (peg$c40.test(input.charAt(peg$currPos))) {\n          s4 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c41); }\n        }\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          if (peg$c40.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c41); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c42(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsenodeNameAndComponent() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = peg$parsenodeName();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsecomponent();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c43(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsenodeComponent() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      s1 = peg$parsecomponent();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c44(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsenodeWithComponent() {\n      var s0;\n\n      s0 = peg$parsenodeNameAndComponent();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsenodeComponent();\n      }\n\n      return s0;\n    }\n\n    function peg$parsecomponent() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s1 = peg$c45;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c46); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        if (peg$c47.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c48); }\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c47.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c48); }\n          }\n        }\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecompMeta();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 41) {\n              s4 = peg$c49;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c50); }\n            }\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c51(s2, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsecompMeta() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 58) {\n        s1 = peg$c3;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c4); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        if (peg$c52.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c53); }\n        }\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            if (peg$c52.test(input.charAt(peg$currPos))) {\n              s3 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c53); }\n            }\n          }\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c54(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseport() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = peg$parseportName();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseportIndex();\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c55(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseport__() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = peg$parseport();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c56(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parse__port() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = peg$parse__();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseport();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c56(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseportName() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (peg$c38.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c39); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        if (peg$c57.test(input.charAt(peg$currPos))) {\n          s4 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c58); }\n        }\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          if (peg$c57.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c58); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c59(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parseportIndex() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 91) {\n        s1 = peg$c60;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c61); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        if (peg$c62.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c63); }\n        }\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            if (peg$c62.test(input.charAt(peg$currPos))) {\n              s3 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c63); }\n            }\n          }\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 93) {\n            s3 = peg$c64;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c65); }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c66(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseanychar() {\n      var s0;\n\n      if (peg$c67.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c68); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseiipchar() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      if (peg$c69.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c70); }\n      }\n      if (s1 !== peg$FAILED) {\n        if (peg$c71.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c72); }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c73();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        if (peg$c74.test(input.charAt(peg$currPos))) {\n          s0 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c75); }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parse_() {\n      var s0, s1;\n\n      s0 = [];\n      if (input.charCodeAt(peg$currPos) === 32) {\n        s1 = peg$c76;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c77); }\n      }\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        if (input.charCodeAt(peg$currPos) === 32) {\n          s1 = peg$c76;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c77); }\n        }\n      }\n      if (s0 === peg$FAILED) {\n        s0 = null;\n      }\n\n      return s0;\n    }\n\n    function peg$parse__() {\n      var s0, s1;\n\n      s0 = [];\n      if (input.charCodeAt(peg$currPos) === 32) {\n        s1 = peg$c76;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c77); }\n      }\n      if (s1 !== peg$FAILED) {\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n          if (input.charCodeAt(peg$currPos) === 32) {\n            s1 = peg$c76;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c77); }\n          }\n        }\n      } else {\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseJSON_text() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$parsews();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsevalue();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsews();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c78(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsebegin_array() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$parsews();\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 91) {\n          s2 = peg$c60;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c61); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsews();\n          if (s3 !== peg$FAILED) {\n            s1 = [s1, s2, s3];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsebegin_object() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$parsews();\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 123) {\n          s2 = peg$c79;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c80); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsews();\n          if (s3 !== peg$FAILED) {\n            s1 = [s1, s2, s3];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseend_array() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$parsews();\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 93) {\n          s2 = peg$c64;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c65); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsews();\n          if (s3 !== peg$FAILED) {\n            s1 = [s1, s2, s3];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseend_object() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$parsews();\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 125) {\n          s2 = peg$c81;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c82); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsews();\n          if (s3 !== peg$FAILED) {\n            s1 = [s1, s2, s3];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsename_separator() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$parsews();\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 58) {\n          s2 = peg$c3;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c4); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsews();\n          if (s3 !== peg$FAILED) {\n            s1 = [s1, s2, s3];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsevalue_separator() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$parsews();\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 44) {\n          s2 = peg$c23;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c24); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsews();\n          if (s3 !== peg$FAILED) {\n            s1 = [s1, s2, s3];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsews() {\n      var s0, s1;\n\n      peg$silentFails++;\n      s0 = [];\n      if (peg$c84.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c85); }\n      }\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        if (peg$c84.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c85); }\n        }\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c83); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsevalue() {\n      var s0;\n\n      s0 = peg$parsefalse();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsenull();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsetrue();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseobject();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsearray();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsenumber();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parsestring();\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsefalse() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 5) === peg$c86) {\n        s1 = peg$c86;\n        peg$currPos += 5;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c87); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c88();\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsenull() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 4) === peg$c89) {\n        s1 = peg$c89;\n        peg$currPos += 4;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c90); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c91();\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsetrue() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 4) === peg$c92) {\n        s1 = peg$c92;\n        peg$currPos += 4;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c93); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c94();\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parseobject() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      s0 = peg$currPos;\n      s1 = peg$parsebegin_object();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = peg$parsemember();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parsevalue_separator();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsemember();\n            if (s7 !== peg$FAILED) {\n              peg$savedPos = s5;\n              s6 = peg$c95(s3, s7);\n              s5 = s6;\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parsevalue_separator();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsemember();\n              if (s7 !== peg$FAILED) {\n                peg$savedPos = s5;\n                s6 = peg$c95(s3, s7);\n                s5 = s6;\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s2;\n            s3 = peg$c96(s3, s4);\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseend_object();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c97(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsemember() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$parsestring();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsename_separator();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsevalue();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c98(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsearray() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      s0 = peg$currPos;\n      s1 = peg$parsebegin_array();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = peg$parsevalue();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parsevalue_separator();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsevalue();\n            if (s7 !== peg$FAILED) {\n              peg$savedPos = s5;\n              s6 = peg$c99(s3, s7);\n              s5 = s6;\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parsevalue_separator();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsevalue();\n              if (s7 !== peg$FAILED) {\n                peg$savedPos = s5;\n                s6 = peg$c99(s3, s7);\n                s5 = s6;\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s2;\n            s3 = peg$c100(s3, s4);\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseend_array();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c101(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsenumber() {\n      var s0, s1, s2, s3, s4;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$parseminus();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseint();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsefrac();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseexp();\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c103();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c102); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsedecimal_point() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 46) {\n        s0 = peg$c8;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c9); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsedigit1_9() {\n      var s0;\n\n      if (peg$c104.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c105); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsee() {\n      var s0;\n\n      if (peg$c106.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c107); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseexp() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = peg$parsee();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseminus();\n        if (s2 === peg$FAILED) {\n          s2 = peg$parseplus();\n        }\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parseDIGIT();\n          if (s4 !== peg$FAILED) {\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              s4 = peg$parseDIGIT();\n            }\n          } else {\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            s1 = [s1, s2, s3];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsefrac() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$parsedecimal_point();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parseDIGIT();\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$parseDIGIT();\n          }\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseint() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$parsezero();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsedigit1_9();\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$parseDIGIT();\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$parseDIGIT();\n          }\n          if (s2 !== peg$FAILED) {\n            s1 = [s1, s2];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseminus() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s0 = peg$c108;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c109); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseplus() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 43) {\n        s0 = peg$c110;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c111); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsezero() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 48) {\n        s0 = peg$c112;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c113); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsestring() {\n      var s0, s1, s2, s3;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = peg$parsequotation_mark();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parsechar();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parsechar();\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsequotation_mark();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c115(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c114); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsechar() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n      s0 = peg$parseunescaped();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseescape();\n        if (s1 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s2 = peg$c116;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c117); }\n          }\n          if (s2 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 92) {\n              s2 = peg$c118;\n              peg$currPos++;\n            } else {\n              s2 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c119); }\n            }\n            if (s2 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 47) {\n                s2 = peg$c120;\n                peg$currPos++;\n              } else {\n                s2 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c121); }\n              }\n              if (s2 === peg$FAILED) {\n                s2 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 98) {\n                  s3 = peg$c122;\n                  peg$currPos++;\n                } else {\n                  s3 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c123); }\n                }\n                if (s3 !== peg$FAILED) {\n                  peg$savedPos = s2;\n                  s3 = peg$c124();\n                }\n                s2 = s3;\n                if (s2 === peg$FAILED) {\n                  s2 = peg$currPos;\n                  if (input.charCodeAt(peg$currPos) === 102) {\n                    s3 = peg$c125;\n                    peg$currPos++;\n                  } else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c126); }\n                  }\n                  if (s3 !== peg$FAILED) {\n                    peg$savedPos = s2;\n                    s3 = peg$c127();\n                  }\n                  s2 = s3;\n                  if (s2 === peg$FAILED) {\n                    s2 = peg$currPos;\n                    if (input.charCodeAt(peg$currPos) === 110) {\n                      s3 = peg$c128;\n                      peg$currPos++;\n                    } else {\n                      s3 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c129); }\n                    }\n                    if (s3 !== peg$FAILED) {\n                      peg$savedPos = s2;\n                      s3 = peg$c130();\n                    }\n                    s2 = s3;\n                    if (s2 === peg$FAILED) {\n                      s2 = peg$currPos;\n                      if (input.charCodeAt(peg$currPos) === 114) {\n                        s3 = peg$c131;\n                        peg$currPos++;\n                      } else {\n                        s3 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c132); }\n                      }\n                      if (s3 !== peg$FAILED) {\n                        peg$savedPos = s2;\n                        s3 = peg$c133();\n                      }\n                      s2 = s3;\n                      if (s2 === peg$FAILED) {\n                        s2 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 116) {\n                          s3 = peg$c134;\n                          peg$currPos++;\n                        } else {\n                          s3 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c135); }\n                        }\n                        if (s3 !== peg$FAILED) {\n                          peg$savedPos = s2;\n                          s3 = peg$c136();\n                        }\n                        s2 = s3;\n                        if (s2 === peg$FAILED) {\n                          s2 = peg$currPos;\n                          if (input.charCodeAt(peg$currPos) === 117) {\n                            s3 = peg$c137;\n                            peg$currPos++;\n                          } else {\n                            s3 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c138); }\n                          }\n                          if (s3 !== peg$FAILED) {\n                            s4 = peg$currPos;\n                            s5 = peg$currPos;\n                            s6 = peg$parseHEXDIG();\n                            if (s6 !== peg$FAILED) {\n                              s7 = peg$parseHEXDIG();\n                              if (s7 !== peg$FAILED) {\n                                s8 = peg$parseHEXDIG();\n                                if (s8 !== peg$FAILED) {\n                                  s9 = peg$parseHEXDIG();\n                                  if (s9 !== peg$FAILED) {\n                                    s6 = [s6, s7, s8, s9];\n                                    s5 = s6;\n                                  } else {\n                                    peg$currPos = s5;\n                                    s5 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s5;\n                                  s5 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s5;\n                                s5 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s5;\n                              s5 = peg$FAILED;\n                            }\n                            if (s5 !== peg$FAILED) {\n                              s4 = input.substring(s4, peg$currPos);\n                            } else {\n                              s4 = s5;\n                            }\n                            if (s4 !== peg$FAILED) {\n                              peg$savedPos = s2;\n                              s3 = peg$c139(s4);\n                              s2 = s3;\n                            } else {\n                              peg$currPos = s2;\n                              s2 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s2;\n                            s2 = peg$FAILED;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c140(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseescape() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 92) {\n        s0 = peg$c118;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c119); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsequotation_mark() {\n      var s0;\n\n      if (input.charCodeAt(peg$currPos) === 34) {\n        s0 = peg$c116;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c117); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseunescaped() {\n      var s0;\n\n      if (peg$c141.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c142); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseDIGIT() {\n      var s0;\n\n      if (peg$c62.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c63); }\n      }\n\n      return s0;\n    }\n\n    function peg$parseHEXDIG() {\n      var s0;\n\n      if (peg$c143.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c144); }\n      }\n\n      return s0;\n    }\n\n\n      var parser, edges, nodes;\n\n      var defaultInPort = \"IN\", defaultOutPort = \"OUT\";\n\n      parser = this;\n      delete parser.exports;\n      delete parser.inports;\n      delete parser.outports;\n\n      edges = parser.edges = [];\n\n      nodes = {};\n\n      var serialize, indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n      parser.serialize = function(graph) {\n        var conn, getInOutName, getName, i, inPort, input, len, name, namedComponents, outPort, output, process, ref, ref1, ref2, src, srcName, srcPort, srcProcess, tgt, tgtName, tgtPort, tgtProcess;\n        if (options == null) {\n          options = {};\n        }\n        if (typeof(graph) === 'string') {\n          input = JSON.parse(graph);\n        } else {\n          input = graph;\n        }\n        namedComponents = [];\n        output = \"\";\n        getName = function(name) {\n          if (input.processes[name].metadata != null) {\n            name = input.processes[name].metadata.label;\n          }\n          if (name.indexOf('/') > -1) {\n            name = name.split('/').pop();\n          }\n          return name;\n        };\n        getInOutName = function(name, data) {\n          if ((data.process != null) && (input.processes[data.process].metadata != null)) {\n            name = input.processes[data.process].metadata.label;\n          } else if (data.process != null) {\n            name = data.process;\n          }\n          if (name.indexOf('/') > -1) {\n            name = name.split('/').pop();\n          }\n          return name;\n        };\n        ref = input.inports;\n        for (name in ref) {\n          inPort = ref[name];\n          process = getInOutName(name, inPort);\n          name = name.toUpperCase();\n          inPort.port = inPort.port.toUpperCase();\n          output += \"INPORT=\" + process + \".\" + inPort.port + \":\" + name + \"\\n\";\n        }\n        ref1 = input.outports;\n        for (name in ref1) {\n          outPort = ref1[name];\n          process = getInOutName(name, inPort);\n          name = name.toUpperCase();\n          outPort.port = outPort.port.toUpperCase();\n          output += \"OUTPORT=\" + process + \".\" + outPort.port + \":\" + name + \"\\n\";\n        }\n        output += \"\\n\";\n        ref2 = input.connections;\n        for (i = 0, len = ref2.length; i < len; i++) {\n          conn = ref2[i];\n          if (conn.data != null) {\n            tgtPort = conn.tgt.port.toUpperCase();\n            tgtName = conn.tgt.process;\n            tgtProcess = input.processes[tgtName].component;\n            tgt = getName(tgtName);\n            if (indexOf.call(namedComponents, tgtProcess) < 0) {\n              tgt += \"(\" + tgtProcess + \")\";\n              namedComponents.push(tgtProcess);\n            }\n            output += '\"' + conn.data + '\"' + (\" -> \" + tgtPort + \" \" + tgt + \"\\n\");\n          } else {\n            srcPort = conn.src.port.toUpperCase();\n            srcName = conn.src.process;\n            srcProcess = input.processes[srcName].component;\n            src = getName(srcName);\n            if (indexOf.call(namedComponents, srcProcess) < 0) {\n              src += \"(\" + srcProcess + \")\";\n              namedComponents.push(srcProcess);\n            }\n            tgtPort = conn.tgt.port.toUpperCase();\n            tgtName = conn.tgt.process;\n            tgtProcess = input.processes[tgtName].component;\n            tgt = getName(tgtName);\n            if (indexOf.call(namedComponents, tgtProcess) < 0) {\n              tgt += \"(\" + tgtProcess + \")\";\n              namedComponents.push(tgtProcess);\n            }\n            output += src + \" \" + srcPort + \" -> \" + tgtPort + \" \" + tgt + \"\\n\";\n          }\n        }\n        return output;\n      };\n\n      parser.addNode = function (nodeName, comp) {\n        if (!nodes[nodeName]) {\n          nodes[nodeName] = {}\n        }\n        if (!!comp.comp) {\n          nodes[nodeName].component = comp.comp;\n        }\n        if (!!comp.meta) {\n          var metadata = {};\n          for (var i = 0; i < comp.meta.length; i++) {\n            var item = comp.meta[i].split('=');\n            if (item.length === 1) {\n              item = ['routes', item[0]];\n            }\n            var key = item[0];\n            var value = item[1];\n            if (key==='x' || key==='y') {\n              value = parseFloat(value);\n            }\n            metadata[key] = value;\n          }\n          nodes[nodeName].metadata=metadata;\n        }\n\n      }\n\n      var anonymousIndexes = {};\n      var anonymousNodeNames = {};\n      parser.addAnonymousNode = function(comp, offset) {\n          if (!anonymousNodeNames[offset]) {\n              var componentName = comp.comp.replace(/[^a-zA-Z0-9]+/, \"_\");\n              anonymousIndexes[componentName] = (anonymousIndexes[componentName] || 0) + 1;\n              anonymousNodeNames[offset] = \"_\" + componentName + \"_\" + anonymousIndexes[componentName];\n              this.addNode(anonymousNodeNames[offset], comp);\n          }\n          return anonymousNodeNames[offset];\n      }\n\n      parser.getResult = function () {\n        var result = {\n          processes: nodes,\n          connections: parser.processEdges(),\n          exports: parser.exports,\n          inports: parser.inports,\n          outports: parser.outports\n        };\n\n        var validateSchema = parser.validateSchema; // default\n        if (typeof(options.validateSchema) !== 'undefined') { validateSchema = options.validateSchema; } // explicit option\n        if (validateSchema) {\n          if (typeof(tv4) === 'undefined') {\n            var tv4 = __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\"tv4\\\"\"); e.code = 'MODULE_NOT_FOUND';; throw e; }()));\n          }\n          var schema = __webpack_require__(50);\n          var validation = tv4.validateMultiple(result, schema);\n          if (!validation.valid) {\n            throw new Error(\"fbp: Did not validate againt graph schema:\\n\" + JSON.stringify(validation.errors, null, 2));\n          }\n        }\n        result.caseSensitive = options.caseSensitive;\n        return result;\n      }\n\n      var flatten = function (array, isShallow) {\n        var index = -1,\n          length = array ? array.length : 0,\n          result = [];\n\n        while (++index < length) {\n          var value = array[index];\n\n          if (value instanceof Array) {\n            Array.prototype.push.apply(result, isShallow ? value : flatten(value));\n          }\n          else {\n            result.push(value);\n          }\n        }\n        return result;\n      }\n\n      parser.registerExports = function (priv, pub) {\n        if (!parser.exports) {\n          parser.exports = [];\n        }\n\n        if (!options.caseSensitive) {\n          priv = priv.toLowerCase();\n          pub = pub.toLowerCase();\n        }\n\n        parser.exports.push({private:priv, public:pub});\n      }\n      parser.registerInports = function (node, port, pub) {\n        if (!parser.inports) {\n          parser.inports = {};\n        }\n\n        if (!options.caseSensitive) {\n          pub = pub.toLowerCase();\n          port = port.toLowerCase();\n        }\n\n        parser.inports[pub] = {process:node, port:port};\n      }\n      parser.registerOutports = function (node, port, pub) {\n        if (!parser.outports) {\n          parser.outports = {};\n        }\n\n        if (!options.caseSensitive) {\n          pub = pub.toLowerCase();\n          port = port.toLowerCase();\n        }\n\n        parser.outports[pub] = {process:node, port:port};\n      }\n\n      parser.registerEdges = function (edges) {\n        if (Array.isArray(edges)) {\n          edges.forEach(function (o, i) {\n            parser.edges.push(o);\n          });\n        }\n      }\n\n      parser.processEdges = function () {\n        var flats, grouped;\n        flats = flatten(parser.edges);\n        grouped = [];\n        var current = {};\n        for (var i = 1; i < flats.length; i += 1) {\n            // skip over default ports at the beginning of lines (could also handle this in grammar)\n            if ((\"src\" in flats[i - 1] || \"data\" in flats[i - 1]) && \"tgt\" in flats[i]) {\n                flats[i - 1].tgt = flats[i].tgt;\n                grouped.push(flats[i - 1]);\n                i++;\n            }\n        }\n        return grouped;\n      }\n\n      function makeName(s) {\n        return s[0] + s[1].join(\"\");\n      }\n\n      function makePort(process, port, defaultPort) {\n        if (!options.caseSensitive) {\n          defaultPort = defaultPort.toLowerCase()\n        }\n        var p = {\n            process: process,\n            port: port ? port.port : defaultPort\n        };\n        if (port && port.index != null) {\n            p.index = port.index;\n        }\n        return p;\n    }\n\n      function makeInPort(process, port) {\n          return makePort(process, port, defaultInPort);\n      }\n      function makeOutPort(process, port) {\n          return makePort(process, port, defaultOutPort);\n      }\n\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail({ type: \"end\", description: \"end of input\" });\n      }\n\n      throw peg$buildException(\n        null,\n        peg$maxFailExpected,\n        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n        peg$maxFailPos < input.length\n          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n      );\n    }\n  }\n\n  return {\n    SyntaxError: peg$SyntaxError,\n    parse:       peg$parse\n  };\n})();\n\n/***/ }),\n/* 50 */\n/***/ (function(module, exports) {\n\nmodule.exports = {\n\t\"$schema\": \"http://json-schema.org/draft-04/schema\",\n\t\"id\": \"graph.json\",\n\t\"title\": \"FBP graph\",\n\t\"description\": \"A graph of FBP processes and connections between them.\\nThis is the primary way of specifying FBP programs.\\n\",\n\t\"name\": \"graph\",\n\t\"type\": \"object\",\n\t\"additionalProperties\": false,\n\t\"properties\": {\n\t\t\"properties\": {\n\t\t\t\"type\": \"object\",\n\t\t\t\"description\": \"User-defined properties attached to the graph.\",\n\t\t\t\"additionalProperties\": true,\n\t\t\t\"properties\": {\n\t\t\t\t\"name\": {\n\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"inports\": {\n\t\t\t\"type\": [\n\t\t\t\t\"object\",\n\t\t\t\t\"undefined\"\n\t\t\t],\n\t\t\t\"description\": \"Exported inports of the graph\",\n\t\t\t\"additionalProperties\": true,\n\t\t\t\"patternProperties\": {\n\t\t\t\t\"[a-z0-9]+\": {\n\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\"process\": {\n\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"port\": {\n\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"metadata\": {\n\t\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\t\"additionalProperties\": true\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"outports\": {\n\t\t\t\"type\": [\n\t\t\t\t\"object\",\n\t\t\t\t\"undefined\"\n\t\t\t],\n\t\t\t\"description\": \"Exported outports of the graph\",\n\t\t\t\"additionalProperties\": true,\n\t\t\t\"patternProperties\": {\n\t\t\t\t\"[a-z0-9]+\": {\n\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\"process\": {\n\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"port\": {\n\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"metadata\": {\n\t\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\t\"additionalProperties\": true\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"exports\": {\n\t\t\t\"type\": [\n\t\t\t\t\"array\",\n\t\t\t\t\"undefined\"\n\t\t\t],\n\t\t\t\"description\": \"Deprecated, use inports and outports instead\"\n\t\t},\n\t\t\"groups\": {\n\t\t\t\"type\": \"array\",\n\t\t\t\"description\": \"List of groups of processes\",\n\t\t\t\"items\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"additionalProperties\": false,\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"name\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"nodes\": {\n\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"metadata\": {\n\t\t\t\t\t\t\"additionalProperties\": true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"processes\": {\n\t\t\t\"type\": \"object\",\n\t\t\t\"description\": \"The processes of this graph.\\nEach process is an instance of a component.\\n\",\n\t\t\t\"additionalProperties\": false,\n\t\t\t\"patternProperties\": {\n\t\t\t\t\"[a-zA-Z0-9_]+\": {\n\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\"component\": {\n\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"metadata\": {\n\t\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\t\"additionalProperties\": true\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"connections\": {\n\t\t\t\"type\": \"array\",\n\t\t\t\"description\": \"Connections of the graph.\\nA connection either connects ports of two processes, or specifices an IIP as initial input packet to a port.\\n\",\n\t\t\t\"items\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"additionalProperties\": false,\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"src\": {\n\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\"additionalProperties\": false,\n\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\"process\": {\n\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"port\": {\n\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"index\": {\n\t\t\t\t\t\t\t\t\"type\": \"integer\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"tgt\": {\n\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\"additionalProperties\": false,\n\t\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\t\"process\": {\n\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"port\": {\n\t\t\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"index\": {\n\t\t\t\t\t\t\t\t\"type\": \"integer\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"data\": {},\n\t\t\t\t\t\"metadata\": {\n\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\"additionalProperties\": true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/***/ }),\n/* 51 */\n/***/ (function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ }),\n/* 52 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(53)\nvar ieee754 = __webpack_require__(54)\nvar isArray = __webpack_require__(55)\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(51)))\n\n/***/ }),\n/* 53 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction placeHoldersCount (b64) {\n  var len = b64.length\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n}\n\nfunction byteLength (b64) {\n  // base64 is 4/3 + up to two characters of the original data\n  return b64.length * 3 / 4 - placeHoldersCount(b64)\n}\n\nfunction toByteArray (b64) {\n  var i, j, l, tmp, placeHolders, arr\n  var len = b64.length\n  placeHolders = placeHoldersCount(b64)\n\n  arr = new Arr(len * 3 / 4 - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n\n\n/***/ }),\n/* 54 */\n/***/ (function(module, exports) {\n\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n/***/ }),\n/* 55 */\n/***/ (function(module, exports) {\n\nvar toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n/***/ }),\n/* 56 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar exported = {\n  noflo: __webpack_require__(33)\n};\n\nif (window) {\n  window.require = function (moduleName) {\n    if (exported[moduleName]) {\n      return exported[moduleName];\n    }\n    throw new Error('Module ' + moduleName + ' not available');\n  };\n}\n\n\n\n/***/ })\n/******/ ]);","/home/travis/build/npmtest/node-npmtest-noflo/node_modules/noflo/components/Graph.js":"(function() {\n  var Graph, noflo,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  noflo = require(\"../lib/NoFlo\");\n\n  Graph = (function(superClass) {\n    extend(Graph, superClass);\n\n    function Graph(metadata1) {\n      this.metadata = metadata1;\n      this.network = null;\n      this.ready = true;\n      this.started = false;\n      this.starting = false;\n      this.baseDir = null;\n      this.loader = null;\n      this.load = 0;\n      this.inPorts = new noflo.InPorts({\n        graph: {\n          datatype: 'all',\n          description: 'NoFlo graph definition to be used with the subgraph component',\n          required: true\n        }\n      });\n      this.outPorts = new noflo.OutPorts;\n      this.inPorts.graph.on('ip', (function(_this) {\n        return function(packet) {\n          if (packet.type !== 'data') {\n            return;\n          }\n          return _this.setGraph(packet.data, function(err) {\n            if (err) {\n              return _this.error(err);\n            }\n          });\n        };\n      })(this));\n    }\n\n    Graph.prototype.setGraph = function(graph, callback) {\n      this.ready = false;\n      if (typeof graph === 'object') {\n        if (typeof graph.addNode === 'function') {\n          this.createNetwork(graph, callback);\n          return;\n        }\n        noflo.graph.loadJSON(graph, (function(_this) {\n          return function(err, instance) {\n            if (err) {\n              return callback(err);\n            }\n            instance.baseDir = _this.baseDir;\n            return _this.createNetwork(instance, callback);\n          };\n        })(this));\n        return;\n      }\n      if (graph.substr(0, 1) !== \"/\" && graph.substr(1, 1) !== \":\" && process && process.cwd) {\n        graph = (process.cwd()) + \"/\" + graph;\n      }\n      return noflo.graph.loadFile(graph, (function(_this) {\n        return function(err, instance) {\n          if (err) {\n            return callback(err);\n          }\n          instance.baseDir = _this.baseDir;\n          return _this.createNetwork(instance, callback);\n        };\n      })(this));\n    };\n\n    Graph.prototype.createNetwork = function(graph, callback) {\n      this.description = graph.properties.description || '';\n      this.icon = graph.properties.icon || this.icon;\n      if (!graph.name) {\n        graph.name = this.nodeId;\n      }\n      graph.componentLoader = this.loader;\n      return noflo.createNetwork(graph, (function(_this) {\n        return function(err, network1) {\n          _this.network = network1;\n          if (err) {\n            return callback(err);\n          }\n          _this.emit('network', _this.network);\n          _this.subscribeNetwork(_this.network);\n          return _this.network.connect(function(err) {\n            var name, node, ref;\n            if (err) {\n              return callback(err);\n            }\n            ref = _this.network.processes;\n            for (name in ref) {\n              node = ref[name];\n              _this.findEdgePorts(name, node);\n            }\n            _this.setToReady();\n            return callback();\n          });\n        };\n      })(this), true);\n    };\n\n    Graph.prototype.subscribeNetwork = function(network) {\n      var contexts;\n      contexts = [];\n      this.network.on('start', (function(_this) {\n        return function() {\n          var ctx;\n          ctx = {};\n          contexts.push(ctx);\n          return _this.activate(ctx);\n        };\n      })(this));\n      return this.network.on('end', (function(_this) {\n        return function() {\n          var ctx;\n          ctx = contexts.pop();\n          if (!ctx) {\n            return;\n          }\n          return _this.deactivate(ctx);\n        };\n      })(this));\n    };\n\n    Graph.prototype.isExportedInport = function(port, nodeName, portName) {\n      var exported, i, len, priv, pub, ref, ref1;\n      ref = this.network.graph.inports;\n      for (pub in ref) {\n        priv = ref[pub];\n        if (!(priv.process === nodeName && priv.port === portName)) {\n          continue;\n        }\n        return pub;\n      }\n      ref1 = this.network.graph.exports;\n      for (i = 0, len = ref1.length; i < len; i++) {\n        exported = ref1[i];\n        if (!(exported.process === nodeName && exported.port === portName)) {\n          continue;\n        }\n        this.network.graph.checkTransactionStart();\n        this.network.graph.removeExport(exported[\"public\"]);\n        this.network.graph.addInport(exported[\"public\"], exported.process, exported.port, exported.metadata);\n        this.network.graph.checkTransactionEnd();\n        return exported[\"public\"];\n      }\n      return false;\n    };\n\n    Graph.prototype.isExportedOutport = function(port, nodeName, portName) {\n      var exported, i, len, priv, pub, ref, ref1;\n      ref = this.network.graph.outports;\n      for (pub in ref) {\n        priv = ref[pub];\n        if (!(priv.process === nodeName && priv.port === portName)) {\n          continue;\n        }\n        return pub;\n      }\n      ref1 = this.network.graph.exports;\n      for (i = 0, len = ref1.length; i < len; i++) {\n        exported = ref1[i];\n        if (!(exported.process === nodeName && exported.port === portName)) {\n          continue;\n        }\n        this.network.graph.checkTransactionStart();\n        this.network.graph.removeExport(exported[\"public\"]);\n        this.network.graph.addOutport(exported[\"public\"], exported.process, exported.port, exported.metadata);\n        this.network.graph.checkTransactionEnd();\n        return exported[\"public\"];\n      }\n      return false;\n    };\n\n    Graph.prototype.setToReady = function() {\n      if (typeof process !== 'undefined' && process.execPath && process.execPath.indexOf('node') !== -1) {\n        return process.nextTick((function(_this) {\n          return function() {\n            _this.ready = true;\n            return _this.emit('ready');\n          };\n        })(this));\n      } else {\n        return setTimeout((function(_this) {\n          return function() {\n            _this.ready = true;\n            return _this.emit('ready');\n          };\n        })(this), 0);\n      }\n    };\n\n    Graph.prototype.findEdgePorts = function(name, process) {\n      var inPorts, outPorts, port, portName, targetPortName;\n      inPorts = process.component.inPorts.ports || process.component.inPorts;\n      outPorts = process.component.outPorts.ports || process.component.outPorts;\n      for (portName in inPorts) {\n        port = inPorts[portName];\n        targetPortName = this.isExportedInport(port, name, portName);\n        if (targetPortName === false) {\n          continue;\n        }\n        this.inPorts.add(targetPortName, port);\n        this.inPorts[targetPortName].once('connect', (function(_this) {\n          return function() {\n            if (_this.starting) {\n              return;\n            }\n            if (_this.isStarted()) {\n              return;\n            }\n            return _this.start(function() {});\n          };\n        })(this));\n      }\n      for (portName in outPorts) {\n        port = outPorts[portName];\n        targetPortName = this.isExportedOutport(port, name, portName);\n        if (targetPortName === false) {\n          continue;\n        }\n        this.outPorts.add(targetPortName, port);\n      }\n      return true;\n    };\n\n    Graph.prototype.isReady = function() {\n      return this.ready;\n    };\n\n    Graph.prototype.isSubgraph = function() {\n      return true;\n    };\n\n    Graph.prototype.setUp = function(callback) {\n      this.starting = true;\n      if (!this.isReady()) {\n        this.once('ready', (function(_this) {\n          return function() {\n            return _this.setUp(callback);\n          };\n        })(this));\n        return;\n      }\n      if (!this.network) {\n        return callback(null);\n      }\n      return this.network.start(function(err) {\n        if (err) {\n          return callback(err);\n        }\n        this.starting = false;\n        return callback();\n      });\n    };\n\n    Graph.prototype.tearDown = function(callback) {\n      this.starting = false;\n      if (!this.network) {\n        return callback(null);\n      }\n      return this.network.stop(function(err) {\n        if (err) {\n          return callback(err);\n        }\n        return callback();\n      });\n    };\n\n    return Graph;\n\n  })(noflo.Component);\n\n  exports.getComponent = function(metadata) {\n    return new Graph(metadata);\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-noflo/node_modules/noflo/lib/loader/ComponentIo.js":"(function() {\n  var customLoader, fbpGraph, platform, utils;\n\n  utils = require('../Utils');\n\n  fbpGraph = require('fbp-graph');\n\n  platform = require('../Platform');\n\n  customLoader = {\n    checked: [],\n    getModuleDependencies: function(loader, dependencies, callback) {\n      var dependency;\n      if (!(dependencies != null ? dependencies.length : void 0)) {\n        return callback(null);\n      }\n      dependency = dependencies.shift();\n      dependency = dependency.replace('/', '-');\n      return this.getModuleComponents(loader, dependency, (function(_this) {\n        return function(err) {\n          return _this.getModuleDependencies(loader, dependencies, callback);\n        };\n      })(this));\n    },\n    getModuleComponents: function(loader, moduleName, callback) {\n      var definition, e, error;\n      if (this.checked.indexOf(moduleName) !== -1) {\n        return callback();\n      }\n      this.checked.push(moduleName);\n      try {\n        definition = require(\"/\" + moduleName + \"/component.json\");\n      } catch (error) {\n        e = error;\n        if (moduleName.substr(0, 1) === '/' && moduleName.length > 1) {\n          return this.getModuleComponents(loader, \"noflo-\" + (moduleName.substr(1)), callback);\n        }\n        return callback(e);\n      }\n      if (!definition.noflo) {\n        return callback();\n      }\n      if (!definition.dependencies) {\n        return callback();\n      }\n      return this.getModuleDependencies(loader, Object.keys(definition.dependencies), function(err) {\n        var cPath, def, loaderPath, name, prefix, ref, ref1;\n        if (err) {\n          return callback(err);\n        }\n        prefix = loader.getModulePrefix(definition.name);\n        if (definition.noflo.icon) {\n          loader.setLibraryIcon(prefix, definition.noflo.icon);\n        }\n        if (moduleName[0] === '/') {\n          moduleName = moduleName.substr(1);\n        }\n        if (definition.noflo.components) {\n          ref = definition.noflo.components;\n          for (name in ref) {\n            cPath = ref[name];\n            if (cPath.indexOf('.coffee') !== -1) {\n              cPath = cPath.replace('.coffee', '.js');\n            }\n            if (cPath.substr(0, 2) === './') {\n              cPath = cPath.substr(2);\n            }\n            loader.registerComponent(prefix, name, \"/\" + moduleName + \"/\" + cPath);\n          }\n        }\n        if (definition.noflo.graphs) {\n          ref1 = definition.noflo.graphs;\n          for (name in ref1) {\n            cPath = ref1[name];\n            def = require(\"/\" + moduleName + \"/\" + cPath);\n            loader.registerGraph(prefix, name, def);\n          }\n        }\n        if (definition.noflo.loader) {\n          loaderPath = \"/\" + moduleName + \"/\" + definition.noflo.loader;\n          customLoader = require(loaderPath);\n          loader.registerLoader(customLoader, callback);\n          return;\n        }\n        return callback();\n      });\n    }\n  };\n\n  exports.register = function(loader, callback) {\n    platform.deprecated('Component.io is deprecated. Please make browser builds using webpack instead. grunt-noflo-browser provides a simple setup for this');\n    customLoader.checked = [];\n    return setTimeout(function() {\n      return customLoader.getModuleComponents(loader, loader.baseDir, callback);\n    }, 1);\n  };\n\n  exports.dynamicLoad = function(name, cPath, metadata, callback) {\n    var e, error, implementation, instance;\n    try {\n      implementation = require(cPath);\n    } catch (error) {\n      e = error;\n      callback(e);\n      return;\n    }\n    if (typeof implementation.getComponent === 'function') {\n      instance = implementation.getComponent(metadata);\n    } else if (typeof implementation === 'function') {\n      instance = implementation(metadata);\n    } else {\n      callback(new Error(\"Unable to instantiate \" + cPath));\n      return;\n    }\n    if (typeof name === 'string') {\n      instance.componentName = name;\n    }\n    return callback(null, instance);\n  };\n\n  exports.setSource = function(loader, packageId, name, source, language, callback) {\n    var e, error, error1, error2, implementation;\n    if (language === 'coffeescript') {\n      if (!window.CoffeeScript) {\n        return callback(new Error('CoffeeScript compiler not available'));\n      }\n      try {\n        source = CoffeeScript.compile(source, {\n          bare: true\n        });\n      } catch (error) {\n        e = error;\n        return callback(e);\n      }\n    } else if (language === 'es6' || language === 'es2015') {\n      if (!window.babel) {\n        return callback(new Error('Babel compiler not available'));\n      }\n      try {\n        source = babel.transform(source).code;\n      } catch (error1) {\n        e = error1;\n        return callback(e);\n      }\n    }\n    try {\n      source = source.replace(\"require('noflo')\", \"require('../NoFlo')\");\n      source = source.replace('require(\"noflo\")', 'require(\"../NoFlo\")');\n      implementation = eval(\"(function () { var exports = {}; \" + source + \"; return exports; })()\");\n    } catch (error2) {\n      e = error2;\n      return callback(e);\n    }\n    if (!(implementation || implementation.getComponent)) {\n      return callback(new Error('Provided source failed to create a runnable component'));\n    }\n    return loader.registerComponent(packageId, name, implementation, callback);\n  };\n\n  exports.getSource = function(loader, name, callback) {\n    var component, componentName, nameParts, path;\n    component = loader.components[name];\n    if (!component) {\n      for (componentName in loader.components) {\n        if (componentName.split('/')[1] === name) {\n          component = loader.components[componentName];\n          name = componentName;\n          break;\n        }\n      }\n      if (!component) {\n        return callback(new Error(\"Component \" + name + \" not installed\"));\n      }\n    }\n    if (typeof component !== 'string') {\n      return callback(new Error(\"Can't provide source for \" + name + \". Not a file\"));\n    }\n    nameParts = name.split('/');\n    if (nameParts.length === 1) {\n      nameParts[1] = nameParts[0];\n      nameParts[0] = '';\n    }\n    if (loader.isGraph(component)) {\n      fbpGraph.graph.loadFile(component, function(err, graph) {\n        if (err) {\n          return callback(err);\n        }\n        if (!graph) {\n          return callback(new Error('Unable to load graph'));\n        }\n        return callback(null, {\n          name: nameParts[1],\n          library: nameParts[0],\n          code: JSON.stringify(graph.toJSON()),\n          language: 'json'\n        });\n      });\n      return;\n    }\n    path = window.require.resolve(component);\n    if (!path) {\n      return callback(new Error(\"Component \" + name + \" is not resolvable to a path\"));\n    }\n    return callback(null, {\n      name: nameParts[1],\n      library: nameParts[0],\n      code: window.require.modules[path].toString(),\n      language: utils.guessLanguageFromFilename(component)\n    });\n  };\n\n}).call(this);\n"}